
SurveillanceSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbc0  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800cdf4  0800cdf4  0001cdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d3ac  0800d3ac  0001d3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d3b0  0800d3b0  0001d3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .trace        00000000  20000000  20000000  0002002c  2**0
                  CONTENTS
  6 .data         0000002c  20000000  0800d3b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002088  2000002c  0800d3e0  0002002c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200020b4  0800d3e0  000220b4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fac3  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000076ec  00000000  00000000  0004fb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020a8  00000000  00000000  00057218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001bf8  00000000  00000000  000592c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bd95  00000000  00000000  0005aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032423  00000000  00000000  00096c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bdd1  00000000  00000000  000c9070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00224e41  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007b70  00000000  00000000  00224e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000002c 	.word	0x2000002c
 8000250:	00000000 	.word	0x00000000
 8000254:	0800cddc 	.word	0x0800cddc

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000030 	.word	0x20000030
 8000270:	0800cddc 	.word	0x0800cddc

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f897 	bl	80003f8 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	20001aa8 	.word	0x20001aa8
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4824      	ldr	r0, [pc, #144]	; (80003ac <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c1e      	ldr	r4, [pc, #120]	; (80003b4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c17      	ldr	r4, [pc, #92]	; (80003b4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b909      	cbnz	r1, 8000392 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800038e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000390:	e7f9      	b.n	8000386 <__tx_ts_wait>

08000392 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000392:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000396:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a0:	e7d8      	b.n	8000354 <__tx_ts_restore>
 80003a2:	bf00      	nop

080003a4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003a8:	20001b44 	.word	0x20001b44
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ac:	20001aac 	.word	0x20001aac
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b0:	20001ab0 	.word	0x20001ab0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b4:	200020b0 	.word	0x200020b0

080003b8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003b8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ba:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003be:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003c6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003c8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003cc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ce:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003d6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003d8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003da:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003dc:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003de:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003f6:	4770      	bx	lr

080003f8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fa:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003fc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000400:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000404:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000406:	b13a      	cbz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000408:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800040c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800040e:	b91a      	cbnz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000412:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000416:	6018      	str	r0, [r3, #0]

08000418 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800041c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800041e:	b122      	cbz	r2, 800042a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000422:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000426:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000428:	e008      	b.n	800043c <__tx_timer_done>

0800042a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000430:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000432:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000434:	d101      	bne.n	800043a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000438:	6818      	ldr	r0, [r3, #0]

0800043a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043a:	6008      	str	r0, [r1, #0]

0800043c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800043e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000440:	b912      	cbnz	r2, 8000448 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000444:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000446:	b1c8      	cbz	r0, 800047c <__tx_timer_nothing_expired>

08000448 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000448:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044a:	4912      	ldr	r1, [pc, #72]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800044c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800044e:	b108      	cbz	r0, 8000454 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000450:	f00b ffd4 	bl	800c3fc <_tx_timer_expiration_process>

08000454 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000458:	b172      	cbz	r2, 8000478 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045a:	f00b ff41 	bl	800c2e0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000460:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000462:	b949      	cbnz	r1, 8000478 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000466:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000472:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000474:	d000      	beq.n	8000478 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000476:	6002      	str	r2, [r0, #0]

08000478 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800047c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800047c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000480:	4770      	bx	lr
 8000482:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000484:	20001b50 	.word	0x20001b50
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000488:	200020b0 	.word	0x200020b0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800048c:	20001b54 	.word	0x20001b54
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	20001be0 	.word	0x20001be0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000494:	20001be4 	.word	0x20001be4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000498:	20001bdc 	.word	0x20001bdc
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049c:	20001bd8 	.word	0x20001bd8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a0:	20001b44 	.word	0x20001b44
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	20001aac 	.word	0x20001aac
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	20001ab0 	.word	0x20001ab0
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004bc:	2334      	movs	r3, #52	; 0x34
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c4:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <tx_application_define+0x40>)
 80004c6:	490b      	ldr	r1, [pc, #44]	; (80004f4 <tx_application_define+0x44>)
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <tx_application_define+0x48>)
 80004ca:	f00c f9cd 	bl	800c868 <_txe_byte_pool_create>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d109      	bne.n	80004e8 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <tx_application_define+0x48>)
 80004d6:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004d8:	68b8      	ldr	r0, [r7, #8]
 80004da:	f001 ffdf 	bl	800249c <App_ThreadX_Init>
 80004de:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d000      	beq.n	80004e8 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004e6:	e7fe      	b.n	80004e6 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000048 	.word	0x20000048
 80004f4:	0800cdf4 	.word	0x0800cdf4
 80004f8:	20000448 	.word	0x20000448

080004fc <BSP_I2C1_Init>:
#define i2c_initialized (1)
#define i2c_uninitialized (0)


void BSP_I2C1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	if(hi2c1.State == HAL_I2C_STATE_RESET)
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <BSP_I2C1_Init+0x18>)
 8000502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	d101      	bne.n	8000510 <BSP_I2C1_Init+0x14>
	{
        I2C1_Init();
 800050c:	f002 ff34 	bl	8003378 <I2C1_Init>
	}
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20001480 	.word	0x20001480

08000518 <BSP_I2C1_DeInit>:

void BSP_I2C1_DeInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c1);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <BSP_I2C1_DeInit+0x10>)
 800051e:	f005 ff2a 	bl	8006376 <HAL_I2C_DeInit>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20001480 	.word	0x20001480

0800052c <BSP_I2C2_Init>:

void BSP_I2C2_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	if(hi2c2.State == HAL_I2C_STATE_RESET)
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <BSP_I2C2_Init+0x18>)
 8000532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000536:	b2db      	uxtb	r3, r3
 8000538:	2b00      	cmp	r3, #0
 800053a:	d101      	bne.n	8000540 <BSP_I2C2_Init+0x14>
	{
        I2C2_Init();
 800053c:	f002 ff5c 	bl	80033f8 <I2C2_Init>
	}
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200014cc 	.word	0x200014cc

08000548 <BSP_I2C2_DeInit>:

void BSP_I2C2_DeInit(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c2);
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <BSP_I2C2_DeInit+0x10>)
 800054e:	f005 ff12 	bl	8006376 <HAL_I2C_DeInit>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200014cc 	.word	0x200014cc

0800055c <BSP_I2C1_WriteReg16>:
int32_t BSP_I2C1_ReadReg(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
    return ret;
}

int32_t BSP_I2C1_WriteReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af04      	add	r7, sp, #16
 8000562:	60ba      	str	r2, [r7, #8]
 8000564:	461a      	mov	r2, r3
 8000566:	4603      	mov	r3, r0
 8000568:	81fb      	strh	r3, [r7, #14]
 800056a:	460b      	mov	r3, r1
 800056c:	81bb      	strh	r3, [r7, #12]
 800056e:	4613      	mov	r3, r2
 8000570:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 8000572:	89ba      	ldrh	r2, [r7, #12]
 8000574:	89f9      	ldrh	r1, [r7, #14]
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	9302      	str	r3, [sp, #8]
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2302      	movs	r3, #2
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <BSP_I2C1_WriteReg16+0x40>)
 8000588:	f005 ff24 	bl	80063d4 <HAL_I2C_Mem_Write>
 800058c:	4603      	mov	r3, r0
 800058e:	617b      	str	r3, [r7, #20]
    return ret;
 8000590:	697b      	ldr	r3, [r7, #20]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20001480 	.word	0x20001480

080005a0 <BSP_I2C1_ReadReg16>:

int32_t BSP_I2C1_ReadReg16(uint16_t Address, uint16_t Reg, uint8_t *pData, uint16_t Length){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af04      	add	r7, sp, #16
 80005a6:	60ba      	str	r2, [r7, #8]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4603      	mov	r3, r0
 80005ac:	81fb      	strh	r3, [r7, #14]
 80005ae:	460b      	mov	r3, r1
 80005b0:	81bb      	strh	r3, [r7, #12]
 80005b2:	4613      	mov	r3, r2
 80005b4:	80fb      	strh	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c1, Address, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, 1000);
 80005b6:	89ba      	ldrh	r2, [r7, #12]
 80005b8:	89f9      	ldrh	r1, [r7, #14]
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2302      	movs	r3, #2
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <BSP_I2C1_ReadReg16+0x40>)
 80005cc:	f006 f816 	bl	80065fc <HAL_I2C_Mem_Read>
 80005d0:	4603      	mov	r3, r0
 80005d2:	617b      	str	r3, [r7, #20]
    return ret;
 80005d4:	697b      	ldr	r3, [r7, #20]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20001480 	.word	0x20001480

080005e4 <BSP_I2C2_WriteRegHTS221>:

int32_t BSP_I2C2_WriteRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af04      	add	r7, sp, #16
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Write(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	b29b      	uxth	r3, r3
 8000602:	2164      	movs	r1, #100	; 0x64
 8000604:	9102      	str	r1, [sp, #8]
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2301      	movs	r3, #1
 800060e:	21be      	movs	r1, #190	; 0xbe
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <BSP_I2C2_WriteRegHTS221+0x40>)
 8000612:	f005 fedf 	bl	80063d4 <HAL_I2C_Mem_Write>
 8000616:	4603      	mov	r3, r0
 8000618:	60fb      	str	r3, [r7, #12]
    return ret;
 800061a:	68fb      	ldr	r3, [r7, #12]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200014cc 	.word	0x200014cc

08000628 <BSP_I2C2_ReadRegHTS221>:

int32_t BSP_I2C2_ReadRegHTS221(uint8_t Reg, uint8_t *pData, uint8_t Length){
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af04      	add	r7, sp, #16
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
    int32_t ret = HAL_I2C_Mem_Read(&hi2c2, HTS221_I2C_ADDR, Reg | 0x80, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800063e:	b2db      	uxtb	r3, r3
 8000640:	b29a      	uxth	r2, r3
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	b29b      	uxth	r3, r3
 8000646:	2164      	movs	r1, #100	; 0x64
 8000648:	9102      	str	r1, [sp, #8]
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2301      	movs	r3, #1
 8000652:	21be      	movs	r1, #190	; 0xbe
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <BSP_I2C2_ReadRegHTS221+0x40>)
 8000656:	f005 ffd1 	bl	80065fc <HAL_I2C_Mem_Read>
 800065a:	4603      	mov	r3, r0
 800065c:	60fb      	str	r3, [r7, #12]
    return ret;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200014cc 	.word	0x200014cc

0800066c <BSP_I2C2_ReadRegISM330DHCX>:

int32_t BSP_I2C2_ReadRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af04      	add	r7, sp, #16
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Read(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	b29a      	uxth	r2, r3
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	b29b      	uxth	r3, r3
 8000684:	2164      	movs	r1, #100	; 0x64
 8000686:	9102      	str	r1, [sp, #8]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	21d6      	movs	r1, #214	; 0xd6
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <BSP_I2C2_ReadRegISM330DHCX+0x3c>)
 8000694:	f005 ffb2 	bl	80065fc <HAL_I2C_Mem_Read>
 8000698:	4603      	mov	r3, r0
 800069a:	60fb      	str	r3, [r7, #12]
    return ret;
 800069c:	68fb      	ldr	r3, [r7, #12]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200014cc 	.word	0x200014cc

080006ac <BSP_I2C2_WriteRegISM330DHCX>:

int32_t BSP_I2C2_WriteRegISM330DHCX(uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af04      	add	r7, sp, #16
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	int32_t ret = HAL_I2C_Mem_Write(&hi2c2, ISM330DHCX_I2C_ADDR, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 100);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	2164      	movs	r1, #100	; 0x64
 80006c6:	9102      	str	r1, [sp, #8]
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	21d6      	movs	r1, #214	; 0xd6
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <BSP_I2C2_WriteRegISM330DHCX+0x3c>)
 80006d4:	f005 fe7e 	bl	80063d4 <HAL_I2C_Mem_Write>
 80006d8:	4603      	mov	r3, r0
 80006da:	60fb      	str	r3, [r7, #12]
    return ret;
 80006dc:	68fb      	ldr	r3, [r7, #12]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200014cc 	.word	0x200014cc

080006ec <BSP_ReadPinISM330DHCX>:

int32_t BSP_ReadPinISM330DHCX(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(Mems_ISM330DLC_INT1_GPIO_Port, Mems_ISM330DLC_INT1_Pin);
 80006f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <BSP_ReadPinISM330DHCX+0x14>)
 80006f6:	f005 fd65 	bl	80061c4 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	42021000 	.word	0x42021000

08000704 <BSP_ISM330DHCX_IO_Init>:

void BSP_ISM330DHCX_IO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    MotionSensor_GPIO_Init();
 8000708:	f002 fd10 	bl	800312c <MotionSensor_GPIO_Init>
	BSP_I2C2_Init();
 800070c:	f7ff ff0e 	bl	800052c <BSP_I2C2_Init>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <BSP_GetTick>:

uint32_t BSP_GetTick(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000718:	f003 fb94 	bl	8003e44 <HAL_GetTick>
 800071c:	4603      	mov	r3, r0
}
 800071e:	4618      	mov	r0, r3
 8000720:	bd80      	pop	{r7, pc}

08000722 <BSP_CameraInit>:
#define CAMERA_PF_RGB888                1U

static void BSP_CameraHwReset(void);
static void BSP_CameraHWInit(void);

BSP_CameraStatus_t BSP_CameraInit(void){
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
	CAM_GPIO_Init();    //Reset Pin, Power Pin init
 8000726:	f002 fbbf 	bl	8002ea8 <CAM_GPIO_Init>
	//DCMI_GPIO_Init();   //DCMI GPIO Init
	DCMI_DMA_Init();    //DCMI DMA Init
 800072a:	f002 f8c1 	bl	80028b0 <DCMI_DMA_Init>
	MX_DCMI_Init();     //DCMI Init
 800072e:	f001 ff91 	bl	8002654 <MX_DCMI_Init>
	BSP_CameraHwReset();//Reset it
 8000732:	f000 f817 	bl	8000764 <BSP_CameraHwReset>
    BSP_CameraHWInit(); //Init OV5460 driver
 8000736:	f000 f839 	bl	80007ac <BSP_CameraHWInit>
	return CameraOK;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	bd80      	pop	{r7, pc}

08000740 <BSP_CameraStart>:

void BSP_CameraStart(uint8_t* Buffer){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)Buffer, CAMERA_DATA_SIZE);
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <BSP_CameraStart+0x1c>)
 800074c:	2100      	movs	r1, #0
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <BSP_CameraStart+0x20>)
 8000750:	f003 fdb8 	bl	80042c4 <HAL_DCMI_Start_DMA>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	00024540 	.word	0x00024540
 8000760:	20001358 	.word	0x20001358

08000764 <BSP_CameraHwReset>:
void BSP_CameraStop(void){
	  HAL_DCMI_Stop(&hdcmi);
}

static void BSP_CameraHwReset(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    /* Camera sensor RESET sequence */
    /* Assert the camera STANDBY and RSTI pins */

    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2108      	movs	r1, #8
 800076c:	480e      	ldr	r0, [pc, #56]	; (80007a8 <BSP_CameraHwReset+0x44>)
 800076e:	f005 fd41 	bl	80061f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2104      	movs	r1, #4
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <BSP_CameraHwReset+0x44>)
 8000778:	f005 fd3c 	bl	80061f4 <HAL_GPIO_WritePin>
    HAL_Delay(100);   /* RST and XSDN signals asserted during 100ms */
 800077c:	2064      	movs	r0, #100	; 0x64
 800077e:	f003 fb6d 	bl	8003e5c <HAL_Delay>

    /* De-assert the camera STANDBY pin (active high) */
    HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2108      	movs	r1, #8
 8000786:	4808      	ldr	r0, [pc, #32]	; (80007a8 <BSP_CameraHwReset+0x44>)
 8000788:	f005 fd34 	bl	80061f4 <HAL_GPIO_WritePin>
    HAL_Delay(3);     /* RST de-asserted and XSDN de-asserted during 3ms */
 800078c:	2003      	movs	r0, #3
 800078e:	f003 fb65 	bl	8003e5c <HAL_Delay>

    /* De-assert the camera RSTI pin (active low) */
    HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2104      	movs	r1, #4
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <BSP_CameraHwReset+0x44>)
 8000798:	f005 fd2c 	bl	80061f4 <HAL_GPIO_WritePin>
    HAL_Delay(20);     /* RST de-asserted during 20ms */
 800079c:	2014      	movs	r0, #20
 800079e:	f003 fb5d 	bl	8003e5c <HAL_Delay>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	42022000 	.word	0x42022000

080007ac <BSP_CameraHWInit>:

static void BSP_CameraHWInit(void){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
	  uint32_t temp = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
	  OV5640_IO_t              IO;
	  static OV5640_Handle_t   OV5640_Handle;
	  IO.Address = CAMERA_OV5640_ADDRESS;
 80007b6:	2378      	movs	r3, #120	; 0x78
 80007b8:	80bb      	strh	r3, [r7, #4]
	  IO.Init = BSP_I2C1_Init;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <BSP_CameraHWInit+0x4c>)
 80007bc:	60bb      	str	r3, [r7, #8]
	  IO.DeInit = BSP_I2C1_DeInit;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <BSP_CameraHWInit+0x50>)
 80007c0:	60fb      	str	r3, [r7, #12]
      IO.Read = BSP_I2C1_ReadReg16;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <BSP_CameraHWInit+0x54>)
 80007c4:	617b      	str	r3, [r7, #20]
      IO.Write = BSP_I2C1_WriteReg16;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <BSP_CameraHWInit+0x58>)
 80007c8:	613b      	str	r3, [r7, #16]
      IO.GetTick = BSP_GetTick;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <BSP_CameraHWInit+0x5c>)
 80007cc:	61bb      	str	r3, [r7, #24]
      OV5640_LinkBus(&OV5640_Handle, &IO);
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <BSP_CameraHWInit+0x60>)
 80007d4:	f001 fa36 	bl	8001c44 <OV5640_LinkBus>
      OV5640_ReadID(&OV5640_Handle,&temp);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <BSP_CameraHWInit+0x60>)
 80007e0:	f001 fe0c 	bl	80023fc <OV5640_ReadID>
      OV5640_Init(&OV5640_Handle, OV5640_R640x480, OV5640_RGB565);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2103      	movs	r1, #3
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <BSP_CameraHWInit+0x60>)
 80007ea:	f001 fa4f 	bl	8001c8c <OV5640_Init>
}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	080004fd 	.word	0x080004fd
 80007fc:	08000519 	.word	0x08000519
 8000800:	080005a1 	.word	0x080005a1
 8000804:	0800055d 	.word	0x0800055d
 8000808:	08000715 	.word	0x08000715
 800080c:	2000047c 	.word	0x2000047c

08000810 <BSP_TempHumSensorInit>:
};
static HTS221_Handle_t TempSensor_Handle = {0};


int32_t BSP_TempHumSensorInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
	int32_t ret = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
	HTS221_Init_Struct_t Settings = { .DataReadyConfig = HTS221_DataReadyDisable,
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <BSP_TempHumSensorInit+0x30>)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000822:	6018      	str	r0, [r3, #0]
 8000824:	3304      	adds	r3, #4
 8000826:	8019      	strh	r1, [r3, #0]
									  .HumidityResolution = HTS221_Hum64Samples,
									  .OutputDataRate = HTS221_1_0Hz,
									  .TemperatureResolution = HTS221_Temp32amples

	};
	ret = HTS221_Init(&TempSensor_Handle, Settings, &TempSensor_IO);
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <BSP_TempHumSensorInit+0x34>)
 800082a:	1d3a      	adds	r2, r7, #4
 800082c:	ca06      	ldmia	r2, {r1, r2}
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <BSP_TempHumSensorInit+0x38>)
 8000830:	f000 f90e 	bl	8000a50 <HTS221_Init>
 8000834:	60f8      	str	r0, [r7, #12]
	return ret;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	0800ce08 	.word	0x0800ce08
 8000844:	20000000 	.word	0x20000000
 8000848:	200004a0 	.word	0x200004a0

0800084c <BSP_ReadTemperature>:

int32_t BSP_ReadTemperature(float *result)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	return HTS221_ReadTemperature(&TempSensor_Handle, result);
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <BSP_ReadTemperature+0x1c>)
 8000858:	f000 f958 	bl	8000b0c <HTS221_ReadTemperature>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200004a0 	.word	0x200004a0

0800086c <BSP_ReadHumidity>:


int32_t BSP_ReadHumidity(float *result)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	return HTS221_ReadHumidity(&TempSensor_Handle, result);
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <BSP_ReadHumidity+0x1c>)
 8000878:	f000 f98d 	bl	8000b96 <HTS221_ReadHumidity>
 800087c:	4603      	mov	r3, r0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200004a0 	.word	0x200004a0

0800088c <BSP_MotionSensorInit>:
#include <stddef.h>

static ISM330DHCX_Handle_t MotionSensor;

int32_t BSP_MotionSensorInit(void)
{
 800088c:	b5b0      	push	{r4, r5, r7, lr}
 800088e:	b0a6      	sub	sp, #152	; 0x98
 8000890:	af0c      	add	r7, sp, #48	; 0x30
	int32_t ret = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	663b      	str	r3, [r7, #96]	; 0x60
	float JunkData[3];
	uint8_t DiscardedXLSamples = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t DiscardedGyroSamples = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	ISM330DHCX_IO_t SensorIO =
 80008a2:	4b38      	ldr	r3, [pc, #224]	; (8000984 <BSP_MotionSensorInit+0xf8>)
 80008a4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80008a8:	461d      	mov	r5, r3
 80008aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			.GetTick = BSP_GetTick,
			.ReadInt1Pin = BSP_ReadPinISM330DHCX,
			.ReadInt2Pin = NULL
	};

	ISM330DHCX_Init_Struct_t Init =
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2234      	movs	r2, #52	; 0x34
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f00c fa85 	bl	800cdcc <memset>
 80008c2:	2304      	movs	r3, #4
 80008c4:	71bb      	strb	r3, [r7, #6]
 80008c6:	2320      	movs	r3, #32
 80008c8:	773b      	strb	r3, [r7, #28]
 80008ca:	2302      	movs	r3, #2
 80008cc:	77fb      	strb	r3, [r7, #31]
 80008ce:	230c      	movs	r3, #12
 80008d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80008d4:	2320      	movs	r3, #32
 80008d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80008da:	2308      	movs	r3, #8
 80008dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80008e0:	2303      	movs	r3, #3
 80008e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

			.TIMESTAMP_EN = ISM330DHCX_DefaultSetting

	};

	ret = ISM330DHCX_Init(&MotionSensor, Init, &SensorIO);
 80008e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ea:	930a      	str	r3, [sp, #40]	; 0x28
 80008ec:	466d      	mov	r5, sp
 80008ee:	f107 0410 	add.w	r4, r7, #16
 80008f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000906:	4820      	ldr	r0, [pc, #128]	; (8000988 <BSP_MotionSensorInit+0xfc>)
 8000908:	f000 fc62 	bl	80011d0 <ISM330DHCX_Init>
 800090c:	6638      	str	r0, [r7, #96]	; 0x60
	if(ret !=ISM330DHCX_Ok)
 800090e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000910:	2b00      	cmp	r3, #0
 8000912:	d029      	beq.n	8000968 <BSP_MotionSensorInit+0xdc>
	{
		return ret;
 8000914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000916:	e030      	b.n	800097a <BSP_MotionSensorInit+0xee>
	}
	while(DiscardedXLSamples < 12 && DiscardedGyroSamples < 12)
	{
        if(BSP_ReadAccelXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 8000918:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800091c:	f103 0208 	add.w	r2, r3, #8
 8000920:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000924:	1d19      	adds	r1, r3, #4
 8000926:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f82e 	bl	800098c <BSP_ReadAccelXYZ>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d104      	bne.n	8000940 <BSP_MotionSensorInit+0xb4>
        {
        	DiscardedXLSamples++;
 8000936:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800093a:	3301      	adds	r3, #1
 800093c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }

        if(BSP_ReadGyroXYZ(&JunkData[0],&JunkData[1],&JunkData[2]) ==ISM330DHCX_DataReady)
 8000940:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000944:	f103 0208 	add.w	r2, r3, #8
 8000948:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800094c:	1d19      	adds	r1, r3, #4
 800094e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f836 	bl	80009c4 <BSP_ReadGyroXYZ>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d104      	bne.n	8000968 <BSP_MotionSensorInit+0xdc>
        {
        	DiscardedGyroSamples++;
 800095e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000962:	3301      	adds	r3, #1
 8000964:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	while(DiscardedXLSamples < 12 && DiscardedGyroSamples < 12)
 8000968:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800096c:	2b0b      	cmp	r3, #11
 800096e:	d803      	bhi.n	8000978 <BSP_MotionSensorInit+0xec>
 8000970:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000974:	2b0b      	cmp	r3, #11
 8000976:	d9cf      	bls.n	8000918 <BSP_MotionSensorInit+0x8c>
        }
	}
	return ISM330DHCX_Ok;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3768      	adds	r7, #104	; 0x68
 800097e:	46bd      	mov	sp, r7
 8000980:	bdb0      	pop	{r4, r5, r7, pc}
 8000982:	bf00      	nop
 8000984:	0800ce10 	.word	0x0800ce10
 8000988:	200004c8 	.word	0x200004c8

0800098c <BSP_ReadAccelXYZ>:

int32_t BSP_ReadAccelXYZ(float *Ax, float *Ay, float *Az)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadAccel(&MotionSensor, Ax, Ay, Az);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	68f9      	ldr	r1, [r7, #12]
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <BSP_ReadAccelXYZ+0x34>)
 80009a4:	f000 fcba 	bl	800131c <ISM330DHCX_ReadAccel>
 80009a8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <BSP_ReadAccelXYZ+0x28>
    {
    	return ret;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	e000      	b.n	80009b6 <BSP_ReadAccelXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 80009b4:	2300      	movs	r3, #0

}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200004c8 	.word	0x200004c8

080009c4 <BSP_ReadGyroXYZ>:

int32_t BSP_ReadGyroXYZ(float *Wx, float *Wy, float *Wz)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
    int32_t ret = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
    ret = ISM330DHCX_ReadGyro(&MotionSensor, Wx, Wy, Wz);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	68f9      	ldr	r1, [r7, #12]
 80009da:	4807      	ldr	r0, [pc, #28]	; (80009f8 <BSP_ReadGyroXYZ+0x34>)
 80009dc:	f000 fcfd 	bl	80013da <ISM330DHCX_ReadGyro>
 80009e0:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_DataReady)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <BSP_ReadGyroXYZ+0x28>
    {
    	return ret;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	e000      	b.n	80009ee <BSP_ReadGyroXYZ+0x2a>
    }
    return ISM330DHCX_DataReady;
 80009ec:	2300      	movs	r3, #0

}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200004c8 	.word	0x200004c8

080009fc <BSP_RamInit>:
#include "octospi.h"
#include <stdint.h>



void BSP_RamInit(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
    Ram_GPIO_Init();
 8000a00:	f002 fa9a 	bl	8002f38 <Ram_GPIO_Init>
    OSPI_RamInit();
 8000a04:	f002 ffc4 	bl	8003990 <OSPI_RamInit>
    OSPI_DelayBlockConfig();
 8000a08:	f003 f88a 	bl	8003b20 <OSPI_DelayBlockConfig>
    OSPI_EnableMemMappedMode();
 8000a0c:	f003 f82c 	bl	8003a68 <OSPI_EnableMemMappedMode>
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <BSP_RamErase>:

void BSP_RamErase(void){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
	  uint32_t *pRam = (uint32_t*)OSPI1_RAM_BASE;
 8000a1a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000a1e:	603b      	str	r3, [r7, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	e008      	b.n	8000a38 <BSP_RamErase+0x24>
		  *(pRam + i) = 0;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
	  for(uint32_t i = 0; i < (OSPI1_RAM_LENGTH / 4); i = i + 1){
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3301      	adds	r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000a3e:	d3f2      	bcc.n	8000a26 <BSP_RamErase+0x12>
	  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <HTS221_Init>:
static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature);
static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity);


int32_t HTS221_Init(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings, HTS221_IO_t *IO)
{
 8000a50:	b5b0      	push	{r4, r5, r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	1d38      	adds	r0, r7, #4
 8000a5a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a5e:	603b      	str	r3, [r7, #0]
    if(Handle == NULL)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d102      	bne.n	8000a6c <HTS221_Init+0x1c>
    {
    	return HTS221_Error;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	e032      	b.n	8000ad2 <HTS221_Init+0x82>
    }
    Handle->IO = *IO;
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	4614      	mov	r4, r2
 8000a72:	461d      	mov	r5, r3
 8000a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a7c:	e884 0003 	stmia.w	r4, {r0, r1}
    Handle->Context.Handle = Handle;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	619a      	str	r2, [r3, #24]
    Handle->Context.Read = HTS221_ReadRegWrapper;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <HTS221_Init+0x8c>)
 8000a8a:	61da      	str	r2, [r3, #28]
    Handle->Context.Write = HTS221_WriteRegWrapper;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <HTS221_Init+0x90>)
 8000a90:	621a      	str	r2, [r3, #32]

    if(Settings.DataReadyConfig == HTS221_DataReadyEnable && Handle->IO.ReadPin == NULL)
 8000a92:	7a7b      	ldrb	r3, [r7, #9]
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d106      	bne.n	8000aa6 <HTS221_Init+0x56>
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <HTS221_Init+0x56>
    {
    	return HTS221_Error; //Must provide a read pin function if using the data ready pin
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	e015      	b.n	8000ad2 <HTS221_Init+0x82>
    }
    Handle->DRDY_Config = Settings.DataReadyConfig;
 8000aa6:	7a7a      	ldrb	r2, [r7, #9]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    Handle->DRDY_Polarity = Settings.DataReadySignalPolarity;
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    //Initialized Bus
    if(Handle->IO.Init != NULL)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <HTS221_Init+0x74>
    {
        Handle->IO.Init();
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4798      	blx	r3
    }

    //Initialize Device
    return HTS221_RegisterInit(Handle, Settings);
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f000 f8d6 	bl	8000c7c <HTS221_RegisterInit>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08000c21 	.word	0x08000c21
 8000ae0:	08000c4f 	.word	0x08000c4f

08000ae4 <HTS221_ResetRegisters>:
	temp &= ~HTS221_HEATER_ENABLE;                                           //Modify Reg
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG2, &temp, 1); //Store Reg
}

int32_t HTS221_ResetRegisters(HTS221_Handle_t *Handle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	uint8_t temp = HTS221_RebootSignal;
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	73fb      	strb	r3, [r7, #15]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG2, &temp, 1);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f103 0018 	add.w	r0, r3, #24
 8000af6:	f107 020f 	add.w	r2, r7, #15
 8000afa:	2301      	movs	r3, #1
 8000afc:	2121      	movs	r1, #33	; 0x21
 8000afe:	f000 fb12 	bl	8001126 <HTS221_WriteReg>
 8000b02:	4603      	mov	r3, r0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HTS221_ReadTemperature>:
	//turn on
	return HTS221_PowerUp(Handle);
}

int32_t HTS221_ReadTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d116      	bne.n	8000b56 <HTS221_ReadTemperature+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	4798      	blx	r3
 8000b2e:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <HTS221_ReadTemperature+0x34>
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d007      	beq.n	8000b50 <HTS221_ReadTemperature+0x44>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b46:	2b80      	cmp	r3, #128	; 0x80
 8000b48:	d11c      	bne.n	8000b84 <HTS221_ReadTemperature+0x78>
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d019      	beq.n	8000b84 <HTS221_ReadTemperature+0x78>
        {
            return HTS221_DataNotReady;
 8000b50:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8000b54:	e01b      	b.n	8000b8e <HTS221_ReadTemperature+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f103 0018 	add.w	r0, r3, #24
 8000b5c:	f107 020f 	add.w	r2, r7, #15
 8000b60:	2301      	movs	r3, #1
 8000b62:	2127      	movs	r1, #39	; 0x27
 8000b64:	f000 fab6 	bl	80010d4 <HTS221_ReadReg>
 8000b68:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HTS221_ReadTemperature+0x68>
        {
        	return ret;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	e00c      	b.n	8000b8e <HTS221_ReadTemperature+0x82>
        } else if ((reg & HTS221_TEMPDATA_Msk) == 0)
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d102      	bne.n	8000b84 <HTS221_ReadTemperature+0x78>
        {
        	return HTS221_DataNotReady;
 8000b7e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8000b82:	e004      	b.n	8000b8e <HTS221_ReadTemperature+0x82>
        }
	}
    return HTS221_CalculateTemperature(Handle, temperature);
 8000b84:	6839      	ldr	r1, [r7, #0]
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 f8b6 	bl	8000cf8 <HTS221_CalculateTemperature>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HTS221_ReadHumidity>:
int32_t HTS221_ReadHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
    uint8_t reg = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
	//Check if DRDY is used
	if(Handle->DRDY_Config == HTS221_DataReadyEnable)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d116      	bne.n	8000be0 <HTS221_ReadHumidity+0x4a>
	{
		//If its used, read it.
		int32_t PinState = Handle->IO.ReadPin();
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4798      	blx	r3
 8000bb8:	6138      	str	r0, [r7, #16]
		//If Its High and Polarity is Active Low OR If its Low and Polarity is Active High, return data not ready
        if((Handle->DRDY_Polarity == HTS221_DataActiveHigh && PinState == 0) || (Handle->DRDY_Polarity == HTS221_DataActiveLow && PinState != 0))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <HTS221_ReadHumidity+0x34>
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d007      	beq.n	8000bda <HTS221_ReadHumidity+0x44>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bd0:	2b80      	cmp	r3, #128	; 0x80
 8000bd2:	d11c      	bne.n	8000c0e <HTS221_ReadHumidity+0x78>
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d019      	beq.n	8000c0e <HTS221_ReadHumidity+0x78>
        {
            return HTS221_DataNotReady;
 8000bda:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8000bde:	e01b      	b.n	8000c18 <HTS221_ReadHumidity+0x82>
        }
	} else
	{
		//Otherwise, read the status reg
        ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_STATUS_REG, &reg, 1);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f103 0018 	add.w	r0, r3, #24
 8000be6:	f107 020f 	add.w	r2, r7, #15
 8000bea:	2301      	movs	r3, #1
 8000bec:	2127      	movs	r1, #39	; 0x27
 8000bee:	f000 fa71 	bl	80010d4 <HTS221_ReadReg>
 8000bf2:	6178      	str	r0, [r7, #20]
        if(ret != HTS221_Ok)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HTS221_ReadHumidity+0x68>
        {
        	return ret;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	e00c      	b.n	8000c18 <HTS221_ReadHumidity+0x82>
        } else if ((reg & HTS221_HUMDATA_Msk) == 0)
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <HTS221_ReadHumidity+0x78>
        {
        	return HTS221_DataNotReady;
 8000c08:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8000c0c:	e004      	b.n	8000c18 <HTS221_ReadHumidity+0x82>
        }
	}

	return HTS221_CalculateHumidity(Handle, humidity);
 8000c0e:	6839      	ldr	r1, [r7, #0]
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 f96b 	bl	8000eec <HTS221_CalculateHumidity>
 8000c16:	4603      	mov	r3, r0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HTS221_ReadRegWrapper>:
	return HTS221_WriteReg(&Handle->Context,HTS221_REG_CTRL_REG1, &temp, 1); //Store Reg
}


static int32_t HTS221_ReadRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	72fb      	strb	r3, [r7, #11]
 8000c30:	4613      	mov	r3, r2
 8000c32:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Read(Reg, Buffer, Length);
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	7aba      	ldrb	r2, [r7, #10]
 8000c3e:	7af8      	ldrb	r0, [r7, #11]
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	4798      	blx	r3
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HTS221_WriteRegWrapper>:

static int32_t HTS221_WriteRegWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	72fb      	strb	r3, [r7, #11]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	72bb      	strb	r3, [r7, #10]
	HTS221_Handle_t *HTS221_Handle = Handle;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	617b      	str	r3, [r7, #20]
	return HTS221_Handle->IO.Write(Reg, Buffer, Length);
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	7aba      	ldrb	r2, [r7, #10]
 8000c6c:	7af8      	ldrb	r0, [r7, #11]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4798      	blx	r3
 8000c72:	4603      	mov	r3, r0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HTS221_RegisterInit>:

static int32_t HTS221_RegisterInit(HTS221_Handle_t *Handle, HTS221_Init_Struct_t Settings)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	e883 0006 	stmia.w	r3, {r1, r2}
    int32_t ret =  0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
    uint8_t temp = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	74fb      	strb	r3, [r7, #19]

    //reset registers to factory default
    ret = HTS221_ResetRegisters(Handle);
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff ff26 	bl	8000ae4 <HTS221_ResetRegisters>
 8000c98:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HTS221_RegisterInit+0x28>
    {
    	return ret;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	e025      	b.n	8000cf0 <HTS221_RegisterInit+0x74>
    }

    temp = HTS221_BDU_ENABLE | Settings.OutputDataRate;
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	74fb      	strb	r3, [r7, #19]
    ret = HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG1, &temp,1);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f103 0018 	add.w	r0, r3, #24
 8000cb4:	f107 0213 	add.w	r2, r7, #19
 8000cb8:	2301      	movs	r3, #1
 8000cba:	2120      	movs	r1, #32
 8000cbc:	f000 fa33 	bl	8001126 <HTS221_WriteReg>
 8000cc0:	6178      	str	r0, [r7, #20]
    if(ret != HTS221_Ok)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HTS221_RegisterInit+0x50>
    {
    	return ret;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	e011      	b.n	8000cf0 <HTS221_RegisterInit+0x74>
    }

    temp = Settings.DataReadySignalPolarity | Settings.DataReadyOutputMode | Settings.DataReadyConfig;
 8000ccc:	79fa      	ldrb	r2, [r7, #7]
 8000cce:	7a3b      	ldrb	r3, [r7, #8]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	7a7b      	ldrb	r3, [r7, #9]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	74fb      	strb	r3, [r7, #19]
    return HTS221_WriteReg(&Handle->Context, HTS221_REG_CTRL_REG3, &temp,1);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f103 0018 	add.w	r0, r3, #24
 8000ce2:	f107 0213 	add.w	r2, r7, #19
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	2122      	movs	r1, #34	; 0x22
 8000cea:	f000 fa1c 	bl	8001126 <HTS221_WriteReg>
 8000cee:	4603      	mov	r3, r0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HTS221_CalculateTemperature>:

static int32_t HTS221_CalculateTemperature(HTS221_Handle_t *Handle, float *temperature)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 8000d06:	2300      	movs	r3, #0
 8000d08:	81bb      	strh	r3, [r7, #12]
	int16_t temp = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	847b      	strh	r3, [r7, #34]	; 0x22
    float T0_OUT = 0, T1_OUT = 0;
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
    float T1_DEGC = 0,  T0_DEGC = 0;
 8000d1a:	f04f 0300 	mov.w	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]


    //Fetch T0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_OUT, Buffer, 2);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f103 0018 	add.w	r0, r3, #24
 8000d2c:	f107 020c 	add.w	r2, r7, #12
 8000d30:	2302      	movs	r3, #2
 8000d32:	213c      	movs	r1, #60	; 0x3c
 8000d34:	f000 f9ce 	bl	80010d4 <HTS221_ReadReg>
 8000d38:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HTS221_CalculateTemperature+0x4c>
    {
    	return ret;
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	e0ce      	b.n	8000ee2 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8000d44:	7b7b      	ldrb	r3, [r7, #13]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	7b3b      	ldrb	r3, [r7, #12]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	4413      	add	r3, r2
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_OUT = temp * 1.0f;
 8000d56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d62:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch T1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_OUT, Buffer, 2);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f103 0018 	add.w	r0, r3, #24
 8000d6c:	f107 020c 	add.w	r2, r7, #12
 8000d70:	2302      	movs	r3, #2
 8000d72:	213e      	movs	r1, #62	; 0x3e
 8000d74:	f000 f9ae 	bl	80010d4 <HTS221_ReadReg>
 8000d78:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HTS221_CalculateTemperature+0x8c>
    {
    	return ret;
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	e0ae      	b.n	8000ee2 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8000d84:	7b7b      	ldrb	r3, [r7, #13]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	7b3b      	ldrb	r3, [r7, #12]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_OUT = temp * 1.0f;
 8000d96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da2:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch T0DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T0_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f103 0018 	add.w	r0, r3, #24
 8000dac:	f107 020c 	add.w	r2, r7, #12
 8000db0:	2301      	movs	r3, #1
 8000db2:	2132      	movs	r1, #50	; 0x32
 8000db4:	f000 f98e 	bl	80010d4 <HTS221_ReadReg>
 8000db8:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HTS221_CalculateTemperature+0xcc>
    {
    	return ret;
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	e08e      	b.n	8000ee2 <HTS221_CalculateTemperature+0x1ea>
    }

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_T0_msb, &Buffer[1], 1);  //Get MSB, store in Buffer8
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f103 0018 	add.w	r0, r3, #24
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	2135      	movs	r1, #53	; 0x35
 8000dd4:	f000 f97e 	bl	80010d4 <HTS221_ReadReg>
 8000dd8:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HTS221_CalculateTemperature+0xec>
    {
    	return ret;
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	e07e      	b.n	8000ee2 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x03) << 8) + Buffer[0];
 8000de4:	7b7b      	ldrb	r3, [r7, #13]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	7b3b      	ldrb	r3, [r7, #12]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	847b      	strh	r3, [r7, #34]	; 0x22
    T0_DEGC = temp / 8.0f; //Calculate
 8000dfa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e06:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000e0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e0e:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch T1DegC
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_T1_degC_x8, Buffer, 1); //Get LSB, store in Buffer16
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f103 0018 	add.w	r0, r3, #24
 8000e18:	f107 020c 	add.w	r2, r7, #12
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	2133      	movs	r1, #51	; 0x33
 8000e20:	f000 f958 	bl	80010d4 <HTS221_ReadReg>
 8000e24:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HTS221_CalculateTemperature+0x138>
    {
    	return ret;
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	e058      	b.n	8000ee2 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = ((Buffer[1] & 0x0C) << 6) + Buffer[0];
 8000e30:	7b7b      	ldrb	r3, [r7, #13]
 8000e32:	019b      	lsls	r3, r3, #6
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	7b3b      	ldrb	r3, [r7, #12]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4413      	add	r3, r2
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	847b      	strh	r3, [r7, #34]	; 0x22
    T1_DEGC = temp / 8.0f; //Calculate
 8000e46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e52:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e5a:	edc7 7a05 	vstr	s15, [r7, #20]

    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_TEMP_OUT_L, Buffer, 2);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f103 0018 	add.w	r0, r3, #24
 8000e64:	f107 020c 	add.w	r2, r7, #12
 8000e68:	2302      	movs	r3, #2
 8000e6a:	212a      	movs	r1, #42	; 0x2a
 8000e6c:	f000 f932 	bl	80010d4 <HTS221_ReadReg>
 8000e70:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HTS221_CalculateTemperature+0x184>
    {
    	return ret;
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	e032      	b.n	8000ee2 <HTS221_CalculateTemperature+0x1ea>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8000e7c:	7b7b      	ldrb	r3, [r7, #13]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	7b3b      	ldrb	r3, [r7, #12]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	847b      	strh	r3, [r7, #34]	; 0x22
    *temperature = (((T1_DEGC - T0_DEGC) * temp) + ((T1_OUT * T0_DEGC) - (T0_OUT * T1_DEGC))) / (T1_OUT - T0_OUT); //Linear Interpolation
 8000e8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e92:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eaa:	edd7 6a06 	vldr	s13, [r7, #24]
 8000eae:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000eb6:	ed97 6a07 	vldr	s12, [r7, #28]
 8000eba:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ebe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000ec2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ec6:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000eca:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ece:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ed2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	edc3 7a00 	vstr	s15, [r3]
    return HTS221_Ok;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HTS221_CalculateHumidity>:

static int32_t HTS221_CalculateHumidity(HTS221_Handle_t *Handle, float *humidity)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t Buffer[2] = {0};
 8000efa:	2300      	movs	r3, #0
 8000efc:	813b      	strh	r3, [r7, #8]
	int16_t temp = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	847b      	strh	r3, [r7, #34]	; 0x22
    float H0_OUT = 0, H1_OUT = 0;
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
    float H1_REL = 0,  H0_REL = 0;
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
    float result = 0;
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]

    //Fetch H0
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_T0_OUT, Buffer, 2);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f103 0018 	add.w	r0, r3, #24
 8000f26:	f107 0208 	add.w	r2, r7, #8
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	2136      	movs	r1, #54	; 0x36
 8000f2e:	f000 f8d1 	bl	80010d4 <HTS221_ReadReg>
 8000f32:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HTS221_CalculateHumidity+0x52>
    {
    	return ret;
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	e0c1      	b.n	80010c2 <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8000f3e:	7a7b      	ldrb	r3, [r7, #9]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	7a3b      	ldrb	r3, [r7, #8]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	847b      	strh	r3, [r7, #34]	; 0x22
    H0_OUT = temp * 1.0f;
 8000f50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5c:	edc7 7a07 	vstr	s15, [r7, #28]

    //Fetch H1
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_T0_OUT, Buffer, 2);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f103 0018 	add.w	r0, r3, #24
 8000f66:	f107 0208 	add.w	r2, r7, #8
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	213a      	movs	r1, #58	; 0x3a
 8000f6e:	f000 f8b1 	bl	80010d4 <HTS221_ReadReg>
 8000f72:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HTS221_CalculateHumidity+0x92>
    {
    	return ret;
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	e0a1      	b.n	80010c2 <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8000f7e:	7a7b      	ldrb	r3, [r7, #9]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	7a3b      	ldrb	r3, [r7, #8]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	847b      	strh	r3, [r7, #34]	; 0x22
    H1_OUT = temp * 1.0f;
 8000f90:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9c:	edc7 7a06 	vstr	s15, [r7, #24]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H0_rH_x2, Buffer, 1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f103 0018 	add.w	r0, r3, #24
 8000fa6:	f107 0208 	add.w	r2, r7, #8
 8000faa:	2301      	movs	r3, #1
 8000fac:	2130      	movs	r1, #48	; 0x30
 8000fae:	f000 f891 	bl	80010d4 <HTS221_ReadReg>
 8000fb2:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HTS221_CalculateHumidity+0xd2>
    {
    	return ret;
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	e081      	b.n	80010c2 <HTS221_CalculateHumidity+0x1d6>
    }
    H0_REL = Buffer[0] / 2.0f;
 8000fbe:	7a3b      	ldrb	r3, [r7, #8]
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd0:	edc7 7a04 	vstr	s15, [r7, #16]

    //Fetch H0_Rh
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_H1_rH_x2, Buffer, 1);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f103 0018 	add.w	r0, r3, #24
 8000fda:	f107 0208 	add.w	r2, r7, #8
 8000fde:	2301      	movs	r3, #1
 8000fe0:	2131      	movs	r1, #49	; 0x31
 8000fe2:	f000 f877 	bl	80010d4 <HTS221_ReadReg>
 8000fe6:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HTS221_CalculateHumidity+0x106>
    {
    	return ret;
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	e067      	b.n	80010c2 <HTS221_CalculateHumidity+0x1d6>
    }
    H1_REL = Buffer[0] / 2.0f;
 8000ff2:	7a3b      	ldrb	r3, [r7, #8]
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ffc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001004:	edc7 7a05 	vstr	s15, [r7, #20]

    //Fetch Measurement
    ret = HTS221_ReadReg(&Handle->Context, HTS221_REG_HUMIDITY_OUT_L, Buffer, 2);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f103 0018 	add.w	r0, r3, #24
 800100e:	f107 0208 	add.w	r2, r7, #8
 8001012:	2302      	movs	r3, #2
 8001014:	2128      	movs	r1, #40	; 0x28
 8001016:	f000 f85d 	bl	80010d4 <HTS221_ReadReg>
 800101a:	6278      	str	r0, [r7, #36]	; 0x24
    if(ret != HTS221_Ok)
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HTS221_CalculateHumidity+0x13a>
    {
    	return ret;
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	e04d      	b.n	80010c2 <HTS221_CalculateHumidity+0x1d6>
    }
    temp = (Buffer[1] << 8) + Buffer[0];
 8001026:	7a7b      	ldrb	r3, [r7, #9]
 8001028:	b29b      	uxth	r3, r3
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b29a      	uxth	r2, r3
 800102e:	7a3b      	ldrb	r3, [r7, #8]
 8001030:	b29b      	uxth	r3, r3
 8001032:	4413      	add	r3, r2
 8001034:	b29b      	uxth	r3, r3
 8001036:	847b      	strh	r3, [r7, #34]	; 0x22
    result = (((H1_REL - H0_REL) * temp) + ((H1_OUT * H0_REL) - (H0_OUT * H1_REL))) / (H1_OUT - H0_OUT); //Linear Interpolation
 8001038:	ed97 7a05 	vldr	s14, [r7, #20]
 800103c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001040:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001044:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001054:	edd7 6a06 	vldr	s13, [r7, #24]
 8001058:	edd7 7a04 	vldr	s15, [r7, #16]
 800105c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001060:	ed97 6a07 	vldr	s12, [r7, #28]
 8001064:	edd7 7a05 	vldr	s15, [r7, #20]
 8001068:	ee66 7a27 	vmul.f32	s15, s12, s15
 800106c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001070:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001074:	ed97 7a06 	vldr	s14, [r7, #24]
 8001078:	edd7 7a07 	vldr	s15, [r7, #28]
 800107c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001084:	edc7 7a03 	vstr	s15, [r7, #12]
    if(result > 100.0)
 8001088:	edd7 7a03 	vldr	s15, [r7, #12]
 800108c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80010cc <HTS221_CalculateHumidity+0x1e0>
 8001090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	dd03      	ble.n	80010a2 <HTS221_CalculateHumidity+0x1b6>
    {
    	*humidity = 100.0;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <HTS221_CalculateHumidity+0x1e4>)
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e00e      	b.n	80010c0 <HTS221_CalculateHumidity+0x1d4>
    } else if (result < 0.0)
 80010a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ae:	d504      	bpl.n	80010ba <HTS221_CalculateHumidity+0x1ce>
    {
    	*humidity = 0.0;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e002      	b.n	80010c0 <HTS221_CalculateHumidity+0x1d4>
    } else
    {
    	*humidity = result;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	601a      	str	r2, [r3, #0]
    }

    return HTS221_Ok;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	42c80000 	.word	0x42c80000
 80010d0:	42c80000 	.word	0x42c80000

080010d4 <HTS221_ReadReg>:
#include "stddef.h"

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t HTS221_ReadReg(HTS221_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	461a      	mov	r2, r3
 80010e0:	460b      	mov	r3, r1
 80010e2:	72fb      	strb	r3, [r7, #11]
 80010e4:	4613      	mov	r3, r2
 80010e6:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 80010e8:	7aba      	ldrb	r2, [r7, #10]
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f842 	bl	8001178 <HTS221_ValidateParams>
 80010f4:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HTS221_ReadReg+0x2c>
	{
        return ret;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	e00e      	b.n	800111e <HTS221_ReadReg+0x4a>
	}

    if(Context->Read != NULL)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d009      	beq.n	800111c <HTS221_ReadReg+0x48>
    {
        return Context->Read(Context->Handle, Reg, Buffer, Length);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685c      	ldr	r4, [r3, #4]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	7abb      	ldrb	r3, [r7, #10]
 8001112:	7af9      	ldrb	r1, [r7, #11]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	47a0      	blx	r4
 8001118:	4603      	mov	r3, r0
 800111a:	e000      	b.n	800111e <HTS221_ReadReg+0x4a>
    }

    return HTS221_REG_CONTEXT_ERR;
 800111c:	2308      	movs	r3, #8
}
 800111e:	4618      	mov	r0, r3
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd90      	pop	{r4, r7, pc}

08001126 <HTS221_WriteReg>:

int32_t HTS221_WriteReg(HTS221_Context_t *Context,uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001126:	b590      	push	{r4, r7, lr}
 8001128:	b087      	sub	sp, #28
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	461a      	mov	r2, r3
 8001132:	460b      	mov	r3, r1
 8001134:	72fb      	strb	r3, [r7, #11]
 8001136:	4613      	mov	r3, r2
 8001138:	72bb      	strb	r3, [r7, #10]
	int32_t ret = HTS221_ValidateParams(Reg,Buffer,Length);
 800113a:	7aba      	ldrb	r2, [r7, #10]
 800113c:	7afb      	ldrb	r3, [r7, #11]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f819 	bl	8001178 <HTS221_ValidateParams>
 8001146:	6178      	str	r0, [r7, #20]
	if(ret != HTS221_REG_NO_ERR)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HTS221_WriteReg+0x2c>
	{
        return ret;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	e00e      	b.n	8001170 <HTS221_WriteReg+0x4a>
	}

	if(Context->Write != NULL)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d009      	beq.n	800116e <HTS221_WriteReg+0x48>
	{
	    return Context->Write(Context->Handle, Reg, Buffer, Length);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	689c      	ldr	r4, [r3, #8]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	7abb      	ldrb	r3, [r7, #10]
 8001164:	7af9      	ldrb	r1, [r7, #11]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	47a0      	blx	r4
 800116a:	4603      	mov	r3, r0
 800116c:	e000      	b.n	8001170 <HTS221_WriteReg+0x4a>
	}

	return HTS221_REG_CONTEXT_ERR;
 800116e:	2308      	movs	r3, #8
}
 8001170:	4618      	mov	r0, r3
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}

08001178 <HTS221_ValidateParams>:

static int32_t HTS221_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]

	if(Reg < HTS221_REG_WHO_AM_I || Reg > 0x3F)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b0e      	cmp	r3, #14
 8001190:	d902      	bls.n	8001198 <HTS221_ValidateParams+0x20>
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b3f      	cmp	r3, #63	; 0x3f
 8001196:	d903      	bls.n	80011a0 <HTS221_ValidateParams+0x28>
	{
		 ret |= HTS221_REG_PARAM_ERR;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d103      	bne.n	80011ae <HTS221_ValidateParams+0x36>
	{
		ret |= HTS221_BUFFER_PARAM_ERR;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	60fb      	str	r3, [r7, #12]
	}

	if(Length == 0 || Length > (0x3F - HTS221_REG_WHO_AM_I))
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <HTS221_ValidateParams+0x42>
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	2b30      	cmp	r3, #48	; 0x30
 80011b8:	d903      	bls.n	80011c2 <HTS221_ValidateParams+0x4a>
	{  //0x3F - 0x0F = 0x30 readable registers
        ret |= HTS221_LENGTH_PARAM_ERR;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <ISM330DHCX_Init>:
#define T_DATA_MASK  (4U)
#define ISM330DHCX_BOOT_BIT_MSK (0x80)


int32_t ISM330DHCX_Init(ISM330DHCX_Handle_t *Handle, ISM330DHCX_Init_Struct_t Settings, ISM330DHCX_IO_t *IO)
{
 80011d0:	b084      	sub	sp, #16
 80011d2:	b5b0      	push	{r4, r5, r7, lr}
 80011d4:	b08c      	sub	sp, #48	; 0x30
 80011d6:	af0a      	add	r7, sp, #40	; 0x28
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	f107 001c 	add.w	r0, r7, #28
 80011de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(Handle == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <ISM330DHCX_Init+0x1e>
    {
    	return ISM330DHCX_Error;
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	e067      	b.n	80012be <ISM330DHCX_Init+0xee>
    }


    if(ISM330DHCX_RegisterIOBus(Handle, IO) != ISM330DHCX_Ok)
 80011ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f86f 	bl	80012d4 <ISM330DHCX_RegisterIOBus>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <ISM330DHCX_Init+0x32>
    {
    	return ISM330DHCX_ParamError;
 80011fc:	f06f 0302 	mvn.w	r3, #2
 8001200:	e05d      	b.n	80012be <ISM330DHCX_Init+0xee>
    }

    //Validate if using INT1
    if(Settings.INT1_CTRL != 0 || ((Settings.INT2_CTRL != 0) && (Settings.INT2_on_INT1 == ISM330DHCX_IRQOnBothPins)))
 8001202:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001206:	2b00      	cmp	r3, #0
 8001208:	d107      	bne.n	800121a <ISM330DHCX_Init+0x4a>
 800120a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00a      	beq.n	8001228 <ISM330DHCX_Init+0x58>
 8001212:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001216:	2b20      	cmp	r3, #32
 8001218:	d106      	bne.n	8001228 <ISM330DHCX_Init+0x58>
    {
    	if(IO->ReadInt1Pin == NULL){
 800121a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <ISM330DHCX_Init+0x58>
        	return ISM330DHCX_ParamError; //If INT1 is used in any capacity, ReadInt1Pin is required
 8001222:	f06f 0302 	mvn.w	r3, #2
 8001226:	e04a      	b.n	80012be <ISM330DHCX_Init+0xee>
    	}

    }

    //Validate if using INT2
    if(Settings.INT2_CTRL != 0 && IO->ReadInt2Pin == NULL)
 8001228:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <ISM330DHCX_Init+0x6e>
 8001230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <ISM330DHCX_Init+0x6e>
    {
    	return ISM330DHCX_ParamError; //If INT2 is used in any capacity, ReadInt2Pin is required
 8001238:	f06f 0302 	mvn.w	r3, #2
 800123c:	e03f      	b.n	80012be <ISM330DHCX_Init+0xee>
    }

    Handle->Context.Read = ISM330DHCX_ReadWrapper;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a22      	ldr	r2, [pc, #136]	; (80012cc <ISM330DHCX_Init+0xfc>)
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
    Handle->Context.Write = ISM330DHCX_WriteWrapper;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <ISM330DHCX_Init+0x100>)
 8001248:	621a      	str	r2, [r3, #32]
    Handle->Context.Handle = Handle;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	61da      	str	r2, [r3, #28]
    Handle->AccelResolution = Settings.FS_XL;
 8001250:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    Handle->GyroResolution = Settings.FS_G;
 800125a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    Handle->Int1Mode = Settings.INT1_CTRL;
 8001264:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    Handle->Int2Mode = Settings.INT2_CTRL;
 800126e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    Handle->IntPinMux = Settings.INT2_on_INT1;
 8001278:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    Handle->IntPolarity = Settings.H_LACTIVE;
 8001282:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    //Initialize Bus
    if(Handle->IO.Init != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <ISM330DHCX_Init+0xca>
    {
    	Handle->IO.Init();
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4798      	blx	r3
    }

    return ISM330DHCX_RegisterInit(Handle, Settings);
 800129a:	466d      	mov	r5, sp
 800129c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80012a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f9d5 	bl	8001666 <ISM330DHCX_RegisterInit>
 80012bc:	4603      	mov	r3, r0

}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012c8:	b004      	add	sp, #16
 80012ca:	4770      	bx	lr
 80012cc:	080015ef 	.word	0x080015ef
 80012d0:	0800162b 	.word	0x0800162b

080012d4 <ISM330DHCX_RegisterIOBus>:
    ISM330DHCX_DeInit(Handle);
    return ISM330DHCX_Init(Handle, Settings, IO);
}

int32_t ISM330DHCX_RegisterIOBus(ISM330DHCX_Handle_t *Handle, ISM330DHCX_IO_t *IO)
{
 80012d4:	b4b0      	push	{r4, r5, r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
    //Validate if Read/Write/GetTick have been provided
    if(IO->Read == NULL || IO->Write==NULL || IO->GetTick == NULL)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <ISM330DHCX_RegisterIOBus+0x22>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <ISM330DHCX_RegisterIOBus+0x22>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <ISM330DHCX_RegisterIOBus+0x28>
    {
    	return ISM330DHCX_ParamError; //Write, Read, GetTick are required for basic device functionality
 80012f6:	f06f 0302 	mvn.w	r3, #2
 80012fa:	e00a      	b.n	8001312 <ISM330DHCX_RegisterIOBus+0x3e>
    }

    Handle->IO = *IO;
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	4614      	mov	r4, r2
 8001302:	461d      	mov	r5, r3
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001308:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800130c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return ISM330DHCX_Ok;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bcb0      	pop	{r4, r5, r7}
 800131a:	4770      	bx	lr

0800131c <ISM330DHCX_ReadAccel>:

int32_t ISM330DHCX_ReadAccel(ISM330DHCX_Handle_t *Handle, float *Ax, float *Ay, float *Az)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 800132e:	2300      	movs	r3, #0
 8001330:	82bb      	strh	r3, [r7, #20]
 8001332:	2300      	movs	r3, #0
 8001334:	82fb      	strh	r3, [r7, #22]
 8001336:	2300      	movs	r3, #0
 8001338:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <ISM330DHCX_ReadAccel+0x2a>
    {
    	return ISM330DHCX_ParamError;
 8001340:	f06f 0302 	mvn.w	r3, #2
 8001344:	e045      	b.n	80013d2 <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f103 001c 	add.w	r0, r3, #28
 800134c:	f107 0214 	add.w	r2, r7, #20
 8001350:	2301      	movs	r3, #1
 8001352:	211e      	movs	r1, #30
 8001354:	f000 fbf8 	bl	8001b48 <ISM330DHCX_ReadReg>
 8001358:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <ISM330DHCX_ReadAccel+0x48>
    {
        return ret;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	e036      	b.n	80013d2 <ISM330DHCX_ReadAccel+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & XL_DATA_MASK))
 8001364:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001368:	b29b      	uxth	r3, r3
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <ISM330DHCX_ReadAccel+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 8001372:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001376:	e02c      	b.n	80013d2 <ISM330DHCX_ReadAccel+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_A, (uint8_t*)buffer, 6);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f103 001c 	add.w	r0, r3, #28
 800137e:	f107 0214 	add.w	r2, r7, #20
 8001382:	2306      	movs	r3, #6
 8001384:	2128      	movs	r1, #40	; 0x28
 8001386:	f000 fbdf 	bl	8001b48 <ISM330DHCX_ReadReg>
 800138a:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <ISM330DHCX_ReadAccel+0x7a>
    {
    	return ret;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	e01d      	b.n	80013d2 <ISM330DHCX_ReadAccel+0xb6>
    }
    //Convert the data to Gs
    ConvertXLData(Handle->AccelResolution, &buffer[0], Ax);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800139c:	f107 0114 	add.w	r1, r7, #20
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fb46 	bl	8001a34 <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[1], Ay);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	3302      	adds	r3, #2
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4619      	mov	r1, r3
 80013b8:	f000 fb3c 	bl	8001a34 <ConvertXLData>
    ConvertXLData(Handle->AccelResolution, &buffer[2], Az);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	3304      	adds	r3, #4
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	4619      	mov	r1, r3
 80013cc:	f000 fb32 	bl	8001a34 <ConvertXLData>
    return ISM330DHCX_DataReady;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <ISM330DHCX_ReadGyro>:

int32_t ISM330DHCX_ReadGyro(ISM330DHCX_Handle_t *Handle, float *Wx, float *Wy, float *Wz)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b088      	sub	sp, #32
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	603b      	str	r3, [r7, #0]
	int32_t ret = ISM330DHCX_Ok;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
	int16_t buffer[3] = {0,0,0};
 80013ec:	2300      	movs	r3, #0
 80013ee:	82bb      	strh	r3, [r7, #20]
 80013f0:	2300      	movs	r3, #0
 80013f2:	82fb      	strh	r3, [r7, #22]
 80013f4:	2300      	movs	r3, #0
 80013f6:	833b      	strh	r3, [r7, #24]
    if(Handle == NULL)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <ISM330DHCX_ReadGyro+0x2a>
    {
    	return ISM330DHCX_ParamError;
 80013fe:	f06f 0302 	mvn.w	r3, #2
 8001402:	e045      	b.n	8001490 <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read Status register
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_STATUS_REG, (uint8_t*)buffer, 1);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f103 001c 	add.w	r0, r3, #28
 800140a:	f107 0214 	add.w	r2, r7, #20
 800140e:	2301      	movs	r3, #1
 8001410:	211e      	movs	r1, #30
 8001412:	f000 fb99 	bl	8001b48 <ISM330DHCX_ReadReg>
 8001416:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <ISM330DHCX_ReadGyro+0x48>
    {
        return ret;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	e036      	b.n	8001490 <ISM330DHCX_ReadGyro+0xb6>
    }
    //Check the XL Bit
    if(!(buffer[0] & G_DATA_MASK))
 8001422:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001426:	b29b      	uxth	r3, r3
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <ISM330DHCX_ReadGyro+0x5c>
    {
        return ISM330DHCX_DataNotReady;
 8001430:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8001434:	e02c      	b.n	8001490 <ISM330DHCX_ReadGyro+0xb6>
    }

    //Read the data
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, (uint8_t*)buffer, 6);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f103 001c 	add.w	r0, r3, #28
 800143c:	f107 0214 	add.w	r2, r7, #20
 8001440:	2306      	movs	r3, #6
 8001442:	2122      	movs	r1, #34	; 0x22
 8001444:	f000 fb80 	bl	8001b48 <ISM330DHCX_ReadReg>
 8001448:	61f8      	str	r0, [r7, #28]
    if(ret != ISM330DHCX_Ok)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <ISM330DHCX_ReadGyro+0x7a>
    {
    	return ret;
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	e01d      	b.n	8001490 <ISM330DHCX_ReadGyro+0xb6>
    }
    //Convert Gyro Data to DPS
    ConvertGData(Handle->GyroResolution, &buffer[0], Wx);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800145a:	f107 0114 	add.w	r1, r7, #20
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fb27 	bl	8001ab4 <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[2], Wy);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	3304      	adds	r3, #4
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4619      	mov	r1, r3
 8001476:	f000 fb1d 	bl	8001ab4 <ConvertGData>
    ConvertGData(Handle->GyroResolution, &buffer[4], Wz);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	3308      	adds	r3, #8
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f000 fb13 	bl	8001ab4 <ConvertGData>
    return ISM330DHCX_DataReady;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <ISM330DHCX_Reboot>:
    ConvertTData(buffer, Data);
    return ISM330DHCX_DataReady;
}

int32_t ISM330DHCX_Reboot(ISM330DHCX_Handle_t *Handle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    //Put Gyro / Accel In power down mode
	uint32_t ret = ISM330DHCX_Ok;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f103 001c 	add.w	r0, r3, #28
 80014ae:	f107 020b 	add.w	r2, r7, #11
 80014b2:	2301      	movs	r3, #1
 80014b4:	2110      	movs	r1, #16
 80014b6:	f000 fb70 	bl	8001b9a <ISM330DHCX_WriteReg>
 80014ba:	4603      	mov	r3, r0
 80014bc:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <ISM330DHCX_Reboot+0x30>
    {
    	return ret;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	e038      	b.n	800153a <ISM330DHCX_Reboot+0xa2>
    }

    buffer = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f103 001c 	add.w	r0, r3, #28
 80014d2:	f107 020b 	add.w	r2, r7, #11
 80014d6:	2301      	movs	r3, #1
 80014d8:	2111      	movs	r1, #17
 80014da:	f000 fb5e 	bl	8001b9a <ISM330DHCX_WriteReg>
 80014de:	4603      	mov	r3, r0
 80014e0:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <ISM330DHCX_Reboot+0x54>
    {
    	return ret;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	e026      	b.n	800153a <ISM330DHCX_Reboot+0xa2>
    }

	//Set BOOT bit in ctrl 3
    buffer = ISM330DHCX_BOOT_BIT_MSK;
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f103 001c 	add.w	r0, r3, #28
 80014f6:	f107 020b 	add.w	r2, r7, #11
 80014fa:	2301      	movs	r3, #1
 80014fc:	2112      	movs	r1, #18
 80014fe:	f000 fb4c 	bl	8001b9a <ISM330DHCX_WriteReg>
 8001502:	4603      	mov	r3, r0
 8001504:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d011      	beq.n	8001530 <ISM330DHCX_Reboot+0x98>
    {
    	return ret;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	e014      	b.n	800153a <ISM330DHCX_Reboot+0xa2>
    }

	//Wait for boot bit to become 0
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f103 001c 	add.w	r0, r3, #28
 8001516:	f107 020b 	add.w	r2, r7, #11
 800151a:	2301      	movs	r3, #1
 800151c:	2112      	movs	r1, #18
 800151e:	f000 fb13 	bl	8001b48 <ISM330DHCX_ReadReg>
 8001522:	4603      	mov	r3, r0
 8001524:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <ISM330DHCX_Reboot+0x98>
        {
        	return ret;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	e004      	b.n	800153a <ISM330DHCX_Reboot+0xa2>
    while(buffer & ISM330DHCX_BOOT_BIT_MSK)
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	b25b      	sxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	dbeb      	blt.n	8001510 <ISM330DHCX_Reboot+0x78>
        }
    }
    return ISM330DHCX_Ok;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <ISM330DHCX_Reset>:

int32_t ISM330DHCX_Reset(ISM330DHCX_Handle_t *Handle)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b084      	sub	sp, #16
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
	//Put Gyro / Accel in power down mode
	uint32_t ret = ISM330DHCX_Ok;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
    uint8_t buffer = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, &buffer, 1);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f103 001c 	add.w	r0, r3, #28
 8001558:	f107 020b 	add.w	r2, r7, #11
 800155c:	2301      	movs	r3, #1
 800155e:	2110      	movs	r1, #16
 8001560:	f000 fb1b 	bl	8001b9a <ISM330DHCX_WriteReg>
 8001564:	4603      	mov	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <ISM330DHCX_Reset+0x30>
    {
    	return ret;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	e039      	b.n	80015e6 <ISM330DHCX_Reset+0xa4>
    }

    buffer = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, &buffer, 1);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f103 001c 	add.w	r0, r3, #28
 800157c:	f107 020b 	add.w	r2, r7, #11
 8001580:	2301      	movs	r3, #1
 8001582:	2111      	movs	r1, #17
 8001584:	f000 fb09 	bl	8001b9a <ISM330DHCX_WriteReg>
 8001588:	4603      	mov	r3, r0
 800158a:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <ISM330DHCX_Reset+0x54>
    {
    	return ret;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	e027      	b.n	80015e6 <ISM330DHCX_Reset+0xa4>
    }
	//Set SW Reset bit in CTRL3
    buffer = ISM330DHCX_ResetSignal;
 8001596:	2301      	movs	r3, #1
 8001598:	72fb      	strb	r3, [r7, #11]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f103 001c 	add.w	r0, r3, #28
 80015a0:	f107 020b 	add.w	r2, r7, #11
 80015a4:	2301      	movs	r3, #1
 80015a6:	2112      	movs	r1, #18
 80015a8:	f000 faf7 	bl	8001b9a <ISM330DHCX_WriteReg>
 80015ac:	4603      	mov	r3, r0
 80015ae:	60fb      	str	r3, [r7, #12]
    if(ret != ISM330DHCX_Ok)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d011      	beq.n	80015da <ISM330DHCX_Reset+0x98>
    {
    	return ret;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	e015      	b.n	80015e6 <ISM330DHCX_Reset+0xa4>
    }
	//Poll SW Reset bit
    while(buffer & ISM330DHCX_ResetSignal)
    {
        ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, &buffer, 1);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f103 001c 	add.w	r0, r3, #28
 80015c0:	f107 020b 	add.w	r2, r7, #11
 80015c4:	2301      	movs	r3, #1
 80015c6:	2112      	movs	r1, #18
 80015c8:	f000 fabe 	bl	8001b48 <ISM330DHCX_ReadReg>
 80015cc:	4603      	mov	r3, r0
 80015ce:	60fb      	str	r3, [r7, #12]
        if(ret != ISM330DHCX_Ok)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <ISM330DHCX_Reset+0x98>
        {
        	return ret;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	e005      	b.n	80015e6 <ISM330DHCX_Reset+0xa4>
    while(buffer & ISM330DHCX_ResetSignal)
 80015da:	7afb      	ldrb	r3, [r7, #11]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ea      	bne.n	80015ba <ISM330DHCX_Reset+0x78>
        }
    }
    return ISM330DHCX_Ok;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <ISM330DHCX_ReadWrapper>:

static int32_t ISM330DHCX_ReadWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	461a      	mov	r2, r3
 80015fa:	460b      	mov	r3, r1
 80015fc:	72fb      	strb	r3, [r7, #11]
 80015fe:	4613      	mov	r3, r2
 8001600:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Read != NULL)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <ISM330DHCX_ReadWrapper+0x30>
    {
        return DevicePtr->IO.Read(Reg,Buffer,Length);
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	7aba      	ldrb	r2, [r7, #10]
 8001614:	7af8      	ldrb	r0, [r7, #11]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4798      	blx	r3
 800161a:	4603      	mov	r3, r0
 800161c:	e001      	b.n	8001622 <ISM330DHCX_ReadWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 800161e:	f06f 0301 	mvn.w	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <ISM330DHCX_WriteWrapper>:

static int32_t ISM330DHCX_WriteWrapper(void *Handle, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	461a      	mov	r2, r3
 8001636:	460b      	mov	r3, r1
 8001638:	72fb      	strb	r3, [r7, #11]
 800163a:	4613      	mov	r3, r2
 800163c:	72bb      	strb	r3, [r7, #10]
    ISM330DHCX_Handle_t *DevicePtr = (ISM330DHCX_Handle_t*)Handle;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	617b      	str	r3, [r7, #20]
    if(DevicePtr->IO.Write != NULL)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <ISM330DHCX_WriteWrapper+0x30>
    {
        return DevicePtr->IO.Write(Reg,Buffer,Length);
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	7aba      	ldrb	r2, [r7, #10]
 8001650:	7af8      	ldrb	r0, [r7, #11]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4798      	blx	r3
 8001656:	4603      	mov	r3, r0
 8001658:	e001      	b.n	800165e <ISM330DHCX_WriteWrapper+0x34>
    }
    return ISM330DHCX_ReadRegErr;
 800165a:	f06f 0301 	mvn.w	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <ISM330DHCX_RegisterInit>:

static int32_t ISM330DHCX_RegisterInit(ISM330DHCX_Handle_t *Handle,ISM330DHCX_Init_Struct_t Settings)
{
 8001666:	b084      	sub	sp, #16
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001674:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t ret = ISM330DHCX_Ok;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
    uint8_t buffer[12] = {0};
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
    ISM330DHCX_Reboot(Handle);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ff04 	bl	8001498 <ISM330DHCX_Reboot>
    ISM330DHCX_Reset(Handle);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff56 	bl	8001542 <ISM330DHCX_Reset>

    buffer[0] = Settings.SDO_PU_EN | 0x3F;
 8001696:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800169a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_PIN_CTRL, buffer, 1);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f103 001c 	add.w	r0, r3, #28
 80016a8:	f107 0208 	add.w	r2, r7, #8
 80016ac:	2301      	movs	r3, #1
 80016ae:	2102      	movs	r1, #2
 80016b0:	f000 fa73 	bl	8001b9a <ISM330DHCX_WriteReg>
 80016b4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <ISM330DHCX_RegisterInit+0x5a>
    {
    	return ret;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	e1b1      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.WTM & 0x00FF; //WTM Threshold is a 9 bit number
 80016c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL1, buffer, 1);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f103 001c 	add.w	r0, r3, #28
 80016cc:	f107 0208 	add.w	r2, r7, #8
 80016d0:	2301      	movs	r3, #1
 80016d2:	2107      	movs	r1, #7
 80016d4:	f000 fa61 	bl	8001b9a <ISM330DHCX_WriteReg>
 80016d8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <ISM330DHCX_RegisterInit+0x7e>
    {
    	return ret;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	e19f      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    if(Settings.WTM > 0x00FF)
 80016e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80016e6:	2bff      	cmp	r3, #255	; 0xff
 80016e8:	d906      	bls.n	80016f8 <ISM330DHCX_RegisterInit+0x92>
    {
    	buffer[0] = Settings.STOP_ON_WTM | 0x01;
 80016ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	723b      	strb	r3, [r7, #8]
 80016f6:	e002      	b.n	80016fe <ISM330DHCX_RegisterInit+0x98>
    } else
    {
    	buffer[0] = Settings.STOP_ON_WTM;
 80016f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80016fc:	723b      	strb	r3, [r7, #8]
    }
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL2, buffer, 1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f103 001c 	add.w	r0, r3, #28
 8001704:	f107 0208 	add.w	r2, r7, #8
 8001708:	2301      	movs	r3, #1
 800170a:	2108      	movs	r1, #8
 800170c:	f000 fa45 	bl	8001b9a <ISM330DHCX_WriteReg>
 8001710:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <ISM330DHCX_RegisterInit+0xb6>
    {
    	return ret;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	e183      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.BDR_GY | Settings.BDR_XL;
 800171c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001720:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001724:	4313      	orrs	r3, r2
 8001726:	b2db      	uxtb	r3, r3
 8001728:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL3, buffer, 1);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f103 001c 	add.w	r0, r3, #28
 8001730:	f107 0208 	add.w	r2, r7, #8
 8001734:	2301      	movs	r3, #1
 8001736:	2109      	movs	r1, #9
 8001738:	f000 fa2f 	bl	8001b9a <ISM330DHCX_WriteReg>
 800173c:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <ISM330DHCX_RegisterInit+0xe2>
    {
    	return ret;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	e16d      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.DEC_TS_BATCH | Settings.ODR_T_BATCH | Settings.FIFO_MODE;
 8001748:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800174c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001750:	4313      	orrs	r3, r2
 8001752:	b2da      	uxtb	r2, r3
 8001754:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001758:	4313      	orrs	r3, r2
 800175a:	b2db      	uxtb	r3, r3
 800175c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_FIFO_CTRL4, buffer, 1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f103 001c 	add.w	r0, r3, #28
 8001764:	f107 0208 	add.w	r2, r7, #8
 8001768:	2301      	movs	r3, #1
 800176a:	210a      	movs	r1, #10
 800176c:	f000 fa15 	bl	8001b9a <ISM330DHCX_WriteReg>
 8001770:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <ISM330DHCX_RegisterInit+0x116>
    {
    	return ret;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	e153      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.CNT_BDR_TH & 0x00FF;
 800177c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800177e:	b2db      	uxtb	r3, r3
 8001780:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG2, buffer, 1);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f103 001c 	add.w	r0, r3, #28
 8001788:	f107 0208 	add.w	r2, r7, #8
 800178c:	2301      	movs	r3, #1
 800178e:	210c      	movs	r1, #12
 8001790:	f000 fa03 	bl	8001b9a <ISM330DHCX_WriteReg>
 8001794:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <ISM330DHCX_RegisterInit+0x13a>
    {
    	return ret;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	e141      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = ((Settings.CNT_BDR_TH & 0x0700) >> 8) | Settings.dataready_pulsed | Settings.TRIG_COUNTER_BDR;
 80017a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80017a2:	121b      	asrs	r3, r3, #8
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	b25a      	sxtb	r2, r3
 80017ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_COUNTER_BDR_REG1, buffer, 1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f103 001c 	add.w	r0, r3, #28
 80017ca:	f107 0208 	add.w	r2, r7, #8
 80017ce:	2301      	movs	r3, #1
 80017d0:	210b      	movs	r1, #11
 80017d2:	f000 f9e2 	bl	8001b9a <ISM330DHCX_WriteReg>
 80017d6:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <ISM330DHCX_RegisterInit+0x17c>
    {
    	return ret;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	e120      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.INT1_CTRL;
 80017e2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80017e6:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT1_CTRL, buffer, 1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f103 001c 	add.w	r0, r3, #28
 80017ee:	f107 0208 	add.w	r2, r7, #8
 80017f2:	2301      	movs	r3, #1
 80017f4:	210d      	movs	r1, #13
 80017f6:	f000 f9d0 	bl	8001b9a <ISM330DHCX_WriteReg>
 80017fa:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <ISM330DHCX_RegisterInit+0x1a0>
    {
    	return ret;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	e10e      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.INT2_CTRL;
 8001806:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800180a:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_INT2_CTRL, buffer, 1);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f103 001c 	add.w	r0, r3, #28
 8001812:	f107 0208 	add.w	r2, r7, #8
 8001816:	2301      	movs	r3, #1
 8001818:	210e      	movs	r1, #14
 800181a:	f000 f9be 	bl	8001b9a <ISM330DHCX_WriteReg>
 800181e:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <ISM330DHCX_RegisterInit+0x1c4>
    {
    	return ret;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	e0fc      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = 0x40 | Settings.PP_OD | Settings.H_LACTIVE | Settings.SIM | Settings.IF_INC;
 800182a:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800182e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001832:	4313      	orrs	r3, r2
 8001834:	b2da      	uxtb	r2, r3
 8001836:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800183a:	4313      	orrs	r3, r2
 800183c:	b2da      	uxtb	r2, r3
 800183e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001842:	4313      	orrs	r3, r2
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800184a:	b2db      	uxtb	r3, r3
 800184c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL3_C, buffer, 1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f103 001c 	add.w	r0, r3, #28
 8001854:	f107 0208 	add.w	r2, r7, #8
 8001858:	2301      	movs	r3, #1
 800185a:	2112      	movs	r1, #18
 800185c:	f000 f99d 	bl	8001b9a <ISM330DHCX_WriteReg>
 8001860:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <ISM330DHCX_RegisterInit+0x206>
    {
    	return ret;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	e0db      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.TriggerMode | Settings.XL_HM_MODE | Settings.USR_OFF_W | Settings.FTYPE;
 800186c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001870:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001874:	4313      	orrs	r3, r2
 8001876:	b2da      	uxtb	r2, r3
 8001878:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800187c:	4313      	orrs	r3, r2
 800187e:	b2da      	uxtb	r2, r3
 8001880:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001884:	4313      	orrs	r3, r2
 8001886:	b2db      	uxtb	r3, r3
 8001888:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL6_C, buffer, 1);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f103 001c 	add.w	r0, r3, #28
 8001890:	f107 0208 	add.w	r2, r7, #8
 8001894:	2301      	movs	r3, #1
 8001896:	2115      	movs	r1, #21
 8001898:	f000 f97f 	bl	8001b9a <ISM330DHCX_WriteReg>
 800189c:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <ISM330DHCX_RegisterInit+0x242>
    {
    	return ret;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	e0bd      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.G_HM_MODE | Settings.HP_EN_G | Settings.HPM_G | Settings.USR_OFF_ON_OUT;
 80018a8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80018ac:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80018b0:	4313      	orrs	r3, r2
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL7_G, buffer, 1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f103 001c 	add.w	r0, r3, #28
 80018cc:	f107 0208 	add.w	r2, r7, #8
 80018d0:	2301      	movs	r3, #1
 80018d2:	2116      	movs	r1, #22
 80018d4:	f000 f961 	bl	8001b9a <ISM330DHCX_WriteReg>
 80018d8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <ISM330DHCX_RegisterInit+0x27e>
    {
    	return ret;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	e09f      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.HPCF_XL | Settings.HP_REF_MODE_XL | Settings.FASTSETTL_MODE_XL | Settings.HP_SLOPE_XL_EN;
 80018e4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80018e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL8_XL, buffer, 1);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f103 001c 	add.w	r0, r3, #28
 8001908:	f107 0208 	add.w	r2, r7, #8
 800190c:	2301      	movs	r3, #1
 800190e:	2117      	movs	r1, #23
 8001910:	f000 f943 	bl	8001b9a <ISM330DHCX_WriteReg>
 8001914:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <ISM330DHCX_RegisterInit+0x2ba>
    {
    	return ret;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	e081      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.DEN_X | Settings.DEN_Y | Settings.DEN_Z | Settings.DEN_XL_G | Settings.DEN_XL_EN | Settings.DEN_LH;
 8001920:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001924:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001928:	4313      	orrs	r3, r2
 800192a:	b2da      	uxtb	r2, r3
 800192c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001930:	4313      	orrs	r3, r2
 8001932:	b2da      	uxtb	r2, r3
 8001934:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001938:	4313      	orrs	r3, r2
 800193a:	b2da      	uxtb	r2, r3
 800193c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001940:	4313      	orrs	r3, r2
 8001942:	b2da      	uxtb	r2, r3
 8001944:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001948:	4313      	orrs	r3, r2
 800194a:	b2db      	uxtb	r3, r3
 800194c:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL9_XL, buffer, 1);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f103 001c 	add.w	r0, r3, #28
 8001954:	f107 0208 	add.w	r2, r7, #8
 8001958:	2301      	movs	r3, #1
 800195a:	2118      	movs	r1, #24
 800195c:	f000 f91d 	bl	8001b9a <ISM330DHCX_WriteReg>
 8001960:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <ISM330DHCX_RegisterInit+0x306>
    {
    	return ret;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	e05b      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.TIMESTAMP_EN;
 800196c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001970:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL10_C, buffer, 1);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f103 001c 	add.w	r0, r3, #28
 8001978:	f107 0208 	add.w	r2, r7, #8
 800197c:	2301      	movs	r3, #1
 800197e:	2119      	movs	r1, #25
 8001980:	f000 f90b 	bl	8001b9a <ISM330DHCX_WriteReg>
 8001984:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <ISM330DHCX_RegisterInit+0x32a>
    {
    	return ret;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	e049      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.ODR_XL | Settings.FS_XL | Settings.LPF2_XL_EN;
 8001990:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001994:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001998:	4313      	orrs	r3, r2
 800199a:	b2da      	uxtb	r2, r3
 800199c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL1_XL, buffer, 1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f103 001c 	add.w	r0, r3, #28
 80019ac:	f107 0208 	add.w	r2, r7, #8
 80019b0:	2301      	movs	r3, #1
 80019b2:	2110      	movs	r1, #16
 80019b4:	f000 f8f1 	bl	8001b9a <ISM330DHCX_WriteReg>
 80019b8:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <ISM330DHCX_RegisterInit+0x35e>
    {
    	return ret;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	e02f      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }


    buffer[0] = Settings.ODR_G | Settings.FS_G;
 80019c4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80019c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019cc:	4313      	orrs	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	723b      	strb	r3, [r7, #8]
    ret = ISM330DHCX_WriteReg(&Handle->Context, ISM330DHCX_REG_CTRL2_G, buffer, 1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f103 001c 	add.w	r0, r3, #28
 80019d8:	f107 0208 	add.w	r2, r7, #8
 80019dc:	2301      	movs	r3, #1
 80019de:	2111      	movs	r1, #17
 80019e0:	f000 f8db 	bl	8001b9a <ISM330DHCX_WriteReg>
 80019e4:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <ISM330DHCX_RegisterInit+0x38a>
    {
    	return ret;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	e019      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }

    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 1);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f103 001c 	add.w	r0, r3, #28
 80019f6:	f107 0208 	add.w	r2, r7, #8
 80019fa:	2301      	movs	r3, #1
 80019fc:	2122      	movs	r1, #34	; 0x22
 80019fe:	f000 f8a3 	bl	8001b48 <ISM330DHCX_ReadReg>
 8001a02:	6178      	str	r0, [r7, #20]
    //Discard Data that was collected during configuration
    ret = ISM330DHCX_ReadReg(&Handle->Context, ISM330DHCX_REG_OUTX_L_G, buffer, 12);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f103 001c 	add.w	r0, r3, #28
 8001a0a:	f107 0208 	add.w	r2, r7, #8
 8001a0e:	230c      	movs	r3, #12
 8001a10:	2122      	movs	r1, #34	; 0x22
 8001a12:	f000 f899 	bl	8001b48 <ISM330DHCX_ReadReg>
 8001a16:	6178      	str	r0, [r7, #20]
    if(ret != ISM330DHCX_Ok)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <ISM330DHCX_RegisterInit+0x3bc>
    {
    	return ret;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	e000      	b.n	8001a24 <ISM330DHCX_RegisterInit+0x3be>
    }

    return ISM330DHCX_Ok;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a2e:	b004      	add	sp, #16
 8001a30:	4770      	bx	lr
	...

08001a34 <ConvertXLData>:

static void ConvertXLData(ISM330DHCX_AccelFullscale_t AccelResolution, int16_t *buffer, float *data)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	73fb      	strb	r3, [r7, #15]
      float ConversionFactor = 0;
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
      if(AccelResolution == ISM330DHCX_XL_2g)
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <ConvertXLData+0x20>
      {
    	  ConversionFactor = 0.061;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <ConvertXLData+0x6c>)
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e00d      	b.n	8001a70 <ConvertXLData+0x3c>
      }else if(AccelResolution == ISM330DHCX_XL_16g)
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d102      	bne.n	8001a60 <ConvertXLData+0x2c>
	  {
    	  ConversionFactor = 0.488;
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <ConvertXLData+0x70>)
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e007      	b.n	8001a70 <ConvertXLData+0x3c>
	  }else if(AccelResolution == ISM330DHCX_XL_8g)
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d102      	bne.n	8001a6c <ConvertXLData+0x38>
	  {
		  ConversionFactor = 0.244;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <ConvertXLData+0x74>)
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e001      	b.n	8001a70 <ConvertXLData+0x3c>
	  }else //4g
	  {
		  ConversionFactor = 0.122;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <ConvertXLData+0x78>)
 8001a6e:	617b      	str	r3, [r7, #20]
	  }
      *data = (ConversionFactor * (*buffer)) / 1000.0; //Div by 1000 to convert g, not mg
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a86:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001ab0 <ConvertXLData+0x7c>
 8001a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	edc3 7a00 	vstr	s15, [r3]
}
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	3d79db23 	.word	0x3d79db23
 8001aa4:	3ef9db23 	.word	0x3ef9db23
 8001aa8:	3e79db23 	.word	0x3e79db23
 8001aac:	3df9db23 	.word	0x3df9db23
 8001ab0:	447a0000 	.word	0x447a0000

08001ab4 <ConvertGData>:

static void ConvertGData(ISM330DHCX_GyroFullScale_t GyroResolution, int16_t *buffer, float *data)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	73fb      	strb	r3, [r7, #15]

      float ConversionFactor = 0;
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
      if(GyroResolution == ISM330DHCX_G_125DPS)
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d102      	bne.n	8001ad4 <ConvertGData+0x20>
      {
    	  ConversionFactor = 0.004375;
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <ConvertGData+0x7c>)
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e019      	b.n	8001b08 <ConvertGData+0x54>
      }else if(GyroResolution == ISM330DHCX_G_250DPS)
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <ConvertGData+0x2c>
	  {
    	  ConversionFactor = 0.00875;
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <ConvertGData+0x80>)
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e013      	b.n	8001b08 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_500DPS)
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d102      	bne.n	8001aec <ConvertGData+0x38>
	  {
		  ConversionFactor = 0.0175;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <ConvertGData+0x84>)
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e00d      	b.n	8001b08 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_1000DPS)
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d102      	bne.n	8001af8 <ConvertGData+0x44>
	  {
		  ConversionFactor = 0.035;
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <ConvertGData+0x88>)
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e007      	b.n	8001b08 <ConvertGData+0x54>
	  }else if(GyroResolution == ISM330DHCX_G_2000DPS)
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d102      	bne.n	8001b04 <ConvertGData+0x50>
	  {
		  ConversionFactor = 0.070;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <ConvertGData+0x8c>)
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e001      	b.n	8001b08 <ConvertGData+0x54>
	  }else //4000DPS
	  {
		  ConversionFactor = 0.140;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <ConvertGData+0x90>)
 8001b06:	617b      	str	r3, [r7, #20]
	  }
      *data = ConversionFactor * (*buffer);
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0e:	ee07 3a90 	vmov	s15, r3
 8001b12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b16:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	edc3 7a00 	vstr	s15, [r3]
}
 8001b24:	bf00      	nop
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	3b8f5c29 	.word	0x3b8f5c29
 8001b34:	3c0f5c29 	.word	0x3c0f5c29
 8001b38:	3c8f5c29 	.word	0x3c8f5c29
 8001b3c:	3d0f5c29 	.word	0x3d0f5c29
 8001b40:	3d8f5c29 	.word	0x3d8f5c29
 8001b44:	3e0f5c29 	.word	0x3e0f5c29

08001b48 <ISM330DHCX_ReadReg>:
#include <stddef.h>

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length);

int32_t ISM330DHCX_ReadReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	461a      	mov	r2, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	72fb      	strb	r3, [r7, #11]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	72bb      	strb	r3, [r7, #10]
	if(Context->Read == NULL)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <ISM330DHCX_ReadReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 8001b64:	2308      	movs	r3, #8
 8001b66:	e014      	b.n	8001b92 <ISM330DHCX_ReadReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 8001b68:	7aba      	ldrb	r2, [r7, #10]
 8001b6a:	7afb      	ldrb	r3, [r7, #11]
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f83c 	bl	8001bec <ISM330DHCX_ValidateParams>
 8001b74:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <ISM330DHCX_ReadReg+0x38>
	{
        return ret;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	e008      	b.n	8001b92 <ISM330DHCX_ReadReg+0x4a>
	}

	return Context->Read(Context->Handle, Reg, Buffer, Length);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	689c      	ldr	r4, [r3, #8]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	7abb      	ldrb	r3, [r7, #10]
 8001b8a:	7af9      	ldrb	r1, [r7, #11]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	47a0      	blx	r4
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}

08001b9a <ISM330DHCX_WriteReg>:

int32_t ISM330DHCX_WriteReg(ISM330DHCX_Context_t *Context, uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001b9a:	b590      	push	{r4, r7, lr}
 8001b9c:	b087      	sub	sp, #28
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	72fb      	strb	r3, [r7, #11]
 8001baa:	4613      	mov	r3, r2
 8001bac:	72bb      	strb	r3, [r7, #10]
	if(Context->Write == NULL)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <ISM330DHCX_WriteReg+0x20>
	{
		return ISM330DHCX_REG_CONTEXT_ERR;
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	e014      	b.n	8001be4 <ISM330DHCX_WriteReg+0x4a>
	}

	int32_t ret = ISM330DHCX_ValidateParams(Reg,Buffer,Length);
 8001bba:	7aba      	ldrb	r2, [r7, #10]
 8001bbc:	7afb      	ldrb	r3, [r7, #11]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f813 	bl	8001bec <ISM330DHCX_ValidateParams>
 8001bc6:	6178      	str	r0, [r7, #20]
	if(ret != ISM330DHCX_REG_NO_ERR)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <ISM330DHCX_WriteReg+0x38>
	{
        return ret;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	e008      	b.n	8001be4 <ISM330DHCX_WriteReg+0x4a>
	}

	return Context->Write(Context->Handle, Reg, Buffer, Length);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	685c      	ldr	r4, [r3, #4]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	7abb      	ldrb	r3, [r7, #10]
 8001bdc:	7af9      	ldrb	r1, [r7, #11]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	47a0      	blx	r4
 8001be2:	4603      	mov	r3, r0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}

08001bec <ISM330DHCX_ValidateParams>:

static int32_t ISM330DHCX_ValidateParams(uint8_t Reg, uint8_t *Buffer, uint8_t Length)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	71bb      	strb	r3, [r7, #6]
	int32_t ret = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
	if(Reg < ISM330DHCX_REG_FUNC_CFG_ACCESS || Reg > ISM330DHCX_REG_FIFO_OUT_Z_H)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <ISM330DHCX_ValidateParams+0x20>
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b7e      	cmp	r3, #126	; 0x7e
 8001c0a:	d903      	bls.n	8001c14 <ISM330DHCX_ValidateParams+0x28>
	{
		ret |= ISM330DHCX_REG_PARAM_ERR;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
	}

	if(Buffer == NULL)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <ISM330DHCX_ValidateParams+0x36>
	{
        ret |= ISM330DHCX_BUFFER_PARAM_ERR;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	60fb      	str	r3, [r7, #12]
	}

	if( Length == 0 || Length > (ISM330DHCX_REG_FIFO_OUT_Z_H - ISM330DHCX_REG_FUNC_CFG_ACCESS))
 8001c22:	79bb      	ldrb	r3, [r7, #6]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <ISM330DHCX_ValidateParams+0x42>
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	2b7d      	cmp	r3, #125	; 0x7d
 8001c2c:	d903      	bls.n	8001c36 <ISM330DHCX_ValidateParams+0x4a>
	{
		ret |= ISM330DHCX_LENGTH_PARAM_ERR;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <OV5640_LinkBus>:
#define  OV5640_ID                                 0x5640U
static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);
static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length);

void OV5640_LinkBus(OV5640_Handle_t *OV5640_Handle, OV5640_IO_t *CameraIO)
{
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
	OV5640_Handle->IO               = *CameraIO;
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4614      	mov	r4, r2
 8001c54:	461d      	mov	r5, r3
 8001c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c5e:	e884 0003 	stmia.w	r4, {r0, r1}

	OV5640_Handle->Context.Read  = OV5640_ReadWrapper;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <OV5640_LinkBus+0x40>)
 8001c66:	61da      	str	r2, [r3, #28]
	OV5640_Handle->Context.Write = OV5640_WriteWrapper;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <OV5640_LinkBus+0x44>)
 8001c6c:	619a      	str	r2, [r3, #24]
	OV5640_Handle->Context.Handle   = OV5640_Handle;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	621a      	str	r2, [r3, #32]

	OV5640_Handle->IO.Init();
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4798      	blx	r3
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bdb0      	pop	{r4, r5, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	08001dc9 	.word	0x08001dc9
 8001c88:	08001dfb 	.word	0x08001dfb

08001c8c <OV5640_Init>:

int32_t OV5640_Init(OV5640_Handle_t *OV5640, uint32_t Resolution, uint32_t PixelFormat)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d80e      	bhi.n	8001cc0 <OV5640_Init+0x34>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00f      	beq.n	8001cc8 <OV5640_Init+0x3c>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d00c      	beq.n	8001cc8 <OV5640_Init+0x3c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d009      	beq.n	8001cc8 <OV5640_Init+0x3c>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b07      	cmp	r3, #7
 8001cb8:	d006      	beq.n	8001cc8 <OV5640_Init+0x3c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d003      	beq.n	8001cc8 <OV5640_Init+0x3c>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	e04a      	b.n	8001d5e <OV5640_Init+0xd2>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	e01f      	b.n	8001d0e <OV5640_Init+0x82>
      {
        if (ret != OV5640_ERROR)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d018      	beq.n	8001d08 <OV5640_Init+0x7c>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001cd6:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <OV5640_Init+0xdc>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	885b      	ldrh	r3, [r3, #2]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	75fb      	strb	r3, [r7, #23]

          if (OV5640_WriteReg(&OV5640->Context, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f103 0018 	add.w	r0, r3, #24
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <OV5640_Init+0xdc>)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001cf2:	f107 0217 	add.w	r2, r7, #23
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f000 f84f 	bl	8001d9a <OV5640_WriteReg>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <OV5640_Init+0x7c>
          {
            ret = OV5640_ERROR;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	2bfd      	cmp	r3, #253	; 0xfd
 8001d12:	d9dc      	bls.n	8001cce <OV5640_Init+0x42>
          }
        }
      }

      if (ret == OV5640_OK)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d121      	bne.n	8001d5e <OV5640_Init+0xd2>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(OV5640, Resolution) != OV5640_OK)
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 f89d 	bl	8001e5c <OV5640_SetResolution>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <OV5640_Init+0xa4>
        {
          ret = OV5640_ERROR;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	e016      	b.n	8001d5e <OV5640_Init+0xd2>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(OV5640, PixelFormat) != OV5640_OK)
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f988 	bl	8002048 <OV5640_SetPixelFormat>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <OV5640_Init+0xba>
        {
          ret = OV5640_ERROR;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	e00b      	b.n	8001d5e <OV5640_Init+0xd2>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(OV5640, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001d46:	2300      	movs	r3, #0
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fb0f 	bl	8002370 <OV5640_SetPolarities>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <OV5640_Init+0xd2>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
      }
    }


  return ret;
 8001d5e:	69bb      	ldr	r3, [r7, #24]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	0800ce64 	.word	0x0800ce64

08001d6c <OV5640_ReadReg>:

int32_t OV5640_ReadReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	461a      	mov	r2, r3
 8001d78:	460b      	mov	r3, r1
 8001d7a:	817b      	strh	r3, [r7, #10]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	813b      	strh	r3, [r7, #8]
  return Context->Read(Context->Handle, reg, pdata, length);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685c      	ldr	r4, [r3, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6898      	ldr	r0, [r3, #8]
 8001d88:	893b      	ldrh	r3, [r7, #8]
 8001d8a:	8979      	ldrh	r1, [r7, #10]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	47a0      	blx	r4
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd90      	pop	{r4, r7, pc}

08001d9a <OV5640_WriteReg>:


int32_t OV5640_WriteReg(OV5650_Context_t *Context, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8001d9a:	b590      	push	{r4, r7, lr}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	461a      	mov	r2, r3
 8001da6:	460b      	mov	r3, r1
 8001da8:	817b      	strh	r3, [r7, #10]
 8001daa:	4613      	mov	r3, r2
 8001dac:	813b      	strh	r3, [r7, #8]
  return Context->Write(Context->Handle, reg, pdata, length);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681c      	ldr	r4, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6898      	ldr	r0, [r3, #8]
 8001db6:	893b      	ldrh	r3, [r7, #8]
 8001db8:	8979      	ldrh	r1, [r7, #10]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	47a0      	blx	r4
 8001dbe:	4603      	mov	r3, r0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd90      	pop	{r4, r7, pc}

08001dc8 <OV5640_ReadWrapper>:

static int32_t OV5640_ReadWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	817b      	strh	r3, [r7, #10]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	617b      	str	r3, [r7, #20]
    return OV5640->IO.Read(OV5640->IO.Address,Reg,Data,Length);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	691c      	ldr	r4, [r3, #16]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	8818      	ldrh	r0, [r3, #0]
 8001de8:	893b      	ldrh	r3, [r7, #8]
 8001dea:	8979      	ldrh	r1, [r7, #10]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	47a0      	blx	r4
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}

08001dfa <OV5640_WriteWrapper>:

static int32_t OV5640_WriteWrapper(void *Handle, uint16_t Reg, uint8_t *Data, uint16_t Length){
 8001dfa:	b590      	push	{r4, r7, lr}
 8001dfc:	b087      	sub	sp, #28
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	461a      	mov	r2, r3
 8001e06:	460b      	mov	r3, r1
 8001e08:	817b      	strh	r3, [r7, #10]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	813b      	strh	r3, [r7, #8]
	OV5640_Handle_t *OV5640 = (OV5640_Handle_t*)Handle;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	617b      	str	r3, [r7, #20]
	return OV5640->IO.Write(OV5640->IO.Address,Reg,Data,Length);
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	68dc      	ldr	r4, [r3, #12]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	8818      	ldrh	r0, [r3, #0]
 8001e1a:	893b      	ldrh	r3, [r7, #8]
 8001e1c:	8979      	ldrh	r1, [r7, #10]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	47a0      	blx	r4
 8001e22:	4603      	mov	r3, r0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}

08001e2c <OV5640_Delay>:

static int32_t OV5640_Delay(OV5640_Handle_t *OV5640, uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = OV5640->IO.GetTick();
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4798      	blx	r3
 8001e3c:	60f8      	str	r0, [r7, #12]
  while ((OV5640->IO.GetTick() - tickstart) < Delay)
 8001e3e:	bf00      	nop
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	4798      	blx	r3
 8001e46:	4602      	mov	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d8f6      	bhi.n	8001e40 <OV5640_Delay+0x14>
  {
  }
  return OV5640_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <OV5640_SetResolution>:

int32_t OV5640_SetResolution(OV5640_Handle_t *OV5640, uint32_t Resolution)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d903      	bls.n	8001e78 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	e0d8      	b.n	800202a <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	f200 80d1 	bhi.w	8002022 <OV5640_SetResolution+0x1c6>
 8001e80:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <OV5640_SetResolution+0x2c>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001e9d 	.word	0x08001e9d
 8001e8c:	08001eeb 	.word	0x08001eeb
 8001e90:	08001f39 	.word	0x08001f39
 8001e94:	08001f87 	.word	0x08001f87
 8001e98:	08001fd5 	.word	0x08001fd5
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	e01f      	b.n	8001ee2 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea8:	d018      	beq.n	8001edc <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001eaa:	4a62      	ldr	r2, [pc, #392]	; (8002034 <OV5640_SetResolution+0x1d8>)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	885b      	ldrh	r3, [r3, #2]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f103 0018 	add.w	r0, r3, #24
 8001ebe:	4a5d      	ldr	r2, [pc, #372]	; (8002034 <OV5640_SetResolution+0x1d8>)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ec6:	f107 020f 	add.w	r2, r7, #15
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f7ff ff65 	bl	8001d9a <OV5640_WriteReg>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d9dc      	bls.n	8001ea2 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001ee8:	e09f      	b.n	800202a <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	e01f      	b.n	8001f30 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d018      	beq.n	8001f2a <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001ef8:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <OV5640_SetResolution+0x1dc>)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	885b      	ldrh	r3, [r3, #2]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f103 0018 	add.w	r0, r3, #24
 8001f0c:	4a4a      	ldr	r2, [pc, #296]	; (8002038 <OV5640_SetResolution+0x1dc>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001f14:	f107 020f 	add.w	r2, r7, #15
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f7ff ff3e 	bl	8001d9a <OV5640_WriteReg>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d9dc      	bls.n	8001ef0 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001f36:	e078      	b.n	800202a <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	e01f      	b.n	8001f7e <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d018      	beq.n	8001f78 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001f46:	4a3d      	ldr	r2, [pc, #244]	; (800203c <OV5640_SetResolution+0x1e0>)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	885b      	ldrh	r3, [r3, #2]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f103 0018 	add.w	r0, r3, #24
 8001f5a:	4a38      	ldr	r2, [pc, #224]	; (800203c <OV5640_SetResolution+0x1e0>)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001f62:	f107 020f 	add.w	r2, r7, #15
 8001f66:	2301      	movs	r3, #1
 8001f68:	f7ff ff17 	bl	8001d9a <OV5640_WriteReg>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d9dc      	bls.n	8001f3e <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001f84:	e051      	b.n	800202a <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	e01f      	b.n	8001fcc <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f92:	d018      	beq.n	8001fc6 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001f94:	4a2a      	ldr	r2, [pc, #168]	; (8002040 <OV5640_SetResolution+0x1e4>)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	885b      	ldrh	r3, [r3, #2]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f103 0018 	add.w	r0, r3, #24
 8001fa8:	4a25      	ldr	r2, [pc, #148]	; (8002040 <OV5640_SetResolution+0x1e4>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001fb0:	f107 020f 	add.w	r2, r7, #15
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f7ff fef0 	bl	8001d9a <OV5640_WriteReg>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d9dc      	bls.n	8001f8c <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001fd2:	e02a      	b.n	800202a <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e01f      	b.n	800201a <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d018      	beq.n	8002014 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <OV5640_SetResolution+0x1e8>)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	885b      	ldrh	r3, [r3, #2]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f103 0018 	add.w	r0, r3, #24
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <OV5640_SetResolution+0x1e8>)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ffe:	f107 020f 	add.w	r2, r7, #15
 8002002:	2301      	movs	r3, #1
 8002004:	f7ff fec9 	bl	8001d9a <OV5640_WriteReg>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	3301      	adds	r3, #1
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d9dc      	bls.n	8001fda <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8002020:	e003      	b.n	800202a <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	617b      	str	r3, [r7, #20]
        break;
 8002028:	bf00      	nop
    }
  }

  return ret;
 800202a:	697b      	ldr	r3, [r7, #20]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	0800d25c 	.word	0x0800d25c
 8002038:	0800d26c 	.word	0x0800d26c
 800203c:	0800d27c 	.word	0x0800d27c
 8002040:	0800d28c 	.word	0x0800d28c
 8002044:	0800d29c 	.word	0x0800d29c

08002048 <OV5640_SetPixelFormat>:

int32_t OV5640_SetPixelFormat(OV5640_Handle_t *OV5640, uint32_t PixelFormat)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00f      	beq.n	800207c <OV5640_SetPixelFormat+0x34>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d00c      	beq.n	800207c <OV5640_SetPixelFormat+0x34>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d009      	beq.n	800207c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b07      	cmp	r3, #7
 800206c:	d006      	beq.n	800207c <OV5640_SetPixelFormat+0x34>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b08      	cmp	r3, #8
 8002072:	d003      	beq.n	800207c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e16a      	b.n	8002352 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	3b01      	subs	r3, #1
 8002080:	2b07      	cmp	r3, #7
 8002082:	f200 80c3 	bhi.w	800220c <OV5640_SetPixelFormat+0x1c4>
 8002086:	a201      	add	r2, pc, #4	; (adr r2, 800208c <OV5640_SetPixelFormat+0x44>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	08002105 	.word	0x08002105
 8002090:	080020ad 	.word	0x080020ad
 8002094:	0800220d 	.word	0x0800220d
 8002098:	0800220d 	.word	0x0800220d
 800209c:	0800220d 	.word	0x0800220d
 80020a0:	0800220d 	.word	0x0800220d
 80020a4:	0800215d 	.word	0x0800215d
 80020a8:	080021b5 	.word	0x080021b5
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	e024      	b.n	80020fc <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d01d      	beq.n	80020f6 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80020ba:	4aa8      	ldr	r2, [pc, #672]	; (800235c <OV5640_SetPixelFormat+0x314>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	885b      	ldrh	r3, [r3, #2]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f103 0018 	add.w	r0, r3, #24
 80020ce:	4aa3      	ldr	r2, [pc, #652]	; (800235c <OV5640_SetPixelFormat+0x314>)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80020d6:	f107 020f 	add.w	r2, r7, #15
 80020da:	2301      	movs	r3, #1
 80020dc:	f7ff fe5d 	bl	8001d9a <OV5640_WriteReg>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e003      	b.n	80020f6 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 80020ee:	2101      	movs	r1, #1
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fe9b 	bl	8001e2c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	3301      	adds	r3, #1
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d9d7      	bls.n	80020b2 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8002102:	e0af      	b.n	8002264 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e024      	b.n	8002154 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d01d      	beq.n	800214e <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8002112:	4a93      	ldr	r2, [pc, #588]	; (8002360 <OV5640_SetPixelFormat+0x318>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	885b      	ldrh	r3, [r3, #2]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0018 	add.w	r0, r3, #24
 8002126:	4a8e      	ldr	r2, [pc, #568]	; (8002360 <OV5640_SetPixelFormat+0x318>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800212e:	f107 020f 	add.w	r2, r7, #15
 8002132:	2301      	movs	r3, #1
 8002134:	f7ff fe31 	bl	8001d9a <OV5640_WriteReg>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e003      	b.n	800214e <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 8002146:	2101      	movs	r1, #1
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff fe6f 	bl	8001e2c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	3301      	adds	r3, #1
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d9d7      	bls.n	800210a <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 800215a:	e083      	b.n	8002264 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e024      	b.n	80021ac <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d01d      	beq.n	80021a6 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800216a:	4a7e      	ldr	r2, [pc, #504]	; (8002364 <OV5640_SetPixelFormat+0x31c>)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	885b      	ldrh	r3, [r3, #2]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f103 0018 	add.w	r0, r3, #24
 800217e:	4a79      	ldr	r2, [pc, #484]	; (8002364 <OV5640_SetPixelFormat+0x31c>)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002186:	f107 020f 	add.w	r2, r7, #15
 800218a:	2301      	movs	r3, #1
 800218c:	f7ff fe05 	bl	8001d9a <OV5640_WriteReg>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e003      	b.n	80021a6 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 800219e:	2101      	movs	r1, #1
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff fe43 	bl	8001e2c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	3301      	adds	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d9d7      	bls.n	8002162 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80021b2:	e057      	b.n	8002264 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	e024      	b.n	8002204 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d01d      	beq.n	80021fe <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80021c2:	4a69      	ldr	r2, [pc, #420]	; (8002368 <OV5640_SetPixelFormat+0x320>)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	885b      	ldrh	r3, [r3, #2]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f103 0018 	add.w	r0, r3, #24
 80021d6:	4a64      	ldr	r2, [pc, #400]	; (8002368 <OV5640_SetPixelFormat+0x320>)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021de:	f107 020f 	add.w	r2, r7, #15
 80021e2:	2301      	movs	r3, #1
 80021e4:	f7ff fdd9 	bl	8001d9a <OV5640_WriteReg>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e003      	b.n	80021fe <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 80021f6:	2101      	movs	r1, #1
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fe17 	bl	8001e2c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	3301      	adds	r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d9d7      	bls.n	80021ba <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 800220a:	e02b      	b.n	8002264 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	e024      	b.n	800225c <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d01d      	beq.n	8002256 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800221a:	4a54      	ldr	r2, [pc, #336]	; (800236c <OV5640_SetPixelFormat+0x324>)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	885b      	ldrh	r3, [r3, #2]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f103 0018 	add.w	r0, r3, #24
 800222e:	4a4f      	ldr	r2, [pc, #316]	; (800236c <OV5640_SetPixelFormat+0x324>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002236:	f107 020f 	add.w	r2, r7, #15
 800223a:	2301      	movs	r3, #1
 800223c:	f7ff fdad 	bl	8001d9a <OV5640_WriteReg>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e003      	b.n	8002256 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(OV5640, 1);
 800224e:	2101      	movs	r1, #1
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff fdeb 	bl	8001e2c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	3301      	adds	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d9d7      	bls.n	8002212 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8002262:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b08      	cmp	r3, #8
 8002268:	d173      	bne.n	8002352 <OV5640_SetPixelFormat+0x30a>
    {
      if (OV5640_ReadReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f103 0018 	add.w	r0, r3, #24
 8002270:	f107 020f 	add.w	r2, r7, #15
 8002274:	2301      	movs	r3, #1
 8002276:	f643 0121 	movw	r1, #14369	; 0x3821
 800227a:	f7ff fd77 	bl	8001d6c <OV5640_ReadReg>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e062      	b.n	8002352 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	f043 0320 	orr.w	r3, r3, #32
 8002292:	b2db      	uxtb	r3, r3
 8002294:	73fb      	strb	r3, [r7, #15]
        if (OV5640_WriteReg(&OV5640->Context, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f103 0018 	add.w	r0, r3, #24
 800229c:	f107 020f 	add.w	r2, r7, #15
 80022a0:	2301      	movs	r3, #1
 80022a2:	f643 0121 	movw	r1, #14369	; 0x3821
 80022a6:	f7ff fd78 	bl	8001d9a <OV5640_WriteReg>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e04c      	b.n	8002352 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (OV5640_ReadReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f103 0018 	add.w	r0, r3, #24
 80022be:	f107 020f 	add.w	r2, r7, #15
 80022c2:	2301      	movs	r3, #1
 80022c4:	f243 0102 	movw	r1, #12290	; 0x3002
 80022c8:	f7ff fd50 	bl	8001d6c <OV5640_ReadReg>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e03b      	b.n	8002352 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	f023 031c 	bic.w	r3, r3, #28
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	73fb      	strb	r3, [r7, #15]
            if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f103 0018 	add.w	r0, r3, #24
 80022ea:	f107 020f 	add.w	r2, r7, #15
 80022ee:	2301      	movs	r3, #1
 80022f0:	f243 0102 	movw	r1, #12290	; 0x3002
 80022f4:	f7ff fd51 	bl	8001d9a <OV5640_WriteReg>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e025      	b.n	8002352 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (OV5640_ReadReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f103 0018 	add.w	r0, r3, #24
 800230c:	f107 020f 	add.w	r2, r7, #15
 8002310:	2301      	movs	r3, #1
 8002312:	f243 0106 	movw	r1, #12294	; 0x3006
 8002316:	f7ff fd29 	bl	8001d6c <OV5640_ReadReg>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e014      	b.n	8002352 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800232e:	b2db      	uxtb	r3, r3
 8002330:	73fb      	strb	r3, [r7, #15]
                if (OV5640_WriteReg(&OV5640->Context, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f103 0018 	add.w	r0, r3, #24
 8002338:	f107 020f 	add.w	r2, r7, #15
 800233c:	2301      	movs	r3, #1
 800233e:	f243 0106 	movw	r1, #12294	; 0x3006
 8002342:	f7ff fd2a 	bl	8001d9a <OV5640_WriteReg>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8002352:	697b      	ldr	r3, [r7, #20]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	0800d2ac 	.word	0x0800d2ac
 8002360:	0800d2b4 	.word	0x0800d2b4
 8002364:	0800d2bc 	.word	0x0800d2bc
 8002368:	0800d2c4 	.word	0x0800d2c4
 800236c:	0800d2cc 	.word	0x0800d2cc

08002370 <OV5640_SetPolarities>:

int32_t OV5640_SetPolarities(OV5640_Handle_t *OV5640, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]

  if ((OV5640 == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d011      	beq.n	80023ac <OV5640_SetPolarities+0x3c>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <OV5640_SetPolarities+0x24>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10b      	bne.n	80023ac <OV5640_SetPolarities+0x3c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <OV5640_SetPolarities+0x3c>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d006      	beq.n	80023b4 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e01e      	b.n	80023f2 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	015b      	lsls	r3, r3, #5
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	74fb      	strb	r3, [r7, #19]

    if (OV5640_WriteReg(&OV5640->Context, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f103 0018 	add.w	r0, r3, #24
 80023d8:	f107 0213 	add.w	r2, r7, #19
 80023dc:	2301      	movs	r3, #1
 80023de:	f244 7140 	movw	r1, #18240	; 0x4740
 80023e2:	f7ff fcda 	bl	8001d9a <OV5640_WriteReg>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80023f2:	697b      	ldr	r3, [r7, #20]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <OV5640_ReadID>:

int32_t OV5640_ReadID(OV5640_Handle_t *OV5640, uint32_t *Id)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]

  /* Initialize I2C */
  //OV5640->IO.Init();

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	72fb      	strb	r3, [r7, #11]
  if (OV5640_WriteReg(&OV5640->Context, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f103 0018 	add.w	r0, r3, #24
 8002410:	f107 020b 	add.w	r2, r7, #11
 8002414:	2301      	movs	r3, #1
 8002416:	f243 0108 	movw	r1, #12296	; 0x3008
 800241a:	f7ff fcbe 	bl	8001d9a <OV5640_WriteReg>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <OV5640_ReadID+0x30>
  {
    ret = OV5640_ERROR;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	e032      	b.n	8002492 <OV5640_ReadID+0x96>
  }
  else
  {
    (void)OV5640_Delay(OV5640, 500);
 800242c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff fcfb 	bl	8001e2c <OV5640_Delay>

    if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f103 0018 	add.w	r0, r3, #24
 800243c:	f107 020b 	add.w	r2, r7, #11
 8002440:	2301      	movs	r3, #1
 8002442:	f243 010a 	movw	r1, #12298	; 0x300a
 8002446:	f7ff fc91 	bl	8001d6c <OV5640_ReadReg>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <OV5640_ReadID+0x5c>
    {
      ret = OV5640_ERROR;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	e01c      	b.n	8002492 <OV5640_ReadID+0x96>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8002458:	7afb      	ldrb	r3, [r7, #11]
 800245a:	021a      	lsls	r2, r3, #8
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	601a      	str	r2, [r3, #0]
      if (OV5640_ReadReg(&OV5640->Context, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f103 0018 	add.w	r0, r3, #24
 8002466:	f107 020b 	add.w	r2, r7, #11
 800246a:	2301      	movs	r3, #1
 800246c:	f243 010b 	movw	r1, #12299	; 0x300b
 8002470:	f7ff fc7c 	bl	8001d6c <OV5640_ReadReg>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <OV5640_ReadID+0x86>
      {
        ret = OV5640_ERROR;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e007      	b.n	8002492 <OV5640_ReadID+0x96>
      }
      else
      {
        *Id |= tmp;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	7afa      	ldrb	r2, [r7, #11]
 8002488:	431a      	orrs	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af08      	add	r7, sp, #32
 80024a2:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	60bb      	str	r3, [r7, #8]
   /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_event_flags_create(&LED_Evt, "LED Event");
 80024ac:	2224      	movs	r2, #36	; 0x24
 80024ae:	4925      	ldr	r1, [pc, #148]	; (8002544 <App_ThreadX_Init+0xa8>)
 80024b0:	4825      	ldr	r0, [pc, #148]	; (8002548 <App_ThreadX_Init+0xac>)
 80024b2:	f00a fa79 	bl	800c9a8 <_txe_event_flags_create>
  tx_thread_create(&thread_ptr1,
 80024b6:	23b0      	movs	r3, #176	; 0xb0
 80024b8:	9306      	str	r3, [sp, #24]
 80024ba:	2301      	movs	r3, #1
 80024bc:	9305      	str	r3, [sp, #20]
 80024be:	2301      	movs	r3, #1
 80024c0:	9304      	str	r3, [sp, #16]
 80024c2:	230f      	movs	r3, #15
 80024c4:	9303      	str	r3, [sp, #12]
 80024c6:	230f      	movs	r3, #15
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <App_ThreadX_Init+0xb0>)
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <App_ThreadX_Init+0xb4>)
 80024da:	491e      	ldr	r1, [pc, #120]	; (8002554 <App_ThreadX_Init+0xb8>)
 80024dc:	481e      	ldr	r0, [pc, #120]	; (8002558 <App_ThreadX_Init+0xbc>)
 80024de:	f00a fb23 	bl	800cb28 <_txe_thread_create>
					15,
					15,
					1,
					TX_AUTO_START);

  tx_thread_create(&thread_ptr2,
 80024e2:	23b0      	movs	r3, #176	; 0xb0
 80024e4:	9306      	str	r3, [sp, #24]
 80024e6:	2301      	movs	r3, #1
 80024e8:	9305      	str	r3, [sp, #20]
 80024ea:	2301      	movs	r3, #1
 80024ec:	9304      	str	r3, [sp, #16]
 80024ee:	230f      	movs	r3, #15
 80024f0:	9303      	str	r3, [sp, #12]
 80024f2:	230f      	movs	r3, #15
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <App_ThreadX_Init+0xc0>)
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8002504:	4a16      	ldr	r2, [pc, #88]	; (8002560 <App_ThreadX_Init+0xc4>)
 8002506:	4917      	ldr	r1, [pc, #92]	; (8002564 <App_ThreadX_Init+0xc8>)
 8002508:	4817      	ldr	r0, [pc, #92]	; (8002568 <App_ThreadX_Init+0xcc>)
 800250a:	f00a fb0d 	bl	800cb28 <_txe_thread_create>
					15,
					15,
					1,
					TX_AUTO_START);

  tx_thread_create(&thread_ptr3,
 800250e:	23b0      	movs	r3, #176	; 0xb0
 8002510:	9306      	str	r3, [sp, #24]
 8002512:	2301      	movs	r3, #1
 8002514:	9305      	str	r3, [sp, #20]
 8002516:	2301      	movs	r3, #1
 8002518:	9304      	str	r3, [sp, #16]
 800251a:	230f      	movs	r3, #15
 800251c:	9303      	str	r3, [sp, #12]
 800251e:	230f      	movs	r3, #15
 8002520:	9302      	str	r3, [sp, #8]
 8002522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <App_ThreadX_Init+0xd0>)
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
 8002530:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <App_ThreadX_Init+0xd4>)
 8002532:	4910      	ldr	r1, [pc, #64]	; (8002574 <App_ThreadX_Init+0xd8>)
 8002534:	4810      	ldr	r0, [pc, #64]	; (8002578 <App_ThreadX_Init+0xdc>)
 8002536:	f00a faf7 	bl	800cb28 <_txe_thread_create>
					15,
					1,
					TX_AUTO_START);
  /* USER CODE END App_ThreadX_Init */

  return ret;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	0800ce2c 	.word	0x0800ce2c
 8002548:	20001308 	.word	0x20001308
 800254c:	200004f8 	.word	0x200004f8
 8002550:	08002589 	.word	0x08002589
 8002554:	0800ce38 	.word	0x0800ce38
 8002558:	200010f8 	.word	0x200010f8
 800255c:	200008f8 	.word	0x200008f8
 8002560:	080025ad 	.word	0x080025ad
 8002564:	0800ce40 	.word	0x0800ce40
 8002568:	200011a8 	.word	0x200011a8
 800256c:	20000cf8 	.word	0x20000cf8
 8002570:	080025d1 	.word	0x080025d1
 8002574:	0800ce48 	.word	0x0800ce48
 8002578:	20001258 	.word	0x20001258

0800257c <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8002580:	f009 f964 	bl	800b84c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <thread1_evt>:

/* USER CODE BEGIN 1 */
VOID thread1_evt(ULONG initial_input){
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		tx_event_flags_set(&LED_Evt,1,TX_OR);
 8002590:	2200      	movs	r2, #0
 8002592:	2101      	movs	r1, #1
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <thread1_evt+0x1c>)
 8002596:	f00a fa99 	bl	800cacc <_txe_event_flags_set>
		tx_thread_suspend(&thread_ptr1);
 800259a:	4803      	ldr	r0, [pc, #12]	; (80025a8 <thread1_evt+0x20>)
 800259c:	f00a fbd4 	bl	800cd48 <_txe_thread_suspend>
		tx_event_flags_set(&LED_Evt,1,TX_OR);
 80025a0:	e7f6      	b.n	8002590 <thread1_evt+0x8>
 80025a2:	bf00      	nop
 80025a4:	20001308 	.word	0x20001308
 80025a8:	200010f8 	.word	0x200010f8

080025ac <thread2_evt>:
	}
}

VOID thread2_evt(ULONG initial_input){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		tx_event_flags_set(&LED_Evt,2,TX_OR);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2102      	movs	r1, #2
 80025b8:	4803      	ldr	r0, [pc, #12]	; (80025c8 <thread2_evt+0x1c>)
 80025ba:	f00a fa87 	bl	800cacc <_txe_event_flags_set>
		tx_thread_suspend(&thread_ptr2);
 80025be:	4803      	ldr	r0, [pc, #12]	; (80025cc <thread2_evt+0x20>)
 80025c0:	f00a fbc2 	bl	800cd48 <_txe_thread_suspend>
		tx_event_flags_set(&LED_Evt,2,TX_OR);
 80025c4:	e7f6      	b.n	80025b4 <thread2_evt+0x8>
 80025c6:	bf00      	nop
 80025c8:	20001308 	.word	0x20001308
 80025cc:	200011a8 	.word	0x200011a8

080025d0 <thread_LED>:
	}
}

VOID thread_LED(ULONG initial_input){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	uint32_t FlagValue = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		FlagValue = LED_Evt.tx_event_flags_group_current;
 80025dc:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <thread_LED+0x48>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	60fb      	str	r3, [r7, #12]

	    if(FlagValue == 3){
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d1f9      	bne.n	80025dc <thread_LED+0xc>
	        HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	480c      	ldr	r0, [pc, #48]	; (800261c <thread_LED+0x4c>)
 80025ec:	f003 fe1a 	bl	8006224 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80025f0:	2140      	movs	r1, #64	; 0x40
 80025f2:	480a      	ldr	r0, [pc, #40]	; (800261c <thread_LED+0x4c>)
 80025f4:	f003 fe16 	bl	8006224 <HAL_GPIO_TogglePin>
	        tx_event_flags_set(&LED_Evt, 0xFFFC, TX_AND);
 80025f8:	2202      	movs	r2, #2
 80025fa:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80025fe:	4806      	ldr	r0, [pc, #24]	; (8002618 <thread_LED+0x48>)
 8002600:	f00a fa64 	bl	800cacc <_txe_event_flags_set>
	        tx_thread_resume(&thread_ptr1);
 8002604:	4806      	ldr	r0, [pc, #24]	; (8002620 <thread_LED+0x50>)
 8002606:	f00a fb81 	bl	800cd0c <_txe_thread_resume>
	        tx_thread_resume(&thread_ptr2);
 800260a:	4806      	ldr	r0, [pc, #24]	; (8002624 <thread_LED+0x54>)
 800260c:	f00a fb7e 	bl	800cd0c <_txe_thread_resume>
	        tx_thread_sleep(100);
 8002610:	2064      	movs	r0, #100	; 0x64
 8002612:	f009 fb23 	bl	800bc5c <_tx_thread_sleep>
		FlagValue = LED_Evt.tx_event_flags_group_current;
 8002616:	e7e1      	b.n	80025dc <thread_LED+0xc>
 8002618:	20001308 	.word	0x20001308
 800261c:	42021c00 	.word	0x42021c00
 8002620:	200010f8 	.word	0x200010f8
 8002624:	200011a8 	.word	0x200011a8

08002628 <MX_DCACHE1_Init>:

DCACHE_HandleTypeDef hdcache1;

/* DCACHE1 init function */
void MX_DCACHE1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 800262c:	4b07      	ldr	r3, [pc, #28]	; (800264c <MX_DCACHE1_Init+0x24>)
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <MX_DCACHE1_Init+0x28>)
 8002630:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <MX_DCACHE1_Init+0x24>)
 8002634:	2200      	movs	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8002638:	4804      	ldr	r0, [pc, #16]	; (800264c <MX_DCACHE1_Init+0x24>)
 800263a:	f001 fd13 	bl	8004064 <HAL_DCACHE_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8002644:	f001 f826 	bl	8003694 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	2000132c 	.word	0x2000132c
 8002650:	40031400 	.word	0x40031400

08002654 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <MX_DCMI_Init+0x60>)
 800265a:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <MX_DCMI_Init+0x64>)
 800265c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <MX_DCMI_Init+0x60>)
 8002660:	2200      	movs	r2, #0
 8002662:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <MX_DCMI_Init+0x60>)
 8002666:	2220      	movs	r2, #32
 8002668:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <MX_DCMI_Init+0x60>)
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <MX_DCMI_Init+0x60>)
 8002672:	2240      	movs	r2, #64	; 0x40
 8002674:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <MX_DCMI_Init+0x60>)
 8002678:	2200      	movs	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <MX_DCMI_Init+0x60>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <MX_DCMI_Init+0x60>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <MX_DCMI_Init+0x60>)
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <MX_DCMI_Init+0x60>)
 8002690:	2200      	movs	r2, #0
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <MX_DCMI_Init+0x60>)
 8002696:	2200      	movs	r2, #0
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <MX_DCMI_Init+0x60>)
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80026a0:	4804      	ldr	r0, [pc, #16]	; (80026b4 <MX_DCMI_Init+0x60>)
 80026a2:	f001 fd95 	bl	80041d0 <HAL_DCMI_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80026ac:	f000 fff2 	bl	8003694 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20001358 	.word	0x20001358
 80026b8:	4202c000 	.word	0x4202c000

080026bc <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	; 0x38
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6d      	ldr	r2, [pc, #436]	; (8002890 <HAL_DCMI_MspInit+0x1d4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	f040 80d3 	bne.w	8002886 <HAL_DCMI_MspInit+0x1ca>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 80026e0:	4b6c      	ldr	r3, [pc, #432]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 80026e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e6:	4a6b      	ldr	r2, [pc, #428]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 80026e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026f0:	4b68      	ldr	r3, [pc, #416]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 80026f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fa:	623b      	str	r3, [r7, #32]
 80026fc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026fe:	4b65      	ldr	r3, [pc, #404]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 8002700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002704:	4a63      	ldr	r2, [pc, #396]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800270e:	4b61      	ldr	r3, [pc, #388]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 8002710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800271c:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 800271e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002722:	4a5c      	ldr	r2, [pc, #368]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 8002724:	f043 0310 	orr.w	r3, r3, #16
 8002728:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 800272e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	61bb      	str	r3, [r7, #24]
 8002738:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800273a:	4b56      	ldr	r3, [pc, #344]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 800273c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002740:	4a54      	ldr	r2, [pc, #336]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 8002742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002746:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800274a:	4b52      	ldr	r3, [pc, #328]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 800274c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	4b4e      	ldr	r3, [pc, #312]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 800275a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800275e:	4a4d      	ldr	r2, [pc, #308]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002768:	4b4a      	ldr	r3, [pc, #296]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 800276a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 8002778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800277c:	4a45      	ldr	r2, [pc, #276]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002786:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 8002788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 8002796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800279a:	4a3e      	ldr	r2, [pc, #248]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_DCMI_MspInit+0x1d8>)
 80027a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = CAM_D6_Pin|CAM_D5_Pin|CAM_D7_Pin;
 80027b2:	23d0      	movs	r3, #208	; 0xd0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80027c2:	230a      	movs	r3, #10
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ca:	4619      	mov	r1, r3
 80027cc:	4832      	ldr	r0, [pc, #200]	; (8002898 <HAL_DCMI_MspInit+0x1dc>)
 80027ce:	f003 fa43 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D3_Pin;
 80027d2:	2302      	movs	r3, #2
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80027e2:	230a      	movs	r3, #10
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_D3_GPIO_Port, &GPIO_InitStruct);
 80027e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ea:	4619      	mov	r1, r3
 80027ec:	482b      	ldr	r0, [pc, #172]	; (800289c <HAL_DCMI_MspInit+0x1e0>)
 80027ee:	f003 fa33 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D4_Pin|CAM_HSYNC_Pin;
 80027f2:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002800:	2303      	movs	r3, #3
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002804:	230a      	movs	r3, #10
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280c:	4619      	mov	r1, r3
 800280e:	4824      	ldr	r0, [pc, #144]	; (80028a0 <HAL_DCMI_MspInit+0x1e4>)
 8002810:	f003 fa22 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_VSYNC_Pin;
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002824:	230a      	movs	r3, #10
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282c:	4619      	mov	r1, r3
 800282e:	481d      	ldr	r0, [pc, #116]	; (80028a4 <HAL_DCMI_MspInit+0x1e8>)
 8002830:	f003 fa12 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_D2_Pin|CAM_D1_Pin|CAM_D0_Pin;
 8002834:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002842:	2303      	movs	r3, #3
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002846:	230a      	movs	r3, #10
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284e:	4619      	mov	r1, r3
 8002850:	4815      	ldr	r0, [pc, #84]	; (80028a8 <HAL_DCMI_MspInit+0x1ec>)
 8002852:	f003 fa01 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAM_PIXCLK_Pin;
 8002856:	2340      	movs	r3, #64	; 0x40
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002862:	2303      	movs	r3, #3
 8002864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8002866:	2304      	movs	r3, #4
 8002868:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CAM_PIXCLK_GPIO_Port, &GPIO_InitStruct);
 800286a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286e:	4619      	mov	r1, r3
 8002870:	480e      	ldr	r0, [pc, #56]	; (80028ac <HAL_DCMI_MspInit+0x1f0>)
 8002872:	f003 f9f1 	bl	8005c58 <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 15, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	210f      	movs	r1, #15
 800287a:	2077      	movs	r0, #119	; 0x77
 800287c:	f001 fbca 	bl	8004014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8002880:	2077      	movs	r0, #119	; 0x77
 8002882:	f001 fbe1 	bl	8004048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8002886:	bf00      	nop
 8002888:	3738      	adds	r7, #56	; 0x38
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	4202c000 	.word	0x4202c000
 8002894:	46020c00 	.word	0x46020c00
 8002898:	42022000 	.word	0x42022000
 800289c:	42021000 	.word	0x42021000
 80028a0:	42021c00 	.word	0x42021c00
 80028a4:	42020400 	.word	0x42020400
 80028a8:	42020800 	.word	0x42020800
 80028ac:	42020000 	.word	0x42020000

080028b0 <DCMI_DMA_Init>:
  /* USER CODE END GPDMA1_Init 2 */

}

/* USER CODE BEGIN 1 */
void DCMI_DMA_Init(void){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b09e      	sub	sp, #120	; 0x78
 80028b4:	af00      	add	r7, sp, #0

	  __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 80028b6:	4b4b      	ldr	r3, [pc, #300]	; (80029e4 <DCMI_DMA_Init+0x134>)
 80028b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028bc:	4a49      	ldr	r2, [pc, #292]	; (80029e4 <DCMI_DMA_Init+0x134>)
 80028be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <DCMI_DMA_Init+0x134>)
 80028c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80028d4:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <DCMI_DMA_Init+0x134>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	4a42      	ldr	r2, [pc, #264]	; (80029e4 <DCMI_DMA_Init+0x134>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80028e4:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <DCMI_DMA_Init+0x134>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
	  static DMA_NodeTypeDef DCMINode1;
	  static DMA_NodeTypeDef DCMINode2;
	  DMA_NodeConfTypeDef node_config;
	  node_config.NodeType                            = DMA_GPDMA_2D_NODE;
 80028f2:	2322      	movs	r3, #34	; 0x22
 80028f4:	60fb      	str	r3, [r7, #12]
	  /* Set common node parameters */
	  node_config.Init.Request                        = GPDMA1_REQUEST_DCMI;
 80028f6:	2356      	movs	r3, #86	; 0x56
 80028f8:	613b      	str	r3, [r7, #16]
	  node_config.Init.BlkHWRequest                   = DMA_BREQ_SINGLE_BURST;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
	  node_config.Init.Direction                      = DMA_PERIPH_TO_MEMORY;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
	  node_config.Init.SrcInc                         = DMA_SINC_FIXED;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
	  node_config.Init.DestInc                        = DMA_DINC_INCREMENTED;
 8002906:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800290a:	623b      	str	r3, [r7, #32]
	  node_config.Init.SrcDataWidth                   = DMA_SRC_DATAWIDTH_WORD;
 800290c:	2302      	movs	r3, #2
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
	  node_config.Init.DestDataWidth                  = DMA_DEST_DATAWIDTH_WORD;
 8002910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
	  node_config.Init.SrcBurstLength                 = 1;
 8002916:	2301      	movs	r3, #1
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
	  node_config.Init.DestBurstLength                = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
	  node_config.Init.TransferAllocatedPort          = DMA_SRC_ALLOCATED_PORT0 | DMA_DEST_ALLOCATED_PORT1;
 800291e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
	  node_config.Init.TransferEventMode              = DMA_TCEM_EACH_LL_ITEM_TRANSFER;
 8002924:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002928:	63fb      	str	r3, [r7, #60]	; 0x3c
	  /* Set node data handling parameters */
	  node_config.DataHandlingConfig.DataExchange     = DMA_EXCHANGE_NONE;
 800292a:	2300      	movs	r3, #0
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
	  node_config.DataHandlingConfig.DataAlignment    = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800292e:	2300      	movs	r3, #0
 8002930:	64bb      	str	r3, [r7, #72]	; 0x48
	  /* Set node trigger parameters */
	  node_config.TriggerConfig.TriggerPolarity       = DMA_TRIG_POLARITY_MASKED;
 8002932:	2300      	movs	r3, #0
 8002934:	653b      	str	r3, [r7, #80]	; 0x50
	  /* Set node repeated block parameters */
	  node_config.RepeatBlockConfig.RepeatCount       = 1U;
 8002936:	2301      	movs	r3, #1
 8002938:	65bb      	str	r3, [r7, #88]	; 0x58
	  node_config.RepeatBlockConfig.SrcAddrOffset     = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	65fb      	str	r3, [r7, #92]	; 0x5c
	  node_config.RepeatBlockConfig.DestAddrOffset    = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	663b      	str	r3, [r7, #96]	; 0x60
	  node_config.RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	667b      	str	r3, [r7, #100]	; 0x64
	  node_config.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	66bb      	str	r3, [r7, #104]	; 0x68

	  /* Build DCMINode1 */
	  HAL_DMAEx_List_BuildNode(&node_config, &DCMINode1);
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	4926      	ldr	r1, [pc, #152]	; (80029e8 <DCMI_DMA_Init+0x138>)
 8002950:	4618      	mov	r0, r3
 8002952:	f002 fc17 	bl	8005184 <HAL_DMAEx_List_BuildNode>

	  /* Insert DCMINode1 to DCMI queue */
	  HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode1);
 8002956:	4924      	ldr	r1, [pc, #144]	; (80029e8 <DCMI_DMA_Init+0x138>)
 8002958:	4824      	ldr	r0, [pc, #144]	; (80029ec <DCMI_DMA_Init+0x13c>)
 800295a:	f002 fc29 	bl	80051b0 <HAL_DMAEx_List_InsertNode_Tail>

	  /* Build DCMINode2 */
	  HAL_DMAEx_List_BuildNode(&node_config, &DCMINode2);
 800295e:	f107 030c 	add.w	r3, r7, #12
 8002962:	4923      	ldr	r1, [pc, #140]	; (80029f0 <DCMI_DMA_Init+0x140>)
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fc0d 	bl	8005184 <HAL_DMAEx_List_BuildNode>

	  /* Insert DCMINode2 to DCMI queue */
	  HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode2);
 800296a:	4921      	ldr	r1, [pc, #132]	; (80029f0 <DCMI_DMA_Init+0x140>)
 800296c:	481f      	ldr	r0, [pc, #124]	; (80029ec <DCMI_DMA_Init+0x13c>)
 800296e:	f002 fc1f 	bl	80051b0 <HAL_DMAEx_List_InsertNode_Tail>

	  /* Set queue circular mode for DCMI queue */
	  HAL_DMAEx_List_SetCircularMode(&DCMIQueue);
 8002972:	481e      	ldr	r0, [pc, #120]	; (80029ec <DCMI_DMA_Init+0x13c>)
 8002974:	f002 fc94 	bl	80052a0 <HAL_DMAEx_List_SetCircularMode>

	  /*** Configure the DMA channel ***/
	  handle_GPDMA1_Channel12.Instance                         = GPDMA1_Channel12;
 8002978:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <DCMI_DMA_Init+0x144>)
 800297a:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <DCMI_DMA_Init+0x148>)
 800297c:	601a      	str	r2, [r3, #0]
	  handle_GPDMA1_Channel12.InitLinkedList.Priority          = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <DCMI_DMA_Init+0x144>)
 8002980:	2200      	movs	r2, #0
 8002982:	639a      	str	r2, [r3, #56]	; 0x38
	  handle_GPDMA1_Channel12.InitLinkedList.LinkStepMode      = DMA_LSM_FULL_EXECUTION;
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <DCMI_DMA_Init+0x144>)
 8002986:	2200      	movs	r2, #0
 8002988:	63da      	str	r2, [r3, #60]	; 0x3c
	  handle_GPDMA1_Channel12.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <DCMI_DMA_Init+0x144>)
 800298c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
	  handle_GPDMA1_Channel12.InitLinkedList.LinkedListMode    = DMA_LINKEDLIST_CIRCULAR;
 8002992:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <DCMI_DMA_Init+0x144>)
 8002994:	2281      	movs	r2, #129	; 0x81
 8002996:	649a      	str	r2, [r3, #72]	; 0x48
	  handle_GPDMA1_Channel12.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <DCMI_DMA_Init+0x144>)
 800299a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800299e:	645a      	str	r2, [r3, #68]	; 0x44

	  /* DMA linked list init */
	  HAL_DMAEx_List_Init(&handle_GPDMA1_Channel12);
 80029a0:	4814      	ldr	r0, [pc, #80]	; (80029f4 <DCMI_DMA_Init+0x144>)
 80029a2:	f002 fa2d 	bl	8004e00 <HAL_DMAEx_List_Init>

	  /* Link DCMI queue to DMA channel */
	  HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel12, &DCMIQueue);
 80029a6:	4911      	ldr	r1, [pc, #68]	; (80029ec <DCMI_DMA_Init+0x13c>)
 80029a8:	4812      	ldr	r0, [pc, #72]	; (80029f4 <DCMI_DMA_Init+0x144>)
 80029aa:	f002 fcd9 	bl	8005360 <HAL_DMAEx_List_LinkQ>

	  /* Associate the initialized DMA handle to the DCMI handle */
	  __HAL_LINKDMA(&hdcmi, DMA_Handle, handle_GPDMA1_Channel12);
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <DCMI_DMA_Init+0x14c>)
 80029b0:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <DCMI_DMA_Init+0x144>)
 80029b2:	649a      	str	r2, [r3, #72]	; 0x48
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <DCMI_DMA_Init+0x144>)
 80029b6:	4a11      	ldr	r2, [pc, #68]	; (80029fc <DCMI_DMA_Init+0x14c>)
 80029b8:	65da      	str	r2, [r3, #92]	; 0x5c

	  /*** Configure the NVIC for DCMI and DMA ***/
	  /* NVIC configuration for DCMI transfer complete interrupt */
	  HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 10, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	210a      	movs	r1, #10
 80029be:	2077      	movs	r0, #119	; 0x77
 80029c0:	f001 fb28 	bl	8004014 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80029c4:	2077      	movs	r0, #119	; 0x77
 80029c6:	f001 fb3f 	bl	8004048 <HAL_NVIC_EnableIRQ>

	  /* NVIC configuration for GPDMA1 transfer complete interrupt */
	  HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 10, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	210a      	movs	r1, #10
 80029ce:	2054      	movs	r0, #84	; 0x54
 80029d0:	f001 fb20 	bl	8004014 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80029d4:	2054      	movs	r0, #84	; 0x54
 80029d6:	f001 fb37 	bl	8004048 <HAL_NVIC_EnableIRQ>
}
 80029da:	bf00      	nop
 80029dc:	3778      	adds	r7, #120	; 0x78
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	46020c00 	.word	0x46020c00
 80029e8:	20001438 	.word	0x20001438
 80029ec:	200013a8 	.word	0x200013a8
 80029f0:	2000145c 	.word	0x2000145c
 80029f4:	200013c0 	.word	0x200013c0
 80029f8:	40020650 	.word	0x40020650
 80029fc:	20001358 	.word	0x20001358

08002a00 <MX_GPIO_Init>:
     PB12   ------> SPI2_NSS
     PB15   ------> UCPD1_CC2
     PB1   ------> MDF1_SDI0
*/
void MX_GPIO_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08e      	sub	sp, #56	; 0x38
 8002a04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	609a      	str	r2, [r3, #8]
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a16:	4bbf      	ldr	r3, [pc, #764]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	4abd      	ldr	r2, [pc, #756]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a26:	4bbb      	ldr	r3, [pc, #748]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a34:	4bb7      	ldr	r3, [pc, #732]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a3a:	4ab6      	ldr	r2, [pc, #728]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a44:	4bb3      	ldr	r3, [pc, #716]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a52:	4bb0      	ldr	r3, [pc, #704]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a58:	4aae      	ldr	r2, [pc, #696]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a62:	4bac      	ldr	r3, [pc, #688]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a70:	4ba8      	ldr	r3, [pc, #672]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a76:	4aa7      	ldr	r2, [pc, #668]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a80:	4ba4      	ldr	r3, [pc, #656]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a8e:	4ba1      	ldr	r3, [pc, #644]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	4a9f      	ldr	r2, [pc, #636]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a9e:	4b9d      	ldr	r3, [pc, #628]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aac:	4b99      	ldr	r3, [pc, #612]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab2:	4a98      	ldr	r2, [pc, #608]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002ab4:	f043 0310 	orr.w	r3, r3, #16
 8002ab8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002abc:	4b95      	ldr	r3, [pc, #596]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aca:	4b92      	ldr	r3, [pc, #584]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad0:	4a90      	ldr	r2, [pc, #576]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002ad2:	f043 0302 	orr.w	r3, r3, #2
 8002ad6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ada:	4b8e      	ldr	r3, [pc, #568]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ae8:	4b8a      	ldr	r3, [pc, #552]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aee:	4a89      	ldr	r2, [pc, #548]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002af0:	f043 0308 	orr.w	r3, r3, #8
 8002af4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002af8:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b06:	4b83      	ldr	r3, [pc, #524]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0c:	4a81      	ldr	r2, [pc, #516]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b16:	4b7f      	ldr	r3, [pc, #508]	; (8002d14 <MX_GPIO_Init+0x314>)
 8002b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2120      	movs	r1, #32
 8002b28:	487b      	ldr	r0, [pc, #492]	; (8002d18 <MX_GPIO_Init+0x318>)
 8002b2a:	f003 fb63 	bl	80061f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2108      	movs	r1, #8
 8002b32:	487a      	ldr	r0, [pc, #488]	; (8002d1c <MX_GPIO_Init+0x31c>)
 8002b34:	f003 fb5e 	bl	80061f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	4877      	ldr	r0, [pc, #476]	; (8002d1c <MX_GPIO_Init+0x31c>)
 8002b3e:	f003 fb59 	bl	80061f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8002b42:	2200      	movs	r2, #0
 8002b44:	21c2      	movs	r1, #194	; 0xc2
 8002b46:	4876      	ldr	r0, [pc, #472]	; (8002d20 <MX_GPIO_Init+0x320>)
 8002b48:	f003 fb54 	bl	80061f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2140      	movs	r1, #64	; 0x40
 8002b50:	4874      	ldr	r0, [pc, #464]	; (8002d24 <MX_GPIO_Init+0x324>)
 8002b52:	f003 fb4f 	bl	80061f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8002b5c:	4872      	ldr	r0, [pc, #456]	; (8002d28 <MX_GPIO_Init+0x328>)
 8002b5e:	f003 fb49 	bl	80061f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8002b62:	f248 0324 	movw	r3, #32804	; 0x8024
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	486b      	ldr	r0, [pc, #428]	; (8002d24 <MX_GPIO_Init+0x324>)
 8002b78:	f003 f86e 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8002b7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b8e:	2308      	movs	r3, #8
 8002b90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b96:	4619      	mov	r1, r3
 8002b98:	4864      	ldr	r0, [pc, #400]	; (8002d2c <MX_GPIO_Init+0x32c>)
 8002b9a:	f003 f85d 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 8002b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 8002bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	485f      	ldr	r0, [pc, #380]	; (8002d30 <MX_GPIO_Init+0x330>)
 8002bb4:	f003 f850 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_PLUG_Pin;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CAM_PLUG_GPIO_Port, &GPIO_InitStruct);
 8002bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4854      	ldr	r0, [pc, #336]	; (8002d1c <MX_GPIO_Init+0x31c>)
 8002bcc:	f003 f844 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002be0:	2305      	movs	r3, #5
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8002be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be8:	4619      	mov	r1, r3
 8002bea:	484c      	ldr	r0, [pc, #304]	; (8002d1c <MX_GPIO_Init+0x31c>)
 8002bec:	f003 f834 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8002bf0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002c02:	2305      	movs	r3, #5
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4844      	ldr	r0, [pc, #272]	; (8002d20 <MX_GPIO_Init+0x320>)
 8002c0e:	f003 f823 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8002c12:	2308      	movs	r3, #8
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c16:	2300      	movs	r3, #0
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8002c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c22:	4619      	mov	r1, r3
 8002c24:	483e      	ldr	r0, [pc, #248]	; (8002d20 <MX_GPIO_Init+0x320>)
 8002c26:	f003 f817 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c36:	2300      	movs	r3, #0
 8002c38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8002c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4835      	ldr	r0, [pc, #212]	; (8002d18 <MX_GPIO_Init+0x318>)
 8002c42:	f003 f809 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 8002c46:	231a      	movs	r3, #26
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c56:	2305      	movs	r3, #5
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4834      	ldr	r0, [pc, #208]	; (8002d34 <MX_GPIO_Init+0x334>)
 8002c62:	f002 fff9 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_XSDN_Pin;
 8002c66:	2308      	movs	r3, #8
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_XSDN_GPIO_Port, &GPIO_InitStruct);
 8002c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4827      	ldr	r0, [pc, #156]	; (8002d1c <MX_GPIO_Init+0x31c>)
 8002c7e:	f002 ffeb 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_RSTI_Pin;
 8002c82:	2304      	movs	r3, #4
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c86:	2301      	movs	r3, #1
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAM_RSTI_GPIO_Port, &GPIO_InitStruct);
 8002c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c96:	4619      	mov	r1, r3
 8002c98:	4820      	ldr	r0, [pc, #128]	; (8002d1c <MX_GPIO_Init+0x31c>)
 8002c9a:	f002 ffdd 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8002c9e:	f241 031f 	movw	r3, #4127	; 0x101f
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002cb0:	2305      	movs	r3, #5
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb8:	4619      	mov	r1, r3
 8002cba:	481b      	ldr	r0, [pc, #108]	; (8002d28 <MX_GPIO_Init+0x328>)
 8002cbc:	f002 ffcc 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8002cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8002cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4815      	ldr	r0, [pc, #84]	; (8002d2c <MX_GPIO_Init+0x32c>)
 8002cd6:	f002 ffbf 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8002cda:	23c2      	movs	r3, #194	; 0xc2
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cee:	4619      	mov	r1, r3
 8002cf0:	480b      	ldr	r0, [pc, #44]	; (8002d20 <MX_GPIO_Init+0x320>)
 8002cf2:	f002 ffb1 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8002cf6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	2300      	movs	r3, #0
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d08:	2307      	movs	r3, #7
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d10:	4619      	mov	r1, r3
 8002d12:	e011      	b.n	8002d38 <MX_GPIO_Init+0x338>
 8002d14:	46020c00 	.word	0x46020c00
 8002d18:	42020400 	.word	0x42020400
 8002d1c:	42022000 	.word	0x42022000
 8002d20:	42021c00 	.word	0x42021c00
 8002d24:	42021800 	.word	0x42021800
 8002d28:	42021400 	.word	0x42021400
 8002d2c:	42020800 	.word	0x42020800
 8002d30:	42020000 	.word	0x42020000
 8002d34:	42020c00 	.word	0x42020c00
 8002d38:	4855      	ldr	r0, [pc, #340]	; (8002e90 <MX_GPIO_Init+0x490>)
 8002d3a:	f002 ff8d 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8002d3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002d50:	230a      	movs	r3, #10
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d58:	4619      	mov	r1, r3
 8002d5a:	484d      	ldr	r0, [pc, #308]	; (8002e90 <MX_GPIO_Init+0x490>)
 8002d5c:	f002 ff7c 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8002d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8002d72:	2306      	movs	r3, #6
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4845      	ldr	r0, [pc, #276]	; (8002e94 <MX_GPIO_Init+0x494>)
 8002d7e:	f002 ff6b 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8002d82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	2300      	movs	r3, #0
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8002d94:	2303      	movs	r3, #3
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	483e      	ldr	r0, [pc, #248]	; (8002e98 <MX_GPIO_Init+0x498>)
 8002da0:	f002 ff5a 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8002da4:	2340      	movs	r3, #64	; 0x40
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da8:	2301      	movs	r3, #1
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	2300      	movs	r3, #0
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8002db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db8:	4619      	mov	r1, r3
 8002dba:	4838      	ldr	r0, [pc, #224]	; (8002e9c <MX_GPIO_Init+0x49c>)
 8002dbc:	f002 ff4c 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 8002dc0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4832      	ldr	r0, [pc, #200]	; (8002ea0 <MX_GPIO_Init+0x4a0>)
 8002dd6:	f002 ff3f 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8002dda:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de0:	2300      	movs	r3, #0
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dec:	4619      	mov	r1, r3
 8002dee:	482a      	ldr	r0, [pc, #168]	; (8002e98 <MX_GPIO_Init+0x498>)
 8002df0:	f002 ff32 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8002df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e06:	4619      	mov	r1, r3
 8002e08:	4822      	ldr	r0, [pc, #136]	; (8002e94 <MX_GPIO_Init+0x494>)
 8002e0a:	f002 ff25 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8002e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e20:	2305      	movs	r3, #5
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e28:	4619      	mov	r1, r3
 8002e2a:	481e      	ldr	r0, [pc, #120]	; (8002ea4 <MX_GPIO_Init+0x4a4>)
 8002e2c:	f002 ff14 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 8002e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e36:	2303      	movs	r3, #3
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 8002e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e42:	4619      	mov	r1, r3
 8002e44:	4817      	ldr	r0, [pc, #92]	; (8002ea4 <MX_GPIO_Init+0x4a4>)
 8002e46:	f002 ff07 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8002e4a:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e50:	2301      	movs	r3, #1
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e60:	4619      	mov	r1, r3
 8002e62:	480c      	ldr	r0, [pc, #48]	; (8002e94 <MX_GPIO_Init+0x494>)
 8002e64:	f002 fef8 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e74:	2300      	movs	r3, #0
 8002e76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8002e78:	2306      	movs	r3, #6
 8002e7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8002e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e80:	4619      	mov	r1, r3
 8002e82:	4808      	ldr	r0, [pc, #32]	; (8002ea4 <MX_GPIO_Init+0x4a4>)
 8002e84:	f002 fee8 	bl	8005c58 <HAL_GPIO_Init>

}
 8002e88:	bf00      	nop
 8002e8a:	3738      	adds	r7, #56	; 0x38
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	42020000 	.word	0x42020000
 8002e94:	42021400 	.word	0x42021400
 8002e98:	42021000 	.word	0x42021000
 8002e9c:	42021800 	.word	0x42021800
 8002ea0:	42020c00 	.word	0x42020c00
 8002ea4:	42020400 	.word	0x42020400

08002ea8 <CAM_GPIO_Init>:

/* USER CODE BEGIN 2 */
void CAM_GPIO_Init(void){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef InitStruct = {0};
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <CAM_GPIO_Init+0x88>)
 8002ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <CAM_GPIO_Init+0x88>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <CAM_GPIO_Init+0x88>)
 8002ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAM_XSDN_GPIO_Port, CAM_XSDN_Pin, GPIO_PIN_RESET);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2108      	movs	r1, #8
 8002ede:	4815      	ldr	r0, [pc, #84]	; (8002f34 <CAM_GPIO_Init+0x8c>)
 8002ee0:	f003 f988 	bl	80061f4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAM_RSTI_GPIO_Port, CAM_RSTI_Pin, GPIO_PIN_SET);
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	4812      	ldr	r0, [pc, #72]	; (8002f34 <CAM_GPIO_Init+0x8c>)
 8002eea:	f003 f983 	bl	80061f4 <HAL_GPIO_WritePin>

	InitStruct.Pin       = CAM_PLUG_Pin;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	607b      	str	r3, [r7, #4]
	InitStruct.Pull      = GPIO_PULLUP;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
	InitStruct.Mode      = GPIO_MODE_INPUT;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
	InitStruct.Alternate = GPIO_AF10_DCMI;
 8002efa:	230a      	movs	r3, #10
 8002efc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CAM_PLUG_GPIO_Port, &InitStruct);
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	480c      	ldr	r0, [pc, #48]	; (8002f34 <CAM_GPIO_Init+0x8c>)
 8002f04:	f002 fea8 	bl	8005c58 <HAL_GPIO_Init>

	//Init Reset Pin
	InitStruct.Pin = CAM_RSTI_Pin | CAM_XSDN_Pin;
 8002f08:	230c      	movs	r3, #12
 8002f0a:	607b      	str	r3, [r7, #4]
	InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
	InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
	InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
	InitStruct.Alternate = GPIO_AF10_DCMI;
 8002f18:	230a      	movs	r3, #10
 8002f1a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(CAM_RSTI_GPIO_Port, &InitStruct);
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4804      	ldr	r0, [pc, #16]	; (8002f34 <CAM_GPIO_Init+0x8c>)
 8002f22:	f002 fe99 	bl	8005c58 <HAL_GPIO_Init>
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	46020c00 	.word	0x46020c00
 8002f34:	42022000 	.word	0x42022000

08002f38 <Ram_GPIO_Init>:
     InitStruct.Alternate = GPIO_AF4_DCMI;
     HAL_GPIO_Init(CAM_PIXCLK_GPIO_Port, &InitStruct);

}

void Ram_GPIO_Init(void){
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08c      	sub	sp, #48	; 0x30
 8002f3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef InitStruct = {0};
 8002f3e:	f107 031c 	add.w	r3, r7, #28
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
 8002f4c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f4e:	4b6f      	ldr	r3, [pc, #444]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f54:	4a6d      	ldr	r2, [pc, #436]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f5e:	4b6b      	ldr	r3, [pc, #428]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f6c:	4b67      	ldr	r3, [pc, #412]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f72:	4a66      	ldr	r2, [pc, #408]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002f74:	f043 0310 	orr.w	r3, r3, #16
 8002f78:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f7c:	4b63      	ldr	r3, [pc, #396]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8a:	4b60      	ldr	r3, [pc, #384]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f90:	4a5e      	ldr	r2, [pc, #376]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002f92:	f043 0308 	orr.w	r3, r3, #8
 8002f96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f9a:	4b5c      	ldr	r3, [pc, #368]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fa8:	4b58      	ldr	r3, [pc, #352]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fae:	4a57      	ldr	r2, [pc, #348]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002fb0:	f043 0320 	orr.w	r3, r3, #32
 8002fb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fb8:	4b54      	ldr	r3, [pc, #336]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fc6:	4b51      	ldr	r3, [pc, #324]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fcc:	4a4f      	ldr	r2, [pc, #316]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fd6:	4b4d      	ldr	r3, [pc, #308]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe4:	4b49      	ldr	r3, [pc, #292]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fea:	4a48      	ldr	r2, [pc, #288]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ff4:	4b45      	ldr	r3, [pc, #276]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8002ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003002:	4b42      	ldr	r3, [pc, #264]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003008:	4a40      	ldr	r2, [pc, #256]	; (800310c <Ram_GPIO_Init+0x1d4>)
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003012:	4b3e      	ldr	r3, [pc, #248]	; (800310c <Ram_GPIO_Init+0x1d4>)
 8003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	683b      	ldr	r3, [r7, #0]

    InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8003020:	2301      	movs	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302c:	2303      	movs	r3, #3
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8003030:	2303      	movs	r3, #3
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &InitStruct);
 8003034:	f107 031c 	add.w	r3, r7, #28
 8003038:	4619      	mov	r1, r3
 800303a:	4835      	ldr	r0, [pc, #212]	; (8003110 <Ram_GPIO_Init+0x1d8>)
 800303c:	f002 fe0c 	bl	8005c58 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8003040:	2308      	movs	r3, #8
 8003042:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8003044:	2302      	movs	r3, #2
 8003046:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304c:	2303      	movs	r3, #3
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8003050:	2303      	movs	r3, #3
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &InitStruct);
 8003054:	f107 031c 	add.w	r3, r7, #28
 8003058:	4619      	mov	r1, r3
 800305a:	482e      	ldr	r0, [pc, #184]	; (8003114 <Ram_GPIO_Init+0x1dc>)
 800305c:	f002 fdfc 	bl	8005c58 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2303      	movs	r3, #3
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8003070:	230a      	movs	r3, #10
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &InitStruct);
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	4619      	mov	r1, r3
 800307a:	4827      	ldr	r0, [pc, #156]	; (8003118 <Ram_GPIO_Init+0x1e0>)
 800307c:	f002 fdec 	bl	8005c58 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8003080:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003084:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 8003086:	2302      	movs	r3, #2
 8003088:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308e:	2303      	movs	r3, #3
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8003092:	230a      	movs	r3, #10
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &InitStruct);
 8003096:	f107 031c 	add.w	r3, r7, #28
 800309a:	4619      	mov	r1, r3
 800309c:	481f      	ldr	r0, [pc, #124]	; (800311c <Ram_GPIO_Init+0x1e4>)
 800309e:	f002 fddb 	bl	8005c58 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 80030a2:	2304      	movs	r3, #4
 80030a4:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a6:	2302      	movs	r3, #2
 80030a8:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ae:	2303      	movs	r3, #3
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80030b2:	2303      	movs	r3, #3
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &InitStruct);
 80030b6:	f107 031c 	add.w	r3, r7, #28
 80030ba:	4619      	mov	r1, r3
 80030bc:	4818      	ldr	r0, [pc, #96]	; (8003120 <Ram_GPIO_Init+0x1e8>)
 80030be:	f002 fdcb 	bl	8005c58 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 80030c2:	2308      	movs	r3, #8
 80030c4:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	2302      	movs	r3, #2
 80030c8:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ce:	2303      	movs	r3, #3
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80030d2:	230a      	movs	r3, #10
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &InitStruct);
 80030d6:	f107 031c 	add.w	r3, r7, #28
 80030da:	4619      	mov	r1, r3
 80030dc:	4811      	ldr	r0, [pc, #68]	; (8003124 <Ram_GPIO_Init+0x1ec>)
 80030de:	f002 fdbb 	bl	8005c58 <HAL_GPIO_Init>

    InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80030e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030e6:	61fb      	str	r3, [r7, #28]
    InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	623b      	str	r3, [r7, #32]
    InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
    InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f0:	2303      	movs	r3, #3
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
    InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80030f4:	230a      	movs	r3, #10
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &InitStruct);
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	4619      	mov	r1, r3
 80030fe:	480a      	ldr	r0, [pc, #40]	; (8003128 <Ram_GPIO_Init+0x1f0>)
 8003100:	f002 fdaa 	bl	8005c58 <HAL_GPIO_Init>
}
 8003104:	bf00      	nop
 8003106:	3730      	adds	r7, #48	; 0x30
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	46020c00 	.word	0x46020c00
 8003110:	42022000 	.word	0x42022000
 8003114:	42021000 	.word	0x42021000
 8003118:	42020c00 	.word	0x42020c00
 800311c:	42021400 	.word	0x42021400
 8003120:	42021c00 	.word	0x42021c00
 8003124:	42020800 	.word	0x42020800
 8003128:	42020400 	.word	0x42020400

0800312c <MotionSensor_GPIO_Init>:

void MotionSensor_GPIO_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = Mems_ISM330DLC_INT1_Pin;
 8003140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003144:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(Mems_ISM330DLC_INT1_GPIO_Port, &GPIO_InitStruct);
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	4619      	mov	r1, r3
 800315a:	4803      	ldr	r0, [pc, #12]	; (8003168 <MotionSensor_GPIO_Init+0x3c>)
 800315c:	f002 fd7c 	bl	8005c58 <HAL_GPIO_Init>
}
 8003160:	bf00      	nop
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	42021000 	.word	0x42021000

0800316c <HAL_I2C_MspInit>:
  /* USER CODE END I2C2_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b0be      	sub	sp, #248	; 0xf8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003184:	f107 0318 	add.w	r3, r7, #24
 8003188:	22c8      	movs	r2, #200	; 0xc8
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f009 fe1d 	bl	800cdcc <memset>
  if(i2cHandle->Instance==I2C1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a53      	ldr	r2, [pc, #332]	; (80032e4 <HAL_I2C_MspInit+0x178>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d153      	bne.n	8003244 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800319c:	f04f 0240 	mov.w	r2, #64	; 0x40
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031ae:	f107 0318 	add.w	r3, r7, #24
 80031b2:	4618      	mov	r0, r3
 80031b4:	f006 fc90 	bl	8009ad8 <HAL_RCCEx_PeriphCLKConfig>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80031be:	f000 fa69 	bl	8003694 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c2:	4b49      	ldr	r3, [pc, #292]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 80031c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c8:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 80031ca:	f043 0302 	orr.w	r3, r3, #2
 80031ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031d2:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 80031d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80031e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031e8:	2312      	movs	r3, #18
 80031ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031fa:	2304      	movs	r3, #4
 80031fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003200:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003204:	4619      	mov	r1, r3
 8003206:	4839      	ldr	r0, [pc, #228]	; (80032ec <HAL_I2C_MspInit+0x180>)
 8003208:	f002 fd26 	bl	8005c58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800320c:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 800320e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003212:	4a35      	ldr	r2, [pc, #212]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 8003214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003218:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800321c:	4b32      	ldr	r3, [pc, #200]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 800321e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 800322a:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	4a2e      	ldr	r2, [pc, #184]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 8003230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003234:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C1_RELEASE_RESET();
 8003236:	4b2c      	ldr	r3, [pc, #176]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 8003238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323a:	4a2b      	ldr	r2, [pc, #172]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 800323c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003240:	6753      	str	r3, [r2, #116]	; 0x74
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003242:	e04a      	b.n	80032da <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a29      	ldr	r2, [pc, #164]	; (80032f0 <HAL_I2C_MspInit+0x184>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d145      	bne.n	80032da <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800324e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003260:	f107 0318 	add.w	r3, r7, #24
 8003264:	4618      	mov	r0, r3
 8003266:	f006 fc37 	bl	8009ad8 <HAL_RCCEx_PeriphCLKConfig>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8003270:	f000 fa10 	bl	8003694 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003274:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 8003276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800327a:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 800327c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003280:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003284:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 8003286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003292:	2330      	movs	r3, #48	; 0x30
 8003294:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003298:	2312      	movs	r3, #18
 800329a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80032aa:	2304      	movs	r3, #4
 80032ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80032b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032b4:	4619      	mov	r1, r3
 80032b6:	480f      	ldr	r0, [pc, #60]	; (80032f4 <HAL_I2C_MspInit+0x188>)
 80032b8:	f002 fcce 	bl	8005c58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 80032be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032c2:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 80032c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032c8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_I2C_MspInit+0x17c>)
 80032ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
}
 80032da:	bf00      	nop
 80032dc:	37f8      	adds	r7, #248	; 0xf8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40005400 	.word	0x40005400
 80032e8:	46020c00 	.word	0x46020c00
 80032ec:	42020400 	.word	0x42020400
 80032f0:	40005800 	.word	0x40005800
 80032f4:	42021c00 	.word	0x42021c00

080032f8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a17      	ldr	r2, [pc, #92]	; (8003364 <HAL_I2C_MspDeInit+0x6c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d112      	bne.n	8003330 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800330a:	4b17      	ldr	r3, [pc, #92]	; (8003368 <HAL_I2C_MspDeInit+0x70>)
 800330c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003310:	4a15      	ldr	r2, [pc, #84]	; (8003368 <HAL_I2C_MspDeInit+0x70>)
 8003312:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003316:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800331a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800331e:	4813      	ldr	r0, [pc, #76]	; (800336c <HAL_I2C_MspDeInit+0x74>)
 8003320:	f002 fe72 	bl	8006008 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003328:	4810      	ldr	r0, [pc, #64]	; (800336c <HAL_I2C_MspDeInit+0x74>)
 800332a:	f002 fe6d 	bl	8006008 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 800332e:	e014      	b.n	800335a <HAL_I2C_MspDeInit+0x62>
  else if(i2cHandle->Instance==I2C2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <HAL_I2C_MspDeInit+0x78>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10f      	bne.n	800335a <HAL_I2C_MspDeInit+0x62>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_I2C_MspDeInit+0x70>)
 800333c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003340:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_I2C_MspDeInit+0x70>)
 8003342:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003346:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 800334a:	2110      	movs	r1, #16
 800334c:	4809      	ldr	r0, [pc, #36]	; (8003374 <HAL_I2C_MspDeInit+0x7c>)
 800334e:	f002 fe5b 	bl	8006008 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5);
 8003352:	2120      	movs	r1, #32
 8003354:	4807      	ldr	r0, [pc, #28]	; (8003374 <HAL_I2C_MspDeInit+0x7c>)
 8003356:	f002 fe57 	bl	8006008 <HAL_GPIO_DeInit>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40005400 	.word	0x40005400
 8003368:	46020c00 	.word	0x46020c00
 800336c:	42020400 	.word	0x42020400
 8003370:	40005800 	.word	0x40005800
 8003374:	42021c00 	.word	0x42021c00

08003378 <I2C1_Init>:

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <I2C1_Init+0x74>)
 800337e:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <I2C1_Init+0x78>)
 8003380:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0xB0C03E40;
 8003382:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <I2C1_Init+0x74>)
 8003384:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <I2C1_Init+0x7c>)
 8003386:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8003388:	4b18      	ldr	r3, [pc, #96]	; (80033ec <I2C1_Init+0x74>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <I2C1_Init+0x74>)
 8003390:	2201      	movs	r2, #1
 8003392:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003394:	4b15      	ldr	r3, [pc, #84]	; (80033ec <I2C1_Init+0x74>)
 8003396:	2200      	movs	r2, #0
 8003398:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <I2C1_Init+0x74>)
 800339c:	2200      	movs	r2, #0
 800339e:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <I2C1_Init+0x74>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <I2C1_Init+0x74>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <I2C1_Init+0x74>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033b2:	480e      	ldr	r0, [pc, #56]	; (80033ec <I2C1_Init+0x74>)
 80033b4:	f002 ff50 	bl	8006258 <HAL_I2C_Init>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <I2C1_Init+0x4a>
	  {
	    Error_Handler();
 80033be:	f000 f969 	bl	8003694 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033c2:	2100      	movs	r1, #0
 80033c4:	4809      	ldr	r0, [pc, #36]	; (80033ec <I2C1_Init+0x74>)
 80033c6:	f003 fcd9 	bl	8006d7c <HAL_I2CEx_ConfigAnalogFilter>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <I2C1_Init+0x5c>
	  {
	    Error_Handler();
 80033d0:	f000 f960 	bl	8003694 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033d4:	2100      	movs	r1, #0
 80033d6:	4805      	ldr	r0, [pc, #20]	; (80033ec <I2C1_Init+0x74>)
 80033d8:	f003 fd1b 	bl	8006e12 <HAL_I2CEx_ConfigDigitalFilter>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C1_Init+0x6e>
	  {
	    Error_Handler();
 80033e2:	f000 f957 	bl	8003694 <Error_Handler>
	  }

}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20001480 	.word	0x20001480
 80033f0:	40005400 	.word	0x40005400
 80033f4:	b0c03e40 	.word	0xb0c03e40

080033f8 <I2C2_Init>:

void I2C2_Init(void){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0

	  hi2c2.Instance = I2C2;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <I2C2_Init+0x74>)
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <I2C2_Init+0x78>)
 8003400:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.Timing = 0x30909DEC;
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <I2C2_Init+0x74>)
 8003404:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <I2C2_Init+0x7c>)
 8003406:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.OwnAddress1 = 0;
 8003408:	4b18      	ldr	r3, [pc, #96]	; (800346c <I2C2_Init+0x74>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800340e:	4b17      	ldr	r3, [pc, #92]	; (800346c <I2C2_Init+0x74>)
 8003410:	2201      	movs	r2, #1
 8003412:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003414:	4b15      	ldr	r3, [pc, #84]	; (800346c <I2C2_Init+0x74>)
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.OwnAddress2 = 0;
 800341a:	4b14      	ldr	r3, [pc, #80]	; (800346c <I2C2_Init+0x74>)
 800341c:	2200      	movs	r2, #0
 800341e:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <I2C2_Init+0x74>)
 8003422:	2200      	movs	r2, #0
 8003424:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <I2C2_Init+0x74>)
 8003428:	2200      	movs	r2, #0
 800342a:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <I2C2_Init+0x74>)
 800342e:	2200      	movs	r2, #0
 8003430:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003432:	480e      	ldr	r0, [pc, #56]	; (800346c <I2C2_Init+0x74>)
 8003434:	f002 ff10 	bl	8006258 <HAL_I2C_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <I2C2_Init+0x4a>
	  {
	    Error_Handler();
 800343e:	f000 f929 	bl	8003694 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003442:	2100      	movs	r1, #0
 8003444:	4809      	ldr	r0, [pc, #36]	; (800346c <I2C2_Init+0x74>)
 8003446:	f003 fc99 	bl	8006d7c <HAL_I2CEx_ConfigAnalogFilter>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <I2C2_Init+0x5c>
	  {
	    Error_Handler();
 8003450:	f000 f920 	bl	8003694 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003454:	2100      	movs	r1, #0
 8003456:	4805      	ldr	r0, [pc, #20]	; (800346c <I2C2_Init+0x74>)
 8003458:	f003 fcdb 	bl	8006e12 <HAL_I2CEx_ConfigDigitalFilter>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C2_Init+0x6e>
	  {
	    Error_Handler();
 8003462:	f000 f917 	bl	8003694 <Error_Handler>
	  }

}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200014cc 	.word	0x200014cc
 8003470:	40005800 	.word	0x40005800
 8003474:	30909dec 	.word	0x30909dec

08003478 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800347c:	f003 fd16 	bl	8006eac <HAL_ICACHE_Enable>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8003486:	f000 f905 	bl	8003694 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003496:	f000 fc93 	bl	8003dc0 <HAL_Init>

  /* USER CODE BEGIN Init */
uint32_t time = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
uint32_t i = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
uint32_t j = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034a6:	f000 f879 	bl	800359c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80034aa:	f000 f8d3 	bl	8003654 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init(); //LED GPIO
 80034ae:	f7ff faa7 	bl	8002a00 <MX_GPIO_Init>
  //MX_DCMI_Init();
  //MX_GPDMA1_Init();
  //MX_OCTOSPI1_Init();
  MX_ICACHE_Init();
 80034b2:	f7ff ffe1 	bl	8003478 <MX_ICACHE_Init>
  MX_DCACHE1_Init();
 80034b6:	f7ff f8b7 	bl	8002628 <MX_DCACHE1_Init>
  //MX_I2C1_Init();
  //MX_I2C2_Init();
  /* USER CODE BEGIN 2 */
  float temperature = 0;
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	607b      	str	r3, [r7, #4]
  float humidity = 0;
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	603b      	str	r3, [r7, #0]
  BSP_TempHumSensorInit();
 80034c6:	f7fd f9a3 	bl	8000810 <BSP_TempHumSensorInit>
  for(uint8_t i = 0; i < 10; i++){
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]
 80034ce:	e00e      	b.n	80034ee <main+0x5e>
	  BSP_ReadTemperature(&temperature);
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd f9ba 	bl	800084c <BSP_ReadTemperature>
	  BSP_ReadHumidity(&humidity);
 80034d8:	463b      	mov	r3, r7
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd f9c6 	bl	800086c <BSP_ReadHumidity>
	  HAL_Delay(1200);
 80034e0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80034e4:	f000 fcba 	bl	8003e5c <HAL_Delay>
  for(uint8_t i = 0; i < 10; i++){
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	3301      	adds	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	d9ed      	bls.n	80034d0 <main+0x40>
  }

  BSP_MotionSensorInit();
 80034f4:	f7fd f9ca 	bl	800088c <BSP_MotionSensorInit>
  time = HAL_GetTick();
 80034f8:	f000 fca4 	bl	8003e44 <HAL_GetTick>
 80034fc:	60b8      	str	r0, [r7, #8]
  while(HAL_GetTick() < time + 1000){
 80034fe:	e029      	b.n	8003554 <main+0xc4>
    if(BSP_ReadAccelXYZ(&AccelX[i], &AccelY[i], &AccelZ[i]) == 0)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <main+0xf0>)
 8003506:	1898      	adds	r0, r3, r2
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <main+0xf4>)
 800350e:	1899      	adds	r1, r3, r2
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <main+0xf8>)
 8003516:	4413      	add	r3, r2
 8003518:	461a      	mov	r2, r3
 800351a:	f7fd fa37 	bl	800098c <BSP_ReadAccelXYZ>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <main+0x9a>
    {
    	i++;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3301      	adds	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
    }
    if(BSP_ReadGyroXYZ(&GyroX[j], &GyroY[j], &GyroZ[j]) == 0)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4a17      	ldr	r2, [pc, #92]	; (800358c <main+0xfc>)
 8003530:	1898      	adds	r0, r3, r2
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4a16      	ldr	r2, [pc, #88]	; (8003590 <main+0x100>)
 8003538:	1899      	adds	r1, r3, r2
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4a15      	ldr	r2, [pc, #84]	; (8003594 <main+0x104>)
 8003540:	4413      	add	r3, r2
 8003542:	461a      	mov	r2, r3
 8003544:	f7fd fa3e 	bl	80009c4 <BSP_ReadGyroXYZ>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d102      	bne.n	8003554 <main+0xc4>
    {
    	j++;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	3301      	adds	r3, #1
 8003552:	613b      	str	r3, [r7, #16]
  while(HAL_GetTick() < time + 1000){
 8003554:	f000 fc76 	bl	8003e44 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003560:	429a      	cmp	r2, r3
 8003562:	d3cd      	bcc.n	8003500 <main+0x70>
    }
  }

  BSP_RamInit();
 8003564:	f7fd fa4a 	bl	80009fc <BSP_RamInit>
  BSP_RamErase();
 8003568:	f7fd fa54 	bl	8000a14 <BSP_RamErase>
  BSP_CameraInit();
 800356c:	f7fd f8d9 	bl	8000722 <BSP_CameraInit>
  BSP_CameraStart((uint8_t*)CameraBuff);
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <main+0x108>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7fd f8e3 	bl	8000740 <BSP_CameraStart>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800357a:	f7fe ffff 	bl	800257c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800357e:	e7fe      	b.n	800357e <main+0xee>
 8003580:	20001518 	.word	0x20001518
 8003584:	200015e0 	.word	0x200015e0
 8003588:	200016a8 	.word	0x200016a8
 800358c:	20001770 	.word	0x20001770
 8003590:	20001838 	.word	0x20001838
 8003594:	20001900 	.word	0x20001900
 8003598:	20000018 	.word	0x20000018

0800359c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b09e      	sub	sp, #120	; 0x78
 80035a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035a2:	f107 0318 	add.w	r3, r7, #24
 80035a6:	2260      	movs	r2, #96	; 0x60
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f009 fc0e 	bl	800cdcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035b0:	463b      	mov	r3, r7
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	60da      	str	r2, [r3, #12]
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80035c0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80035c4:	f004 feea 	bl	800839c <HAL_PWREx_ControlVoltageScaling>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80035ce:	f000 f861 	bl	8003694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80035d2:	2310      	movs	r3, #16
 80035d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80035d6:	2301      	movs	r3, #1
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80035da:	2310      	movs	r3, #16
 80035dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80035de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035e4:	2302      	movs	r3, #2
 80035e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80035e8:	2301      	movs	r3, #1
 80035ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80035ec:	2300      	movs	r3, #0
 80035ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80035f0:	2301      	movs	r3, #1
 80035f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80035f4:	2350      	movs	r3, #80	; 0x50
 80035f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80035f8:	2302      	movs	r3, #2
 80035fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80035fc:	2302      	movs	r3, #2
 80035fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003600:	2302      	movs	r3, #2
 8003602:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8003604:	2300      	movs	r3, #0
 8003606:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800360c:	f107 0318 	add.w	r3, r7, #24
 8003610:	4618      	mov	r0, r3
 8003612:	f004 ffa5 	bl	8008560 <HAL_RCC_OscConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800361c:	f000 f83a 	bl	8003694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003620:	231f      	movs	r3, #31
 8003622:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003624:	2303      	movs	r3, #3
 8003626:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003638:	463b      	mov	r3, r7
 800363a:	2104      	movs	r1, #4
 800363c:	4618      	mov	r0, r3
 800363e:	f005 fe65 	bl	800930c <HAL_RCC_ClockConfig>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8003648:	f000 f824 	bl	8003694 <Error_Handler>
  }
}
 800364c:	bf00      	nop
 800364e:	3778      	adds	r7, #120	; 0x78
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8003658:	f004 ff72 	bl	8008540 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800365c:	2002      	movs	r0, #2
 800365e:	f004 ff1f 	bl	80084a0 <HAL_PWREx_ConfigSupply>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8003668:	f000 f814 	bl	8003694 <Error_Handler>
  }
}
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a04      	ldr	r2, [pc, #16]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d101      	bne.n	8003686 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003682:	f000 fbcb 	bl	8003e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40001000 	.word	0x40001000

08003694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003698:	b672      	cpsid	i
}
 800369a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800369c:	e7fe      	b.n	800369c <Error_Handler+0x8>
	...

080036a0 <HAL_OSPI_MspInit>:
  /* USER CODE END OCTOSPI1_Init 2 */

}

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b0c4      	sub	sp, #272	; 0x110
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036ae:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036c4:	22c8      	movs	r2, #200	; 0xc8
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f009 fb7f 	bl	800cdcc <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80036ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4aa4      	ldr	r2, [pc, #656]	; (800396c <HAL_OSPI_MspInit+0x2cc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	f040 813f 	bne.w	8003960 <HAL_OSPI_MspInit+0x2c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80036e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036f8:	4618      	mov	r0, r3
 80036fa:	f006 f9ed 	bl	8009ad8 <HAL_RCCEx_PeriphCLKConfig>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8003704:	f7ff ffc6 	bl	8003694 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8003708:	4b99      	ldr	r3, [pc, #612]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 800370a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370e:	4a98      	ldr	r2, [pc, #608]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 8003710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003714:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003718:	4b95      	ldr	r3, [pc, #596]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 800371a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800371e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003726:	4b92      	ldr	r3, [pc, #584]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	4a90      	ldr	r2, [pc, #576]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 800372e:	f043 0310 	orr.w	r3, r3, #16
 8003732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003736:	4b8e      	ldr	r3, [pc, #568]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003744:	4b8a      	ldr	r3, [pc, #552]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 8003746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800374a:	4a89      	ldr	r2, [pc, #548]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003754:	4b86      	ldr	r3, [pc, #536]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 8003756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003762:	4b83      	ldr	r3, [pc, #524]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 8003764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003768:	4a81      	ldr	r2, [pc, #516]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 800376a:	f043 0310 	orr.w	r3, r3, #16
 800376e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003772:	4b7f      	ldr	r3, [pc, #508]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 8003774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003780:	4b7b      	ldr	r3, [pc, #492]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 8003782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003786:	4a7a      	ldr	r2, [pc, #488]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 8003788:	f043 0308 	orr.w	r3, r3, #8
 800378c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003790:	4b77      	ldr	r3, [pc, #476]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 8003792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800379e:	4b74      	ldr	r3, [pc, #464]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 80037a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037a4:	4a72      	ldr	r2, [pc, #456]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 80037a6:	f043 0320 	orr.w	r3, r3, #32
 80037aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037ae:	4b70      	ldr	r3, [pc, #448]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 80037b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80037bc:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 80037be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c2:	4a6b      	ldr	r2, [pc, #428]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 80037c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037cc:	4b68      	ldr	r3, [pc, #416]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 80037ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037da:	4b65      	ldr	r3, [pc, #404]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 80037dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e0:	4a63      	ldr	r2, [pc, #396]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037ea:	4b61      	ldr	r3, [pc, #388]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 80037ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f0:	f003 0204 	and.w	r2, r3, #4
 80037f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003802:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003806:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003808:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 800380a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800380e:	4a58      	ldr	r2, [pc, #352]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 8003810:	f043 0302 	orr.w	r3, r3, #2
 8003814:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003818:	4b55      	ldr	r3, [pc, #340]	; (8003970 <HAL_OSPI_MspInit+0x2d0>)
 800381a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381e:	f003 0202 	and.w	r2, r3, #2
 8003822:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003834:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8003836:	2301      	movs	r3, #1
 8003838:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383c:	2302      	movs	r3, #2
 800383e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003848:	2303      	movs	r3, #3
 800384a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800384e:	2303      	movs	r3, #3
 8003850:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 8003854:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003858:	4619      	mov	r1, r3
 800385a:	4846      	ldr	r0, [pc, #280]	; (8003974 <HAL_OSPI_MspInit+0x2d4>)
 800385c:	f002 f9fc 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8003860:	2308      	movs	r3, #8
 8003862:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003866:	2302      	movs	r3, #2
 8003868:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003872:	2303      	movs	r3, #3
 8003874:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8003878:	2303      	movs	r3, #3
 800387a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 800387e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003882:	4619      	mov	r1, r3
 8003884:	483c      	ldr	r0, [pc, #240]	; (8003978 <HAL_OSPI_MspInit+0x2d8>)
 8003886:	f002 f9e7 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003890:	2302      	movs	r3, #2
 8003892:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389c:	2303      	movs	r3, #3
 800389e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80038a2:	230a      	movs	r3, #10
 80038a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 80038a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80038ac:	4619      	mov	r1, r3
 80038ae:	4833      	ldr	r0, [pc, #204]	; (800397c <HAL_OSPI_MspInit+0x2dc>)
 80038b0:	f002 f9d2 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 80038b4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80038b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2302      	movs	r3, #2
 80038be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c8:	2303      	movs	r3, #3
 80038ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80038ce:	230a      	movs	r3, #10
 80038d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038d4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80038d8:	4619      	mov	r1, r3
 80038da:	4829      	ldr	r0, [pc, #164]	; (8003980 <HAL_OSPI_MspInit+0x2e0>)
 80038dc:	f002 f9bc 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 80038e0:	2304      	movs	r3, #4
 80038e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f2:	2303      	movs	r3, #3
 80038f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80038f8:	2303      	movs	r3, #3
 80038fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 80038fe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003902:	4619      	mov	r1, r3
 8003904:	481f      	ldr	r0, [pc, #124]	; (8003984 <HAL_OSPI_MspInit+0x2e4>)
 8003906:	f002 f9a7 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 800390a:	2308      	movs	r3, #8
 800390c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003910:	2302      	movs	r3, #2
 8003912:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391c:	2303      	movs	r3, #3
 800391e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8003922:	230a      	movs	r3, #10
 8003924:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 8003928:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800392c:	4619      	mov	r1, r3
 800392e:	4816      	ldr	r0, [pc, #88]	; (8003988 <HAL_OSPI_MspInit+0x2e8>)
 8003930:	f002 f992 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 8003934:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003938:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003948:	2303      	movs	r3, #3
 800394a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800394e:	230a      	movs	r3, #10
 8003950:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003954:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003958:	4619      	mov	r1, r3
 800395a:	480c      	ldr	r0, [pc, #48]	; (800398c <HAL_OSPI_MspInit+0x2ec>)
 800395c:	f002 f97c 	bl	8005c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8003960:	bf00      	nop
 8003962:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	420d1400 	.word	0x420d1400
 8003970:	46020c00 	.word	0x46020c00
 8003974:	42022000 	.word	0x42022000
 8003978:	42021000 	.word	0x42021000
 800397c:	42020c00 	.word	0x42020c00
 8003980:	42021400 	.word	0x42021400
 8003984:	42021c00 	.word	0x42021c00
 8003988:	42020800 	.word	0x42020800
 800398c:	42020400 	.word	0x42020400

08003990 <OSPI_RamInit>:
  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void OSPI_RamInit(void){
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
	  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8003996:	f107 0308 	add.w	r3, r7, #8
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	611a      	str	r2, [r3, #16]
 80039a6:	615a      	str	r2, [r3, #20]
	  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80039a8:	463b      	mov	r3, r7
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]

	  hospi1.Instance = OCTOSPI1;
 80039b0:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039b2:	4a2b      	ldr	r2, [pc, #172]	; (8003a60 <OSPI_RamInit+0xd0>)
 80039b4:	601a      	str	r2, [r3, #0]
	  hospi1.Init.FifoThreshold = 1;
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	605a      	str	r2, [r3, #4]
	  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80039bc:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
	  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 80039c2:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c8:	60da      	str	r2, [r3, #12]
	  hospi1.Init.DeviceSize = 23;
 80039ca:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039cc:	2217      	movs	r2, #23
 80039ce:	611a      	str	r2, [r3, #16]
	  hospi1.Init.ChipSelectHighTime = 1;
 80039d0:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	615a      	str	r2, [r3, #20]
	  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80039d6:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
	  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80039dc:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039de:	2200      	movs	r2, #0
 80039e0:	61da      	str	r2, [r3, #28]
	  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80039e2:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	621a      	str	r2, [r3, #32]
	  hospi1.Init.ClockPrescaler = 2;
 80039e8:	4b1c      	ldr	r3, [pc, #112]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039ea:	2202      	movs	r2, #2
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
	  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80039ee:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
	  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c
	  hospi1.Init.ChipSelectBoundary = 0;
 80039fc:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <OSPI_RamInit+0xcc>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
	  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8003a02:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <OSPI_RamInit+0xcc>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	635a      	str	r2, [r3, #52]	; 0x34
	  hospi1.Init.MaxTran = 0;
 8003a08:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <OSPI_RamInit+0xcc>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
	  hospi1.Init.Refresh = 320;
 8003a0e:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <OSPI_RamInit+0xcc>)
 8003a10:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a14:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_OSPI_Init(&hospi1);
 8003a16:	4811      	ldr	r0, [pc, #68]	; (8003a5c <OSPI_RamInit+0xcc>)
 8003a18:	f003 fa78 	bl	8006f0c <HAL_OSPI_Init>

	  sOspiManagerCfg.ClkPort = 1;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	60bb      	str	r3, [r7, #8]
	  sOspiManagerCfg.DQSPort = 1;
 8003a20:	2301      	movs	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
	  sOspiManagerCfg.NCSPort = 1;
 8003a24:	2301      	movs	r3, #1
 8003a26:	613b      	str	r3, [r7, #16]
	  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8003a28:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003a2c:	617b      	str	r3, [r7, #20]
	  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <OSPI_RamInit+0xd4>)
 8003a30:	61bb      	str	r3, [r7, #24]
	  HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003a32:	f107 0308 	add.w	r3, r7, #8
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4807      	ldr	r0, [pc, #28]	; (8003a5c <OSPI_RamInit+0xcc>)
 8003a3e:	f003 fc7f 	bl	8007340 <HAL_OSPIM_Config>

	  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	603b      	str	r3, [r7, #0]
	  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
	  HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct);
 8003a4a:	463b      	mov	r3, r7
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4803      	ldr	r0, [pc, #12]	; (8003a5c <OSPI_RamInit+0xcc>)
 8003a50:	f004 fbdc 	bl	800820c <HAL_OSPI_DLYB_SetConfig>


}
 8003a54:	bf00      	nop
 8003a56:	3720      	adds	r7, #32
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	200019c8 	.word	0x200019c8
 8003a60:	420d1400 	.word	0x420d1400
 8003a64:	01000001 	.word	0x01000001

08003a68 <OSPI_EnableMemMappedMode>:

void OSPI_EnableMemMappedMode(void){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b096      	sub	sp, #88	; 0x58
 8003a6c:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	OSPI_MemoryMappedTypeDef sMemMappedCfg;
	  sCommand.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	60bb      	str	r3, [r7, #8]
	  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
	  sCommand.Instruction        = WRITE_CMD;
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	613b      	str	r3, [r7, #16]
	  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	617b      	str	r3, [r7, #20]
	  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
	  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
	  sCommand.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8003a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
	  sCommand.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003a8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
	  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8003a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
	  sCommand.DataMode           = HAL_OSPI_DATA_8_LINES;
 8003a9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003aa0:	643b      	str	r3, [r7, #64]	; 0x40
	  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8003aa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48
	  sCommand.DummyCycles        = DUMMY_CLOCK_CYCLES_WRITE;
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8003aac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003ab0:	653b      	str	r3, [r7, #80]	; 0x50
	  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	657b      	str	r3, [r7, #84]	; 0x54

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ab6:	f107 0308 	add.w	r3, r7, #8
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4816      	ldr	r0, [pc, #88]	; (8003b1c <OSPI_EnableMemMappedMode+0xb4>)
 8003ac2:	f003 fadf 	bl	8007084 <HAL_OSPI_Command>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <OSPI_EnableMemMappedMode+0x68>
	  {
	    Error_Handler();
 8003acc:	f7ff fde2 	bl	8003694 <Error_Handler>
	  }

	  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	60bb      	str	r3, [r7, #8]
	  sCommand.Instruction   = READ_CMD;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
	  sCommand.DummyCycles   = DUMMY_CLOCK_CYCLES_READ;
 8003ad8:	2305      	movs	r3, #5
 8003ada:	64fb      	str	r3, [r7, #76]	; 0x4c

	  if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	480d      	ldr	r0, [pc, #52]	; (8003b1c <OSPI_EnableMemMappedMode+0xb4>)
 8003ae8:	f003 facc 	bl	8007084 <HAL_OSPI_Command>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <OSPI_EnableMemMappedMode+0x8e>
	  {
	    Error_Handler();
 8003af2:	f7ff fdcf 	bl	8003694 <Error_Handler>
	  }

	  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_ENABLE;
 8003af6:	2308      	movs	r3, #8
 8003af8:	603b      	str	r3, [r7, #0]
	  sMemMappedCfg.TimeOutPeriod     = 0x34;
 8003afa:	2334      	movs	r3, #52	; 0x34
 8003afc:	607b      	str	r3, [r7, #4]

	  if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 8003afe:	463b      	mov	r3, r7
 8003b00:	4619      	mov	r1, r3
 8003b02:	4806      	ldr	r0, [pc, #24]	; (8003b1c <OSPI_EnableMemMappedMode+0xb4>)
 8003b04:	f003 fb4b 	bl	800719e <HAL_OSPI_MemoryMapped>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <OSPI_EnableMemMappedMode+0xaa>
	  {
	    Error_Handler();
 8003b0e:	f7ff fdc1 	bl	8003694 <Error_Handler>
	  }
}
 8003b12:	bf00      	nop
 8003b14:	3758      	adds	r7, #88	; 0x58
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200019c8 	.word	0x200019c8

08003b20 <OSPI_DelayBlockConfig>:

void OSPI_DelayBlockConfig(void){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
	  LL_DLYB_CfgTypeDef dlyb_cfg,dlyb_cfg_test;
	  /* Delay block configuration ------------------------------------------------ */
	  HAL_OSPI_DLYB_GetClockPeriod(&hospi1,&dlyb_cfg);
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4813      	ldr	r0, [pc, #76]	; (8003b7c <OSPI_DelayBlockConfig+0x5c>)
 8003b2e:	f004 fbe1 	bl	80082f4 <HAL_OSPI_DLYB_GetClockPeriod>

	  /*when DTR, PhaseSel is divided by 4 (emperic value)*/
	  dlyb_cfg.PhaseSel /=4;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	60fb      	str	r3, [r7, #12]

	  /* save the present configuration for check*/
	  dlyb_cfg_test = dlyb_cfg;
 8003b38:	463b      	mov	r3, r7
 8003b3a:	f107 0208 	add.w	r2, r7, #8
 8003b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b42:	e883 0003 	stmia.w	r3, {r0, r1}

	  /*set delay block configuration*/
	  HAL_OSPI_DLYB_SetConfig(&hospi1,&dlyb_cfg);
 8003b46:	f107 0308 	add.w	r3, r7, #8
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	480b      	ldr	r0, [pc, #44]	; (8003b7c <OSPI_DelayBlockConfig+0x5c>)
 8003b4e:	f004 fb5d 	bl	800820c <HAL_OSPI_DLYB_SetConfig>

	  /*check the set value*/
	  HAL_OSPI_DLYB_GetConfig(&hospi1,&dlyb_cfg);
 8003b52:	f107 0308 	add.w	r3, r7, #8
 8003b56:	4619      	mov	r1, r3
 8003b58:	4808      	ldr	r0, [pc, #32]	; (8003b7c <OSPI_DelayBlockConfig+0x5c>)
 8003b5a:	f004 fb9f 	bl	800829c <HAL_OSPI_DLYB_GetConfig>
	  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d103      	bne.n	8003b6e <OSPI_DelayBlockConfig+0x4e>
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d001      	beq.n	8003b72 <OSPI_DelayBlockConfig+0x52>
	  {
	    Error_Handler();
 8003b6e:	f7ff fd91 	bl	8003694 <Error_Handler>
	  }
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200019c8 	.word	0x200019c8

08003b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <HAL_MspInit+0x30>)
 8003b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8c:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <HAL_MspInit+0x30>)
 8003b8e:	f043 0304 	orr.w	r3, r3, #4
 8003b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_MspInit+0x30>)
 8003b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	46020c00 	.word	0x46020c00

08003bb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08e      	sub	sp, #56	; 0x38
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003bc4:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <HAL_InitTick+0xcc>)
 8003bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bca:	4a2d      	ldr	r2, [pc, #180]	; (8003c80 <HAL_InitTick+0xcc>)
 8003bcc:	f043 0310 	orr.w	r3, r3, #16
 8003bd0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003bd4:	4b2a      	ldr	r3, [pc, #168]	; (8003c80 <HAL_InitTick+0xcc>)
 8003bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003be2:	f107 0210 	add.w	r2, r7, #16
 8003be6:	f107 0314 	add.w	r3, r7, #20
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f005 feb5 	bl	800995c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003bf2:	f005 fe9f 	bl	8009934 <HAL_RCC_GetPCLK1Freq>
 8003bf6:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <HAL_InitTick+0xd0>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	0c9b      	lsrs	r3, r3, #18
 8003c02:	3b01      	subs	r3, #1
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_InitTick+0xd4>)
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <HAL_InitTick+0xd8>)
 8003c0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003c0c:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <HAL_InitTick+0xd4>)
 8003c0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003c14:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <HAL_InitTick+0xd4>)
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <HAL_InitTick+0xd4>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <HAL_InitTick+0xd4>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8003c26:	4818      	ldr	r0, [pc, #96]	; (8003c88 <HAL_InitTick+0xd4>)
 8003c28:	f006 fe46 	bl	800a8b8 <HAL_TIM_Base_Init>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8003c32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d118      	bne.n	8003c6c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003c3a:	4813      	ldr	r0, [pc, #76]	; (8003c88 <HAL_InitTick+0xd4>)
 8003c3c:	f006 fe9e 	bl	800a97c <HAL_TIM_Base_Start_IT>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8003c46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10e      	bne.n	8003c6c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b0f      	cmp	r3, #15
 8003c52:	d808      	bhi.n	8003c66 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8003c54:	2200      	movs	r2, #0
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	2031      	movs	r0, #49	; 0x31
 8003c5a:	f000 f9db 	bl	8004014 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c5e:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <HAL_InitTick+0xdc>)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	e002      	b.n	8003c6c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003c6c:	2031      	movs	r0, #49	; 0x31
 8003c6e:	f000 f9eb 	bl	8004048 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8003c72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3738      	adds	r7, #56	; 0x38
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	46020c00 	.word	0x46020c00
 8003c84:	431bde83 	.word	0x431bde83
 8003c88:	20001a24 	.word	0x20001a24
 8003c8c:	40001000 	.word	0x40001000
 8003c90:	20000020 	.word	0x20000020

08003c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c98:	e7fe      	b.n	8003c98 <NMI_Handler+0x4>

08003c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c9e:	e7fe      	b.n	8003c9e <HardFault_Handler+0x4>

08003ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ca4:	e7fe      	b.n	8003ca4 <MemManage_Handler+0x4>

08003ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003caa:	e7fe      	b.n	8003caa <BusFault_Handler+0x4>

08003cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cb0:	e7fe      	b.n	8003cb0 <UsageFault_Handler+0x4>

08003cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <TIM6_IRQHandler+0x10>)
 8003cc6:	f006 fef9 	bl	800aabc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20001a24 	.word	0x20001a24

08003cd4 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <GPDMA1_Channel12_IRQHandler+0x10>)
 8003cda:	f000 fef7 	bl	8004acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200013c0 	.word	0x200013c0

08003ce8 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI/PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <DCMI_PSSI_IRQHandler+0x10>)
 8003cee:	f000 fc8b 	bl	8004608 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20001358 	.word	0x20001358

08003cfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d00:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <SystemInit+0x68>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <SystemInit+0x68>)
 8003d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003d10:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <SystemInit+0x6c>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <SystemInit+0x6c>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003d1c:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <SystemInit+0x6c>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <SystemInit+0x6c>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <SystemInit+0x6c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <SystemInit+0x6c>)
 8003d2e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003d32:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003d36:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <SystemInit+0x6c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <SystemInit+0x6c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <SystemInit+0x6c>)
 8003d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <SystemInit+0x6c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <SystemInit+0x68>)
 8003d52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d56:	609a      	str	r2, [r3, #8]
  #endif
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000ed00 	.word	0xe000ed00
 8003d68:	46020c00 	.word	0x46020c00

08003d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003da4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003d70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003d72:	e003      	b.n	8003d7c <LoopCopyDataInit>

08003d74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003d76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003d78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003d7a:	3104      	adds	r1, #4

08003d7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003d7c:	480b      	ldr	r0, [pc, #44]	; (8003dac <LoopForever+0xa>)
	ldr	r3, =_edata
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003d80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003d82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003d84:	d3f6      	bcc.n	8003d74 <CopyDataInit>
	ldr	r2, =_sbss
 8003d86:	4a0b      	ldr	r2, [pc, #44]	; (8003db4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003d88:	e002      	b.n	8003d90 <LoopFillZerobss>

08003d8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003d8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003d8c:	f842 3b04 	str.w	r3, [r2], #4

08003d90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <LoopForever+0x16>)
	cmp	r2, r3
 8003d92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d94:	d3f9      	bcc.n	8003d8a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d96:	f7ff ffb1 	bl	8003cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d9a:	f008 fff3 	bl	800cd84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d9e:	f7ff fb77 	bl	8003490 <main>

08003da2 <LoopForever>:

LoopForever:
    b LoopForever
 8003da2:	e7fe      	b.n	8003da2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003da4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8003da8:	0800d3b4 	.word	0x0800d3b4
	ldr	r0, =_sdata
 8003dac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003db0:	2000002c 	.word	0x2000002c
	ldr	r2, =_sbss
 8003db4:	2000002c 	.word	0x2000002c
	ldr	r3, = _ebss
 8003db8:	200020b4 	.word	0x200020b4

08003dbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003dbc:	e7fe      	b.n	8003dbc <ADC1_IRQHandler>
	...

08003dc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_Init+0x4c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <HAL_Init+0x4c>)
 8003dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dd0:	2003      	movs	r0, #3
 8003dd2:	f000 f914 	bl	8003ffe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003dd6:	f005 fc8b 	bl	80096f0 <HAL_RCC_GetSysClockFreq>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_Init+0x50>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	490b      	ldr	r1, [pc, #44]	; (8003e14 <HAL_Init+0x54>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dec:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <HAL_Init+0x58>)
 8003dee:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003df0:	200f      	movs	r0, #15
 8003df2:	f7ff fedf 	bl	8003bb4 <HAL_InitTick>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e002      	b.n	8003e06 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e00:	f7ff febe 	bl	8003b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40022000 	.word	0x40022000
 8003e10:	46020c00 	.word	0x46020c00
 8003e14:	0800d2d4 	.word	0x0800d2d4
 8003e18:	2000001c 	.word	0x2000001c

08003e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_IncTick+0x20>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_IncTick+0x24>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <HAL_IncTick+0x24>)
 8003e2e:	6013      	str	r3, [r2, #0]
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000024 	.word	0x20000024
 8003e40:	20001a70 	.word	0x20001a70

08003e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return uwTick;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_GetTick+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20001a70 	.word	0x20001a70

08003e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e64:	f7ff ffee 	bl	8003e44 <HAL_GetTick>
 8003e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d005      	beq.n	8003e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_Delay+0x44>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e82:	bf00      	nop
 8003e84:	f7ff ffde 	bl	8003e44 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d8f7      	bhi.n	8003e84 <HAL_Delay+0x28>
  {
  }
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000024 	.word	0x20000024

08003ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ed6:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	60d3      	str	r3, [r2, #12]
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <__NVIC_GetPriorityGrouping+0x18>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 0307 	and.w	r3, r3, #7
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	db0b      	blt.n	8003f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	f003 021f 	and.w	r2, r3, #31
 8003f20:	4907      	ldr	r1, [pc, #28]	; (8003f40 <__NVIC_EnableIRQ+0x38>)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2001      	movs	r0, #1
 8003f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	e000e100 	.word	0xe000e100

08003f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	6039      	str	r1, [r7, #0]
 8003f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	db0a      	blt.n	8003f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	490c      	ldr	r1, [pc, #48]	; (8003f90 <__NVIC_SetPriority+0x4c>)
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	0112      	lsls	r2, r2, #4
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	440b      	add	r3, r1
 8003f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f6c:	e00a      	b.n	8003f84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	4908      	ldr	r1, [pc, #32]	; (8003f94 <__NVIC_SetPriority+0x50>)
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	3b04      	subs	r3, #4
 8003f7c:	0112      	lsls	r2, r2, #4
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	440b      	add	r3, r1
 8003f82:	761a      	strb	r2, [r3, #24]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	e000e100 	.word	0xe000e100
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f1c3 0307 	rsb	r3, r3, #7
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	bf28      	it	cs
 8003fb6:	2304      	movcs	r3, #4
 8003fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d902      	bls.n	8003fc8 <NVIC_EncodePriority+0x30>
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3b03      	subs	r3, #3
 8003fc6:	e000      	b.n	8003fca <NVIC_EncodePriority+0x32>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	401a      	ands	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	43d9      	mvns	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff0:	4313      	orrs	r3, r2
         );
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3724      	adds	r7, #36	; 0x24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ff4c 	bl	8003ea4 <__NVIC_SetPriorityGrouping>
}
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004022:	f7ff ff63 	bl	8003eec <__NVIC_GetPriorityGrouping>
 8004026:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	6978      	ldr	r0, [r7, #20]
 800402e:	f7ff ffb3 	bl	8003f98 <NVIC_EncodePriority>
 8004032:	4602      	mov	r2, r0
 8004034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004038:	4611      	mov	r1, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ff82 	bl	8003f44 <__NVIC_SetPriority>
}
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ff56 	bl	8003f08 <__NVIC_EnableIRQ>
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e037      	b.n	80040e6 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d119      	bne.n	80040b6 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a1a      	ldr	r2, [pc, #104]	; (80040f0 <HAL_DCACHE_Init+0x8c>)
 8004086:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a1a      	ldr	r2, [pc, #104]	; (80040f4 <HAL_DCACHE_Init+0x90>)
 800408c:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <HAL_DCACHE_Init+0x94>)
 8004092:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a19      	ldr	r2, [pc, #100]	; (80040fc <HAL_DCACHE_Init+0x98>)
 8004098:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a18      	ldr	r2, [pc, #96]	; (8004100 <HAL_DCACHE_Init+0x9c>)
 800409e:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a16      	ldr	r2, [pc, #88]	; (8004104 <HAL_DCACHE_Init+0xa0>)
 80040ac:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f81e 	bl	800411c <HAL_DCACHE_Enable>
 80040e0:	4603      	mov	r3, r0
 80040e2:	73fb      	strb	r3, [r7, #15]

  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	080041bb 	.word	0x080041bb
 80040f4:	0800416b 	.word	0x0800416b
 80040f8:	0800417f 	.word	0x0800417f
 80040fc:	080041a7 	.word	0x080041a7
 8004100:	08004193 	.word	0x08004193
 8004104:	08004109 	.word	0x08004109

08004108 <HAL_DCACHE_MspInit>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef *hdcache)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_MspInit can be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e015      	b.n	800415e <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0309 	and.w	r3, r3, #9
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8004140:	2302      	movs	r3, #2
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e00a      	b.n	800415c <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
  }

  return status;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
	...

080041d0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e069      	b.n	80042b6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fe fa64 	bl	80026bc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6819      	ldr	r1, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b2a      	ldr	r3, [pc, #168]	; (80042c0 <HAL_DCMI_Init+0xf0>)
 8004216:	400b      	ands	r3, r1
 8004218:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800422e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800423a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004246:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004252:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800425e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b10      	cmp	r3, #16
 800426e:	d112      	bne.n	8004296 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	7f1b      	ldrb	r3, [r3, #28]
 8004274:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7f5b      	ldrb	r3, [r3, #29]
 800427a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800427c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	7f9b      	ldrb	r3, [r3, #30]
 8004282:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004284:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7fdb      	ldrb	r3, [r3, #31]
 800428c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004292:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004294:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 021e 	orr.w	r2, r2, #30
 80042a4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	ffe0f007 	.word	0xffe0f007

080042c4 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_DCMI_Start_DMA+0x26>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e189      	b.n	80045fe <HAL_DCMI_Start_DMA+0x33a>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004308:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0202 	bic.w	r2, r2, #2
 8004318:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	430a      	orrs	r2, r1
 8004328:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	4a99      	ldr	r2, [pc, #612]	; (8004594 <HAL_DCMI_Start_DMA+0x2d0>)
 8004330:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004336:	4a98      	ldr	r2, [pc, #608]	; (8004598 <HAL_DCMI_Start_DMA+0x2d4>)
 8004338:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433e:	2200      	movs	r2, #0
 8004340:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	645a      	str	r2, [r3, #68]	; 0x44

  /* Length should be converted to number of bytes */
  tmp_length = tmp_length * 4U;
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	623b      	str	r3, [r7, #32]

  if (tmp_length <= 0xFFFFU)
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004366:	d24c      	bcs.n	8004402 <HAL_DCMI_Start_DMA+0x13e>
  {
    /* Continuoues Mode */
    /* Enable the DMA Stream */
    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b00      	cmp	r3, #0
 8004374:	d037      	beq.n	80043e6 <HAL_DCMI_Start_DMA+0x122>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437c:	2b00      	cmp	r3, #0
 800437e:	d023      	beq.n	80043c8 <HAL_DCMI_Start_DMA+0x104>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01d      	beq.n	80043c8 <HAL_DCMI_Start_DMA+0x104>
      {
        /* Set Source , Destination , Length for DMA Xfer */

        /* Set DMA data size           */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = tmp_length;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	609a      	str	r2, [r3, #8]
        /* Set DMA source address      */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60da      	str	r2, [r3, #12]
        /* Set DMA destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fe4e 	bl	800505c <HAL_DMAEx_List_Start_IT>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043c6:	e0f9      	b.n	80045bc <HAL_DCMI_Start_DMA+0x2f8>
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2240      	movs	r2, #64	; 0x40
 80043cc:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043e4:	e0ea      	b.n	80045bc <HAL_DCMI_Start_DMA+0x2f8>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3328      	adds	r3, #40	; 0x28
 80043f0:	4619      	mov	r1, r3
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	f000 fa64 	bl	80048c2 <HAL_DMA_Start_IT>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004400:	e0dc      	b.n	80045bc <HAL_DCMI_Start_DMA+0x2f8>
  {
    /* Double buffering is used through 2 Nodes
       Calculate the elementary size to be transferred by each node */

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = tmp_length;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a3a      	ldr	r2, [r7, #32]
 800440c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8004414:	e009      	b.n	800442a <HAL_DCMI_Start_DMA+0x166>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	085a      	lsrs	r2, r3, #1
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	005a      	lsls	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004432:	d2f0      	bcs.n	8004416 <HAL_DCMI_Start_DMA+0x152>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 1U);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	641a      	str	r2, [r3, #64]	; 0x40

    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80a3 	beq.w	800459c <HAL_DCMI_Start_DMA+0x2d8>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 808a 	beq.w	8004576 <HAL_DCMI_Start_DMA+0x2b2>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8083 	beq.w	8004576 <HAL_DCMI_Start_DMA+0x2b2>
      {
        /* Update first node */

        /* Set DMA Data size */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize ;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800447c:	609a      	str	r2, [r3, #8]

        /* Set DMA Source address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60da      	str	r2, [r3, #12]

        /* Set DMA Destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	611a      	str	r2, [r3, #16]

        /* Get CLLR offset */
        cllr_offset = (hdcmi->DMA_Handle->LinkedListQueue->Head->NodeInfo & NODE_CLLR_IDX) >> 8U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	0a1b      	lsrs	r3, r3, #8
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	61fb      	str	r3, [r7, #28]

        /* Update second node */
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d04b      	beq.n	8004558 <HAL_DCMI_Start_DMA+0x294>
        {
          tmp1 = (uint32_t)hdcmi->DMA_Handle->LinkedListQueue->Head ;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	61bb      	str	r3, [r7, #24]
          tmp2 = hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset];
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d8:	617b      	str	r3, [r7, #20]
          /* Update second node */

          /* Set DMA Data size */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 80044e0:	6979      	ldr	r1, [r7, #20]
 80044e2:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80044e6:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80044e8:	4313      	orrs	r3, r2
 80044ea:	461a      	mov	r2, r3
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	6093      	str	r3, [r2, #8]

          /* Set DMA Source address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
                                   (uint32_t)&hdcmi->Instance->DR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f103 0028 	add.w	r0, r3, #40	; 0x28
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8004500:	6979      	ldr	r1, [r7, #20]
 8004502:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004506:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8004508:	4313      	orrs	r3, r2
                                   (uint32_t)&hdcmi->Instance->DR;
 800450a:	4602      	mov	r2, r0
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 800450c:	60da      	str	r2, [r3, #12]

          /* Set DMA Destination address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
                                   (uint32_t)pData + hdcmi->XferSize;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8004518:	6978      	ldr	r0, [r7, #20]
 800451a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800451e:	4002      	ands	r2, r0
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8004520:	4313      	orrs	r3, r2
 8004522:	461a      	mov	r2, r3
                                   (uint32_t)pData + hdcmi->XferSize;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	440b      	add	r3, r1
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 8004528:	6113      	str	r3, [r2, #16]

          if (HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle) != HAL_OK)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fd94 	bl	800505c <HAL_DMAEx_List_Start_IT>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d03f      	beq.n	80045ba <HAL_DCMI_Start_DMA+0x2f6>
          {
            /* Set Error Code */
            hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2240      	movs	r2, #64	; 0x40
 800453e:	64da      	str	r2, [r3, #76]	; 0x4c
            /* Change DCMI state */
            hdcmi->State = HAL_DCMI_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Release Lock */
            __HAL_UNLOCK(hdcmi);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /* Return function status */
            status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8004556:	e030      	b.n	80045ba <HAL_DCMI_Start_DMA+0x2f6>
          }
        }
        else
        {
          /* Set Error Code */
          hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2240      	movs	r2, #64	; 0x40
 800455c:	64da      	str	r2, [r3, #76]	; 0x4c
          /* Change DCMI state */
          hdcmi->State = HAL_DCMI_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Release Lock */
          __HAL_UNLOCK(hdcmi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Return function status */
          status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8004574:	e021      	b.n	80045ba <HAL_DCMI_Start_DMA+0x2f6>
        }
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2240      	movs	r2, #64	; 0x40
 800457a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004592:	e013      	b.n	80045bc <HAL_DCMI_Start_DMA+0x2f8>
 8004594:	0800477d 	.word	0x0800477d
 8004598:	08004889 	.word	0x08004889
      }
    }
    else
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2240      	movs	r2, #64	; 0x40
 80045a0:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80045b8:	e000      	b.n	80045bc <HAL_DCMI_Start_DMA+0x2f8>
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 80045ba:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80045bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10c      	bne.n	80045de <HAL_DCMI_Start_DMA+0x31a>
  {
    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80045dc:	e00d      	b.n	80045fa <HAL_DCMI_Start_DMA+0x336>
  }
  else
  {
    /* Set Error Code */
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2240      	movs	r2, #64	; 0x40
 80045e2:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Return function status */
    status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Return function status */
  return status;
 80045fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3728      	adds	r7, #40	; 0x28
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop

08004608 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01e      	beq.n	8004660 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2204      	movs	r2, #4
 8004628:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	f043 0202 	orr.w	r2, r3, #2
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2204      	movs	r2, #4
 800463a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	4a39      	ldr	r2, [pc, #228]	; (8004728 <HAL_DCMI_IRQHandler+0x120>)
 8004644:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fa15 	bl	8004a7a <HAL_DMA_Abort_IT>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f914 	bl	8004888 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01e      	beq.n	80046a8 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2202      	movs	r2, #2
 8004670:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2204      	movs	r2, #4
 8004682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468a:	4a27      	ldr	r2, [pc, #156]	; (8004728 <HAL_DCMI_IRQHandler+0x120>)
 800468c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f9f1 	bl	8004a7a <HAL_DMA_Abort_IT>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f8f0 	bl	8004888 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2210      	movs	r2, #16
 80046b8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f840 	bl	8004740 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d006      	beq.n	80046d8 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2208      	movs	r2, #8
 80046d0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f83e 	bl	8004754 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01d      	beq.n	800471e <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d107      	bne.n	8004700 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 021e 	bic.w	r2, r2, #30
 80046fe:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2201      	movs	r2, #1
 8004716:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f825 	bl	8004768 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	08004889 	.word	0x08004889

0800472c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800477c:	b480      	push	{r7}
 800477e:	b08b      	sub	sp, #44	; 0x2c
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t transfernumber;
  uint32_t transfercount;
  uint32_t transfersize ;

  /* Update Nodes destinations */
  if (hdcmi->XferSize != 0U)
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d061      	beq.n	8004856 <DCMI_DMAXferCplt+0xda>
  {
    pbuff          = hdcmi->pBuffPtr;
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	623b      	str	r3, [r7, #32]
    transfernumber = hdcmi->XferTransferNumber;
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	61fb      	str	r3, [r7, #28]
    transfercount  = hdcmi->XferCount;
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	61bb      	str	r3, [r7, #24]
    transfersize   = hdcmi->XferSize;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a8:	617b      	str	r3, [r7, #20]

    tmp1 = hdcmi->DMA_Handle->Instance->CLLR & DMA_CLLR_LA;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80047b2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
    tmp2 = hdcmi->DMA_Handle->Instance->CLBAR & DMA_CLBAR_LBA;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	041b      	lsls	r3, r3, #16
 80047c6:	60fb      	str	r3, [r7, #12]
    pnode = (DMA_NodeTypeDef *)(uint32_t)(tmp1 | tmp2);
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]

    if (hdcmi->XferCount > 1U)
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d910      	bls.n	80047fa <DCMI_DMAXferCplt+0x7e>
    {
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pbuff + ((transfernumber - transfercount + 2U) * transfersize);
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	3302      	adds	r3, #2
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	fb03 f202 	mul.w	r2, r3, r2
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	441a      	add	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	1e5a      	subs	r2, r3, #1
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 80047f8:	e040      	b.n	800487c <DCMI_DMAXferCplt+0x100>
    else if (hdcmi->XferCount == 1U)
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d109      	bne.n	8004816 <DCMI_DMAXferCplt+0x9a>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr;
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	1e5a      	subs	r2, r3, #1
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004814:	e032      	b.n	800487c <DCMI_DMAXferCplt+0x100>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr + hdcmi->XferSize;
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481e:	441a      	add	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	611a      	str	r2, [r3, #16]
      if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_CONTINUOUS)
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d104      	bne.n	800483c <DCMI_DMAXferCplt+0xc0>
        hdcmi->XferCount = hdcmi->XferTransferNumber ;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
 800483a:	e003      	b.n	8004844 <DCMI_DMAXferCplt+0xc8>
        hdcmi->State = HAL_DCMI_STATE_READY;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	60da      	str	r2, [r3, #12]
}
 8004854:	e012      	b.n	800487c <DCMI_DMAXferCplt+0x100>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b02      	cmp	r3, #2
 8004872:	d103      	bne.n	800487c <DCMI_DMAXferCplt+0x100>
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800487c:	bf00      	nop
 800487e:	372c      	adds	r7, #44	; 0x2c
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	2b02      	cmp	r3, #2
 800489e:	d009      	beq.n	80048b4 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7ff ff39 	bl	800472c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e04f      	b.n	800497a <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_DMA_Start_IT+0x26>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e048      	b.n	800497a <HAL_DMA_Start_IT+0xb8>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d136      	bne.n	800496a <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fa4f 	bl	8004db4 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8004924:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493c:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004954:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0201 	orr.w	r2, r2, #1
 8004964:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e007      	b.n	800497a <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2240      	movs	r2, #64	; 0x40
 800496e:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800498a:	f7ff fa5b 	bl	8003e44 <HAL_GetTick>
 800498e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e06b      	b.n	8004a72 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d008      	beq.n	80049b8 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e05c      	b.n	8004a72 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695a      	ldr	r2, [r3, #20]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0204 	orr.w	r2, r2, #4
 80049c6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2205      	movs	r2, #5
 80049cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80049d0:	e020      	b.n	8004a14 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80049d2:	f7ff fa37 	bl	8003e44 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d919      	bls.n	8004a14 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	f043 0210 	orr.w	r2, r3, #16
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2203      	movs	r2, #3
 80049f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a04:	2201      	movs	r2, #1
 8004a06:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e02e      	b.n	8004a72 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0d7      	beq.n	80049d2 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0202 	orr.w	r2, r2, #2
 8004a30:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2204      	movs	r2, #4
 8004a36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004a42:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2200      	movs	r2, #0
 8004a66:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e019      	b.n	8004ac0 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d004      	beq.n	8004aa2 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e00e      	b.n	8004ac0 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ab8:	f043 0304 	orr.w	r3, r3, #4
 8004abc:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004adc:	f023 030f 	bic.w	r3, r3, #15
 8004ae0:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aea:	3b50      	subs	r3, #80	; 0x50
 8004aec:	09db      	lsrs	r3, r3, #7
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	2201      	movs	r2, #1
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8150 	beq.w	8004da8 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d011      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b2c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b32:	f043 0201 	orr.w	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d011      	beq.n	8004b6c <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b5e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b64:	f043 0202 	orr.w	r2, r3, #2
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d011      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b90:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b96:	f043 0204 	orr.w	r2, r3, #4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d011      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bc2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	f043 0208 	orr.w	r2, r3, #8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d013      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00c      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bf4:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d055      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d04e      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c2a:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d137      	bne.n	8004ca8 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695a      	ldr	r2, [r3, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c46:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0202 	orr.w	r2, r2, #2
 8004c56:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d004      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2203      	movs	r2, #3
 8004c6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004c6e:	e003      	b.n	8004c78 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c88:	2201      	movs	r2, #1
 8004c8a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8087 	beq.w	8004dac <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
        }

        return;
 8004ca6:	e081      	b.n	8004dac <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2205      	movs	r2, #5
 8004cac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d039      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d032      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d012      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d116      	bne.n	8004d20 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d111      	bne.n	8004d20 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d08:	2201      	movs	r2, #1
 8004d0a:	731a      	strb	r2, [r3, #12]
 8004d0c:	e008      	b.n	8004d20 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004d28:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d031      	beq.n	8004dae <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0202 	orr.w	r2, r2, #2
 8004d58:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d004      	beq.n	8004d72 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004d70:	e003      	b.n	8004d7a <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
 8004da6:	e002      	b.n	8004dae <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <HAL_DMA_IRQHandler+0x2e2>
        return;
 8004dac:	bf00      	nop
    }
  }
}
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	b291      	uxth	r1, r2
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004de0:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8004e08:	f7ff f81c 	bl	8003e44 <HAL_GetTick>
 8004e0c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0dc      	b.n	8004fd2 <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6f      	ldr	r2, [pc, #444]	; (8004fdc <HAL_DMAEx_List_Init+0x1dc>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	f000 809f 	beq.w	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a6d      	ldr	r2, [pc, #436]	; (8004fe0 <HAL_DMAEx_List_Init+0x1e0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	f000 8099 	beq.w	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a6b      	ldr	r2, [pc, #428]	; (8004fe4 <HAL_DMAEx_List_Init+0x1e4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	f000 8093 	beq.w	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a69      	ldr	r2, [pc, #420]	; (8004fe8 <HAL_DMAEx_List_Init+0x1e8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	f000 808d 	beq.w	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a67      	ldr	r2, [pc, #412]	; (8004fec <HAL_DMAEx_List_Init+0x1ec>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	f000 8087 	beq.w	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a65      	ldr	r2, [pc, #404]	; (8004ff0 <HAL_DMAEx_List_Init+0x1f0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	f000 8081 	beq.w	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a63      	ldr	r2, [pc, #396]	; (8004ff4 <HAL_DMAEx_List_Init+0x1f4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d07b      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a62      	ldr	r2, [pc, #392]	; (8004ff8 <HAL_DMAEx_List_Init+0x1f8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d076      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a60      	ldr	r2, [pc, #384]	; (8004ffc <HAL_DMAEx_List_Init+0x1fc>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d071      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a5f      	ldr	r2, [pc, #380]	; (8005000 <HAL_DMAEx_List_Init+0x200>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d06c      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a5d      	ldr	r2, [pc, #372]	; (8005004 <HAL_DMAEx_List_Init+0x204>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d067      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a5c      	ldr	r2, [pc, #368]	; (8005008 <HAL_DMAEx_List_Init+0x208>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d062      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a5a      	ldr	r2, [pc, #360]	; (800500c <HAL_DMAEx_List_Init+0x20c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d05d      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a59      	ldr	r2, [pc, #356]	; (8005010 <HAL_DMAEx_List_Init+0x210>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d058      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a57      	ldr	r2, [pc, #348]	; (8005014 <HAL_DMAEx_List_Init+0x214>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d053      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a56      	ldr	r2, [pc, #344]	; (8005018 <HAL_DMAEx_List_Init+0x218>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d04e      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a54      	ldr	r2, [pc, #336]	; (800501c <HAL_DMAEx_List_Init+0x21c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d049      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a53      	ldr	r2, [pc, #332]	; (8005020 <HAL_DMAEx_List_Init+0x220>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d044      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a51      	ldr	r2, [pc, #324]	; (8005024 <HAL_DMAEx_List_Init+0x224>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d03f      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a50      	ldr	r2, [pc, #320]	; (8005028 <HAL_DMAEx_List_Init+0x228>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d03a      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a4e      	ldr	r2, [pc, #312]	; (800502c <HAL_DMAEx_List_Init+0x22c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d035      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a4d      	ldr	r2, [pc, #308]	; (8005030 <HAL_DMAEx_List_Init+0x230>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d030      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a4b      	ldr	r2, [pc, #300]	; (8005034 <HAL_DMAEx_List_Init+0x234>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d02b      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a4a      	ldr	r2, [pc, #296]	; (8005038 <HAL_DMAEx_List_Init+0x238>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d026      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a48      	ldr	r2, [pc, #288]	; (800503c <HAL_DMAEx_List_Init+0x23c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d021      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a47      	ldr	r2, [pc, #284]	; (8005040 <HAL_DMAEx_List_Init+0x240>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d01c      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a45      	ldr	r2, [pc, #276]	; (8005044 <HAL_DMAEx_List_Init+0x244>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d017      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a44      	ldr	r2, [pc, #272]	; (8005048 <HAL_DMAEx_List_Init+0x248>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d012      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a42      	ldr	r2, [pc, #264]	; (800504c <HAL_DMAEx_List_Init+0x24c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00d      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a41      	ldr	r2, [pc, #260]	; (8005050 <HAL_DMAEx_List_Init+0x250>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d008      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a3f      	ldr	r2, [pc, #252]	; (8005054 <HAL_DMAEx_List_Init+0x254>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d003      	beq.n	8004f62 <HAL_DMAEx_List_Init+0x162>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a3e      	ldr	r2, [pc, #248]	; (8005058 <HAL_DMAEx_List_Init+0x258>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0206 	orr.w	r2, r2, #6
 8004f82:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004f84:	e00f      	b.n	8004fa6 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004f86:	f7fe ff5d 	bl	8003e44 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	d908      	bls.n	8004fa6 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2210      	movs	r2, #16
 8004f98:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e015      	b.n	8004fd2 <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e8      	bne.n	8004f86 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fa69 	bl	800548c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40020050 	.word	0x40020050
 8004fe0:	50020050 	.word	0x50020050
 8004fe4:	400200d0 	.word	0x400200d0
 8004fe8:	500200d0 	.word	0x500200d0
 8004fec:	40020150 	.word	0x40020150
 8004ff0:	50020150 	.word	0x50020150
 8004ff4:	400201d0 	.word	0x400201d0
 8004ff8:	500201d0 	.word	0x500201d0
 8004ffc:	40020250 	.word	0x40020250
 8005000:	50020250 	.word	0x50020250
 8005004:	400202d0 	.word	0x400202d0
 8005008:	500202d0 	.word	0x500202d0
 800500c:	40020350 	.word	0x40020350
 8005010:	50020350 	.word	0x50020350
 8005014:	400203d0 	.word	0x400203d0
 8005018:	500203d0 	.word	0x500203d0
 800501c:	40020450 	.word	0x40020450
 8005020:	50020450 	.word	0x50020450
 8005024:	400204d0 	.word	0x400204d0
 8005028:	500204d0 	.word	0x500204d0
 800502c:	40020550 	.word	0x40020550
 8005030:	50020550 	.word	0x50020550
 8005034:	400205d0 	.word	0x400205d0
 8005038:	500205d0 	.word	0x500205d0
 800503c:	40020650 	.word	0x40020650
 8005040:	50020650 	.word	0x50020650
 8005044:	400206d0 	.word	0x400206d0
 8005048:	500206d0 	.word	0x500206d0
 800504c:	40020750 	.word	0x40020750
 8005050:	50020750 	.word	0x50020750
 8005054:	400207d0 	.word	0x400207d0
 8005058:	500207d0 	.word	0x500207d0

0800505c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_DMAEx_List_Start_IT+0x16>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e082      	b.n	800517c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800507c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005088:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800508a:	7dfb      	ldrb	r3, [r7, #23]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d005      	beq.n	800509c <HAL_DMAEx_List_Start_IT+0x40>
 8005090:	7dfb      	ldrb	r3, [r7, #23]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d16a      	bne.n	800516c <HAL_DMAEx_List_Start_IT+0x110>
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d067      	beq.n	800516c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d157      	bne.n	8005158 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_DMAEx_List_Start_IT+0x5a>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e062      	b.n	800517c <HAL_DMAEx_List_Start_IT+0x120>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ca:	2202      	movs	r2, #2
 80050cc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d8:	2200      	movs	r2, #0
 80050da:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80050ea:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695a      	ldr	r2, [r3, #20]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005102:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800511a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f107 010c 	add.w	r1, r7, #12
 8005126:	2200      	movs	r2, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fcc5 	bl	8005ab8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4619      	mov	r1, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	0c0b      	lsrs	r3, r1, #16
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800514c:	4013      	ands	r3, r2
 800514e:	68f9      	ldr	r1, [r7, #12]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	430b      	orrs	r3, r1
 8005156:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	e007      	b.n	800517c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2240      	movs	r2, #64	; 0x40
 8005170:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_DMAEx_List_BuildNode+0x16>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e004      	b.n	80051a8 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800519e:	6839      	ldr	r1, [r7, #0]
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 facb 	bl	800573c <DMA_List_BuildNode>

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08a      	sub	sp, #40	; 0x28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e066      	b.n	8005298 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d104      	bne.n	80051dc <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2204      	movs	r2, #4
 80051d6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e05d      	b.n	8005298 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2200      	movs	r2, #0
 80051e2:	6839      	ldr	r1, [r7, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fbfb 	bl	80059e0 <DMA_List_CheckNodesBaseAddresses>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2205      	movs	r2, #5
 80051f4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e04e      	b.n	8005298 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fc1c 	bl	8005a40 <DMA_List_CheckNodesTypes>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d004      	beq.n	8005218 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2204      	movs	r2, #4
 8005212:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e03f      	b.n	8005298 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d103      	bne.n	8005228 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e02b      	b.n	8005280 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8005228:	f107 0220 	add.w	r2, r7, #32
 800522c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005230:	4619      	mov	r1, r3
 8005232:	6838      	ldr	r0, [r7, #0]
 8005234:	f000 fc40 	bl	8005ab8 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800523c:	f107 030c 	add.w	r3, r7, #12
 8005240:	461a      	mov	r2, r3
 8005242:	2100      	movs	r1, #0
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fc67 	bl	8005b18 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00b      	beq.n	800526a <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	461a      	mov	r2, r3
 8005258:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800525c:	4013      	ands	r3, r2
 800525e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005260:	6a3a      	ldr	r2, [r7, #32]
 8005262:	4319      	orrs	r1, r3
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005270:	4013      	ands	r3, r2
 8005272:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4610      	mov	r0, r2
 8005278:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800527a:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 800527c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3728      	adds	r7, #40	; 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e052      	b.n	8005358 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e049      	b.n	8005358 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00c      	beq.n	80052e6 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d101      	bne.n	80052dc <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e03d      	b.n	8005358 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2204      	movs	r2, #4
 80052e0:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e038      	b.n	8005358 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d104      	bne.n	80052f8 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2204      	movs	r2, #4
 80052f2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e02f      	b.n	8005358 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f107 0220 	add.w	r2, r7, #32
 800530c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fbd1 	bl	8005ab8 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800531a:	f107 030c 	add.w	r3, r7, #12
 800531e:	461a      	mov	r2, r3
 8005320:	2100      	movs	r1, #0
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fbf8 	bl	8005b18 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005332:	4013      	ands	r3, r2
 8005334:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4610      	mov	r0, r2
 800533a:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800533c:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800533e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3728      	adds	r7, #40	; 0x28
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_DMAEx_List_LinkQ+0x16>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e072      	b.n	8005460 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005380:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d002      	beq.n	8005394 <HAL_DMAEx_List_LinkQ+0x34>
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	2b05      	cmp	r3, #5
 8005392:	d108      	bne.n	80053a6 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2240      	movs	r2, #64	; 0x40
 8005398:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e05c      	b.n	8005460 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	7b1b      	ldrb	r3, [r3, #12]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d104      	bne.n	80053ba <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2201      	movs	r2, #1
 80053b4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e052      	b.n	8005460 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2b      	ldr	r2, [pc, #172]	; (800546c <HAL_DMAEx_List_LinkQ+0x10c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <HAL_DMAEx_List_LinkQ+0xaa>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a29      	ldr	r2, [pc, #164]	; (8005470 <HAL_DMAEx_List_LinkQ+0x110>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01d      	beq.n	800540a <HAL_DMAEx_List_LinkQ+0xaa>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a28      	ldr	r2, [pc, #160]	; (8005474 <HAL_DMAEx_List_LinkQ+0x114>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_DMAEx_List_LinkQ+0xaa>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a26      	ldr	r2, [pc, #152]	; (8005478 <HAL_DMAEx_List_LinkQ+0x118>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_DMAEx_List_LinkQ+0xaa>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a25      	ldr	r2, [pc, #148]	; (800547c <HAL_DMAEx_List_LinkQ+0x11c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_DMAEx_List_LinkQ+0xaa>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a23      	ldr	r2, [pc, #140]	; (8005480 <HAL_DMAEx_List_LinkQ+0x120>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_DMAEx_List_LinkQ+0xaa>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a22      	ldr	r2, [pc, #136]	; (8005484 <HAL_DMAEx_List_LinkQ+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_DMAEx_List_LinkQ+0xaa>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a20      	ldr	r2, [pc, #128]	; (8005488 <HAL_DMAEx_List_LinkQ+0x128>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <HAL_DMAEx_List_LinkQ+0xae>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <HAL_DMAEx_List_LinkQ+0xb0>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2203      	movs	r2, #3
 8005426:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e019      	b.n	8005460 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005430:	2b81      	cmp	r3, #129	; 0x81
 8005432:	d108      	bne.n	8005446 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10d      	bne.n	8005458 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2204      	movs	r2, #4
 8005440:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e00c      	b.n	8005460 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2204      	movs	r2, #4
 8005452:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e003      	b.n	8005460 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	40020650 	.word	0x40020650
 8005470:	50020650 	.word	0x50020650
 8005474:	400206d0 	.word	0x400206d0
 8005478:	500206d0 	.word	0x500206d0
 800547c:	40020750 	.word	0x40020750
 8005480:	50020750 	.word	0x50020750
 8005484:	400207d0 	.word	0x400207d0
 8005488:	500207d0 	.word	0x500207d0

0800548c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a85      	ldr	r2, [pc, #532]	; (80056bc <DMA_List_Init+0x230>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	f000 80a0 	beq.w	80055ec <DMA_List_Init+0x160>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a83      	ldr	r2, [pc, #524]	; (80056c0 <DMA_List_Init+0x234>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	f000 809a 	beq.w	80055ec <DMA_List_Init+0x160>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a81      	ldr	r2, [pc, #516]	; (80056c4 <DMA_List_Init+0x238>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	f000 8094 	beq.w	80055ec <DMA_List_Init+0x160>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a7f      	ldr	r2, [pc, #508]	; (80056c8 <DMA_List_Init+0x23c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	f000 808e 	beq.w	80055ec <DMA_List_Init+0x160>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a7d      	ldr	r2, [pc, #500]	; (80056cc <DMA_List_Init+0x240>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	f000 8088 	beq.w	80055ec <DMA_List_Init+0x160>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a7b      	ldr	r2, [pc, #492]	; (80056d0 <DMA_List_Init+0x244>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	f000 8082 	beq.w	80055ec <DMA_List_Init+0x160>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a79      	ldr	r2, [pc, #484]	; (80056d4 <DMA_List_Init+0x248>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d07c      	beq.n	80055ec <DMA_List_Init+0x160>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a78      	ldr	r2, [pc, #480]	; (80056d8 <DMA_List_Init+0x24c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d077      	beq.n	80055ec <DMA_List_Init+0x160>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a76      	ldr	r2, [pc, #472]	; (80056dc <DMA_List_Init+0x250>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d072      	beq.n	80055ec <DMA_List_Init+0x160>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a75      	ldr	r2, [pc, #468]	; (80056e0 <DMA_List_Init+0x254>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d06d      	beq.n	80055ec <DMA_List_Init+0x160>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a73      	ldr	r2, [pc, #460]	; (80056e4 <DMA_List_Init+0x258>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d068      	beq.n	80055ec <DMA_List_Init+0x160>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a72      	ldr	r2, [pc, #456]	; (80056e8 <DMA_List_Init+0x25c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d063      	beq.n	80055ec <DMA_List_Init+0x160>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a70      	ldr	r2, [pc, #448]	; (80056ec <DMA_List_Init+0x260>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d05e      	beq.n	80055ec <DMA_List_Init+0x160>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a6f      	ldr	r2, [pc, #444]	; (80056f0 <DMA_List_Init+0x264>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d059      	beq.n	80055ec <DMA_List_Init+0x160>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a6d      	ldr	r2, [pc, #436]	; (80056f4 <DMA_List_Init+0x268>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d054      	beq.n	80055ec <DMA_List_Init+0x160>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a6c      	ldr	r2, [pc, #432]	; (80056f8 <DMA_List_Init+0x26c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d04f      	beq.n	80055ec <DMA_List_Init+0x160>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a6a      	ldr	r2, [pc, #424]	; (80056fc <DMA_List_Init+0x270>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d04a      	beq.n	80055ec <DMA_List_Init+0x160>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a69      	ldr	r2, [pc, #420]	; (8005700 <DMA_List_Init+0x274>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d045      	beq.n	80055ec <DMA_List_Init+0x160>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a67      	ldr	r2, [pc, #412]	; (8005704 <DMA_List_Init+0x278>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d040      	beq.n	80055ec <DMA_List_Init+0x160>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a66      	ldr	r2, [pc, #408]	; (8005708 <DMA_List_Init+0x27c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d03b      	beq.n	80055ec <DMA_List_Init+0x160>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a64      	ldr	r2, [pc, #400]	; (800570c <DMA_List_Init+0x280>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d036      	beq.n	80055ec <DMA_List_Init+0x160>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a63      	ldr	r2, [pc, #396]	; (8005710 <DMA_List_Init+0x284>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d031      	beq.n	80055ec <DMA_List_Init+0x160>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a61      	ldr	r2, [pc, #388]	; (8005714 <DMA_List_Init+0x288>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d02c      	beq.n	80055ec <DMA_List_Init+0x160>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a60      	ldr	r2, [pc, #384]	; (8005718 <DMA_List_Init+0x28c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d027      	beq.n	80055ec <DMA_List_Init+0x160>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a5e      	ldr	r2, [pc, #376]	; (800571c <DMA_List_Init+0x290>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d022      	beq.n	80055ec <DMA_List_Init+0x160>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a5d      	ldr	r2, [pc, #372]	; (8005720 <DMA_List_Init+0x294>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d01d      	beq.n	80055ec <DMA_List_Init+0x160>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a5b      	ldr	r2, [pc, #364]	; (8005724 <DMA_List_Init+0x298>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <DMA_List_Init+0x160>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a5a      	ldr	r2, [pc, #360]	; (8005728 <DMA_List_Init+0x29c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <DMA_List_Init+0x160>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a58      	ldr	r2, [pc, #352]	; (800572c <DMA_List_Init+0x2a0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <DMA_List_Init+0x160>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a57      	ldr	r2, [pc, #348]	; (8005730 <DMA_List_Init+0x2a4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <DMA_List_Init+0x160>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a55      	ldr	r2, [pc, #340]	; (8005734 <DMA_List_Init+0x2a8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <DMA_List_Init+0x160>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a54      	ldr	r2, [pc, #336]	; (8005738 <DMA_List_Init+0x2ac>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d101      	bne.n	80055f0 <DMA_List_Init+0x164>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <DMA_List_Init+0x166>
 80055f0:	2300      	movs	r3, #0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	430a      	orrs	r2, r1
 8005612:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2200      	movs	r2, #0
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005624:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2200      	movs	r2, #0
 8005634:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a36      	ldr	r2, [pc, #216]	; (800571c <DMA_List_Init+0x290>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d022      	beq.n	800568e <DMA_List_Init+0x202>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a34      	ldr	r2, [pc, #208]	; (8005720 <DMA_List_Init+0x294>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d01d      	beq.n	800568e <DMA_List_Init+0x202>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a33      	ldr	r2, [pc, #204]	; (8005724 <DMA_List_Init+0x298>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d018      	beq.n	800568e <DMA_List_Init+0x202>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a31      	ldr	r2, [pc, #196]	; (8005728 <DMA_List_Init+0x29c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d013      	beq.n	800568e <DMA_List_Init+0x202>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a30      	ldr	r2, [pc, #192]	; (800572c <DMA_List_Init+0x2a0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00e      	beq.n	800568e <DMA_List_Init+0x202>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a2e      	ldr	r2, [pc, #184]	; (8005730 <DMA_List_Init+0x2a4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d009      	beq.n	800568e <DMA_List_Init+0x202>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2d      	ldr	r2, [pc, #180]	; (8005734 <DMA_List_Init+0x2a8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d004      	beq.n	800568e <DMA_List_Init+0x202>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a2b      	ldr	r2, [pc, #172]	; (8005738 <DMA_List_Init+0x2ac>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d101      	bne.n	8005692 <DMA_List_Init+0x206>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <DMA_List_Init+0x208>
 8005692:	2300      	movs	r3, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2200      	movs	r2, #0
 800569e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2200      	movs	r2, #0
 80056a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2200      	movs	r2, #0
 80056ae:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	40020050 	.word	0x40020050
 80056c0:	50020050 	.word	0x50020050
 80056c4:	400200d0 	.word	0x400200d0
 80056c8:	500200d0 	.word	0x500200d0
 80056cc:	40020150 	.word	0x40020150
 80056d0:	50020150 	.word	0x50020150
 80056d4:	400201d0 	.word	0x400201d0
 80056d8:	500201d0 	.word	0x500201d0
 80056dc:	40020250 	.word	0x40020250
 80056e0:	50020250 	.word	0x50020250
 80056e4:	400202d0 	.word	0x400202d0
 80056e8:	500202d0 	.word	0x500202d0
 80056ec:	40020350 	.word	0x40020350
 80056f0:	50020350 	.word	0x50020350
 80056f4:	400203d0 	.word	0x400203d0
 80056f8:	500203d0 	.word	0x500203d0
 80056fc:	40020450 	.word	0x40020450
 8005700:	50020450 	.word	0x50020450
 8005704:	400204d0 	.word	0x400204d0
 8005708:	500204d0 	.word	0x500204d0
 800570c:	40020550 	.word	0x40020550
 8005710:	50020550 	.word	0x50020550
 8005714:	400205d0 	.word	0x400205d0
 8005718:	500205d0 	.word	0x500205d0
 800571c:	40020650 	.word	0x40020650
 8005720:	50020650 	.word	0x50020650
 8005724:	400206d0 	.word	0x400206d0
 8005728:	500206d0 	.word	0x500206d0
 800572c:	40020750 	.word	0x40020750
 8005730:	50020750 	.word	0x50020750
 8005734:	400207d0 	.word	0x400207d0
 8005738:	500207d0 	.word	0x500207d0

0800573c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800574e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8005754:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800575a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8005760:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d017      	beq.n	80057a2 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005784:	3b01      	subs	r3, #1
 8005786:	051b      	lsls	r3, r3, #20
 8005788:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800578c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	3b01      	subs	r3, #1
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800579a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800579c:	431a      	orrs	r2, r3
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6859      	ldr	r1, [r3, #4]
 80057aa:	f240 237f 	movw	r3, #639	; 0x27f
 80057ae:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80057b0:	431a      	orrs	r2, r3
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057be:	d10c      	bne.n	80057da <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d011      	beq.n	80057f0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	605a      	str	r2, [r3, #4]
 80057d8:	e00a      	b.n	80057f0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e2:	d105      	bne.n	80057f0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00f      	beq.n	8005818 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005804:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005810:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005812:	431a      	orrs	r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800581c:	b29a      	uxth	r2, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d04e      	beq.n	80058cc <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005836:	3b01      	subs	r3, #1
 8005838:	0419      	lsls	r1, r3, #16
 800583a:	4b67      	ldr	r3, [pc, #412]	; (80059d8 <DMA_List_BuildNode+0x29c>)
 800583c:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800583e:	431a      	orrs	r2, r3
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005848:	2b00      	cmp	r3, #0
 800584a:	da06      	bge.n	800585a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	609a      	str	r2, [r3, #8]
 8005858:	e005      	b.n	8005866 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	2b00      	cmp	r3, #0
 800586c:	da06      	bge.n	800587c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	609a      	str	r2, [r3, #8]
 800587a:	e005      	b.n	8005888 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588c:	2b00      	cmp	r3, #0
 800588e:	da06      	bge.n	800589e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	609a      	str	r2, [r3, #8]
 800589c:	e005      	b.n	80058aa <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da06      	bge.n	80058c0 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	609a      	str	r2, [r3, #8]
 80058be:	e005      	b.n	80058cc <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d059      	beq.n	800599c <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	da09      	bge.n	8005904 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f4:	425b      	negs	r3, r3
 80058f6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	615a      	str	r2, [r3, #20]
 8005902:	e005      	b.n	8005910 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005908:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	2b00      	cmp	r3, #0
 8005916:	da0d      	bge.n	8005934 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591c:	425b      	negs	r3, r3
 800591e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	695a      	ldr	r2, [r3, #20]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	0419      	lsls	r1, r3, #16
 8005928:	4b2c      	ldr	r3, [pc, #176]	; (80059dc <DMA_List_BuildNode+0x2a0>)
 800592a:	400b      	ands	r3, r1
 800592c:	431a      	orrs	r2, r3
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	615a      	str	r2, [r3, #20]
 8005932:	e009      	b.n	8005948 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593c:	0419      	lsls	r1, r3, #16
 800593e:	4b27      	ldr	r3, [pc, #156]	; (80059dc <DMA_List_BuildNode+0x2a0>)
 8005940:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005942:	431a      	orrs	r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	2b00      	cmp	r3, #0
 800594e:	da08      	bge.n	8005962 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005954:	425b      	negs	r3, r3
 8005956:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	b29a      	uxth	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	619a      	str	r2, [r3, #24]
 8005960:	e004      	b.n	800596c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005966:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005970:	2b00      	cmp	r3, #0
 8005972:	da0b      	bge.n	800598c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005978:	425b      	negs	r3, r3
 800597a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005984:	431a      	orrs	r2, r3
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	619a      	str	r2, [r3, #24]
 800598a:	e007      	b.n	800599c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005994:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005996:	431a      	orrs	r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d006      	beq.n	80059be <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80059bc:	e005      	b.n	80059ca <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	07ff0000 	.word	0x07ff0000
 80059dc:	1fff0000 	.word	0x1fff0000

080059e0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	0c1b      	lsrs	r3, r3, #16
 80059f8:	041b      	lsls	r3, r3, #16
 80059fa:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e00a      	b.n	8005a22 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	e004      	b.n	8005a22 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d001      	beq.n	8005a32 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d004      	beq.n	8005a60 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	e00e      	b.n	8005a7e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	e006      	b.n	8005a7e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8005a90:	2302      	movs	r3, #2
 8005a92:	e00b      	b.n	8005aac <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d001      	beq.n	8005aaa <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e000      	b.n	8005aac <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00c      	beq.n	8005aea <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4a0d      	ldr	r2, [pc, #52]	; (8005b10 <DMA_List_GetCLLRNodeInfo+0x58>)
 8005ada:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00f      	beq.n	8005b02 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2207      	movs	r2, #7
 8005ae6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8005ae8:	e00b      	b.n	8005b02 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4a08      	ldr	r2, [pc, #32]	; (8005b14 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8005af4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2205      	movs	r2, #5
 8005b00:	601a      	str	r2, [r3, #0]
}
 8005b02:	bf00      	nop
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	fe010000 	.word	0xfe010000
 8005b14:	f8010000 	.word	0xf8010000

08005b18 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b089      	sub	sp, #36	; 0x24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d142      	bne.n	8005bc2 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8005b3c:	e01d      	b.n	8005b7a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d107      	bne.n	8005b54 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005b4e:	4013      	ands	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	e00f      	b.n	8005b74 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4413      	add	r3, r2
 8005b64:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8005b6c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005b70:	4013      	ands	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	3301      	adds	r3, #1
 8005b78:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d3dc      	bcc.n	8005b3e <DMA_List_FindNode+0x26>
 8005b84:	e029      	b.n	8005bda <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d107      	bne.n	8005b9c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005b96:	4013      	ands	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	e00f      	b.n	8005bbc <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	0c1b      	lsrs	r3, r3, #16
 8005ba6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4413      	add	r3, r2
 8005bac:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8005bb4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005bb8:	4013      	ands	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d206      	bcs.n	8005bda <DMA_List_FindNode+0xc2>
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d1d5      	bne.n	8005b86 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005be6:	4013      	ands	r3, r2
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d001      	beq.n	8005bf2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e02b      	b.n	8005c4a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	041b      	lsls	r3, r3, #16
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00f      	beq.n	8005c48 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c34:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8005c38:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	0c1b      	lsrs	r3, r3, #16
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3724      	adds	r7, #36	; 0x24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b089      	sub	sp, #36	; 0x24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005c6a:	e1ba      	b.n	8005fe2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	2101      	movs	r1, #1
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	fa01 f303 	lsl.w	r3, r1, r3
 8005c78:	4013      	ands	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 81aa 	beq.w	8005fdc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a55      	ldr	r2, [pc, #340]	; (8005de0 <HAL_GPIO_Init+0x188>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d15d      	bne.n	8005d4c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005c96:	2201      	movs	r2, #1
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f003 0201 	and.w	r2, r3, #1
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005cc0:	4a48      	ldr	r2, [pc, #288]	; (8005de4 <HAL_GPIO_Init+0x18c>)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cc8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005cca:	4a46      	ldr	r2, [pc, #280]	; (8005de4 <HAL_GPIO_Init+0x18c>)
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	08da      	lsrs	r2, r3, #3
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3208      	adds	r2, #8
 8005cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	220f      	movs	r2, #15
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	220b      	movs	r2, #11
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	08da      	lsrs	r2, r3, #3
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	3208      	adds	r2, #8
 8005d16:	69f9      	ldr	r1, [r7, #28]
 8005d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	2203      	movs	r2, #3
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	4013      	ands	r3, r2
 8005d32:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	2202      	movs	r2, #2
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e067      	b.n	8005e1c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d003      	beq.n	8005d5c <HAL_GPIO_Init+0x104>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2b12      	cmp	r3, #18
 8005d5a:	d145      	bne.n	8005de8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	08da      	lsrs	r2, r3, #3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3208      	adds	r2, #8
 8005d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	220f      	movs	r2, #15
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 020f 	and.w	r2, r3, #15
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	08da      	lsrs	r2, r3, #3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3208      	adds	r2, #8
 8005da2:	69f9      	ldr	r1, [r7, #28]
 8005da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	2203      	movs	r2, #3
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f003 0203 	and.w	r2, r3, #3
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	e01e      	b.n	8005e1c <HAL_GPIO_Init+0x1c4>
 8005dde:	bf00      	nop
 8005de0:	46020000 	.word	0x46020000
 8005de4:	0800d32c 	.word	0x0800d32c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	2203      	movs	r2, #3
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f003 0203 	and.w	r2, r3, #3
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d00b      	beq.n	8005e3c <HAL_GPIO_Init+0x1e4>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d007      	beq.n	8005e3c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e30:	2b11      	cmp	r3, #17
 8005e32:	d003      	beq.n	8005e3c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b12      	cmp	r3, #18
 8005e3a:	d130      	bne.n	8005e9e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	2203      	movs	r2, #3
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005e72:	2201      	movs	r2, #1
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	091b      	lsrs	r3, r3, #4
 8005e88:	f003 0201 	and.w	r2, r3, #1
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d017      	beq.n	8005ed6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d07c      	beq.n	8005fdc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005ee2:	4a47      	ldr	r2, [pc, #284]	; (8006000 <HAL_GPIO_Init+0x3a8>)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	3318      	adds	r3, #24
 8005eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	220f      	movs	r2, #15
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	43db      	mvns	r3, r3
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	4013      	ands	r3, r2
 8005f04:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	0a9a      	lsrs	r2, r3, #10
 8005f0a:	4b3e      	ldr	r3, [pc, #248]	; (8006004 <HAL_GPIO_Init+0x3ac>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	f002 0203 	and.w	r2, r2, #3
 8005f14:	00d2      	lsls	r2, r2, #3
 8005f16:	4093      	lsls	r3, r2
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005f1e:	4938      	ldr	r1, [pc, #224]	; (8006000 <HAL_GPIO_Init+0x3a8>)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	089b      	lsrs	r3, r3, #2
 8005f24:	3318      	adds	r3, #24
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005f2c:	4b34      	ldr	r3, [pc, #208]	; (8006000 <HAL_GPIO_Init+0x3a8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	43db      	mvns	r3, r3
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005f50:	4a2b      	ldr	r2, [pc, #172]	; (8006000 <HAL_GPIO_Init+0x3a8>)
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005f56:	4b2a      	ldr	r3, [pc, #168]	; (8006000 <HAL_GPIO_Init+0x3a8>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	4013      	ands	r3, r2
 8005f64:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005f7a:	4a21      	ldr	r2, [pc, #132]	; (8006000 <HAL_GPIO_Init+0x3a8>)
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005f80:	4b1f      	ldr	r3, [pc, #124]	; (8006000 <HAL_GPIO_Init+0x3a8>)
 8005f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f86:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005fa6:	4a16      	ldr	r2, [pc, #88]	; (8006000 <HAL_GPIO_Init+0x3a8>)
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8005fae:	4b14      	ldr	r3, [pc, #80]	; (8006000 <HAL_GPIO_Init+0x3a8>)
 8005fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005fd4:	4a0a      	ldr	r2, [pc, #40]	; (8006000 <HAL_GPIO_Init+0x3a8>)
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f47f ae3d 	bne.w	8005c6c <HAL_GPIO_Init+0x14>
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	3724      	adds	r7, #36	; 0x24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	46022000 	.word	0x46022000
 8006004:	002f7f7f 	.word	0x002f7f7f

08006008 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	; 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800601a:	e0bc      	b.n	8006196 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800601c:	2201      	movs	r2, #1
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	fa02 f303 	lsl.w	r3, r2, r3
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	4013      	ands	r3, r2
 8006028:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 80ad 	beq.w	8006190 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a5e      	ldr	r2, [pc, #376]	; (80061b4 <HAL_GPIO_DeInit+0x1ac>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d115      	bne.n	800606a <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800603e:	4a5e      	ldr	r2, [pc, #376]	; (80061b8 <HAL_GPIO_DeInit+0x1b0>)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006046:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8006048:	4a5b      	ldr	r2, [pc, #364]	; (80061b8 <HAL_GPIO_DeInit+0x1b0>)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	4413      	add	r3, r2
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8006054:	4b57      	ldr	r3, [pc, #348]	; (80061b4 <HAL_GPIO_DeInit+0x1ac>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	2101      	movs	r1, #1
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	fa01 f303 	lsl.w	r3, r1, r3
 8006060:	43db      	mvns	r3, r3
 8006062:	4954      	ldr	r1, [pc, #336]	; (80061b4 <HAL_GPIO_DeInit+0x1ac>)
 8006064:	4013      	ands	r3, r2
 8006066:	600b      	str	r3, [r1, #0]
 8006068:	e053      	b.n	8006112 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800606a:	4a54      	ldr	r2, [pc, #336]	; (80061bc <HAL_GPIO_DeInit+0x1b4>)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	089b      	lsrs	r3, r3, #2
 8006070:	3318      	adds	r3, #24
 8006072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006076:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	220f      	movs	r2, #15
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	0a9a      	lsrs	r2, r3, #10
 8006090:	4b4b      	ldr	r3, [pc, #300]	; (80061c0 <HAL_GPIO_DeInit+0x1b8>)
 8006092:	4013      	ands	r3, r2
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	f002 0203 	and.w	r2, r2, #3
 800609a:	00d2      	lsls	r2, r2, #3
 800609c:	4093      	lsls	r3, r2
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d136      	bne.n	8006112 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 80060a4:	4b45      	ldr	r3, [pc, #276]	; (80061bc <HAL_GPIO_DeInit+0x1b4>)
 80060a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	43db      	mvns	r3, r3
 80060ae:	4943      	ldr	r1, [pc, #268]	; (80061bc <HAL_GPIO_DeInit+0x1b4>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 80060b6:	4b41      	ldr	r3, [pc, #260]	; (80061bc <HAL_GPIO_DeInit+0x1b4>)
 80060b8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	43db      	mvns	r3, r3
 80060c0:	493e      	ldr	r1, [pc, #248]	; (80061bc <HAL_GPIO_DeInit+0x1b4>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 80060c8:	4b3c      	ldr	r3, [pc, #240]	; (80061bc <HAL_GPIO_DeInit+0x1b4>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	493a      	ldr	r1, [pc, #232]	; (80061bc <HAL_GPIO_DeInit+0x1b4>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 80060d6:	4b39      	ldr	r3, [pc, #228]	; (80061bc <HAL_GPIO_DeInit+0x1b4>)
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	43db      	mvns	r3, r3
 80060de:	4937      	ldr	r1, [pc, #220]	; (80061bc <HAL_GPIO_DeInit+0x1b4>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	220f      	movs	r2, #15
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 80060f4:	4a31      	ldr	r2, [pc, #196]	; (80061bc <HAL_GPIO_DeInit+0x1b4>)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	089b      	lsrs	r3, r3, #2
 80060fa:	3318      	adds	r3, #24
 80060fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	43da      	mvns	r2, r3
 8006104:	482d      	ldr	r0, [pc, #180]	; (80061bc <HAL_GPIO_DeInit+0x1b4>)
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	089b      	lsrs	r3, r3, #2
 800610a:	400a      	ands	r2, r1
 800610c:	3318      	adds	r3, #24
 800610e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	2103      	movs	r1, #3
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	431a      	orrs	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	08da      	lsrs	r2, r3, #3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	3208      	adds	r2, #8
 800612e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	220f      	movs	r2, #15
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	43db      	mvns	r3, r3
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	08d2      	lsrs	r2, r2, #3
 8006146:	4019      	ands	r1, r3
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	3208      	adds	r2, #8
 800614c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	2103      	movs	r1, #3
 800615a:	fa01 f303 	lsl.w	r3, r1, r3
 800615e:	43db      	mvns	r3, r3
 8006160:	401a      	ands	r2, r3
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	2101      	movs	r1, #1
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	fa01 f303 	lsl.w	r3, r1, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	401a      	ands	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	2103      	movs	r1, #3
 8006184:	fa01 f303 	lsl.w	r3, r1, r3
 8006188:	43db      	mvns	r3, r3
 800618a:	401a      	ands	r2, r3
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	3301      	adds	r3, #1
 8006194:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	fa22 f303 	lsr.w	r3, r2, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f47f af3c 	bne.w	800601c <HAL_GPIO_DeInit+0x14>
  }
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop
 80061a8:	3724      	adds	r7, #36	; 0x24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	46020000 	.word	0x46020000
 80061b8:	0800d32c 	.word	0x0800d32c
 80061bc:	46022000 	.word	0x46022000
 80061c0:	002f7f7f 	.word	0x002f7f7f

080061c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	887b      	ldrh	r3, [r7, #2]
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
 80061e0:	e001      	b.n	80061e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061e2:	2300      	movs	r3, #0
 80061e4:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	807b      	strh	r3, [r7, #2]
 8006200:	4613      	mov	r3, r2
 8006202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006204:	787b      	ldrb	r3, [r7, #1]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800620a:	887a      	ldrh	r2, [r7, #2]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8006210:	e002      	b.n	8006218 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8006212:	887a      	ldrh	r2, [r7, #2]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006236:	887a      	ldrh	r2, [r7, #2]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4013      	ands	r3, r2
 800623c:	041a      	lsls	r2, r3, #16
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	43d9      	mvns	r1, r3
 8006242:	887b      	ldrh	r3, [r7, #2]
 8006244:	400b      	ands	r3, r1
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	619a      	str	r2, [r3, #24]
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e081      	b.n	800636e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fc ff74 	bl	800316c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2224      	movs	r2, #36	; 0x24
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d107      	bne.n	80062d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ce:	609a      	str	r2, [r3, #8]
 80062d0:	e006      	b.n	80062e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80062de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d104      	bne.n	80062f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69d9      	ldr	r1, [r3, #28]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1a      	ldr	r2, [r3, #32]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e021      	b.n	80063cc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2224      	movs	r2, #36	; 0x24
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0201 	bic.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7fc ffa9 	bl	80032f8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	4608      	mov	r0, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	461a      	mov	r2, r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	817b      	strh	r3, [r7, #10]
 80063e6:	460b      	mov	r3, r1
 80063e8:	813b      	strh	r3, [r7, #8]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	f040 80f9 	bne.w	80065ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <HAL_I2C_Mem_Write+0x34>
 8006402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	d105      	bne.n	8006414 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800640e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e0ed      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <HAL_I2C_Mem_Write+0x4e>
 800641e:	2302      	movs	r3, #2
 8006420:	e0e6      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800642a:	f7fd fd0b 	bl	8003e44 <HAL_GetTick>
 800642e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	2319      	movs	r3, #25
 8006436:	2201      	movs	r2, #1
 8006438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fac3 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e0d1      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2221      	movs	r2, #33	; 0x21
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2240      	movs	r2, #64	; 0x40
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a3a      	ldr	r2, [r7, #32]
 8006466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800646c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006474:	88f8      	ldrh	r0, [r7, #6]
 8006476:	893a      	ldrh	r2, [r7, #8]
 8006478:	8979      	ldrh	r1, [r7, #10]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	4603      	mov	r3, r0
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f9d3 	bl	8006830 <I2C_RequestMemoryWrite>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0a9      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2bff      	cmp	r3, #255	; 0xff
 80064a4:	d90e      	bls.n	80064c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	22ff      	movs	r2, #255	; 0xff
 80064aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	8979      	ldrh	r1, [r7, #10]
 80064b4:	2300      	movs	r3, #0
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fc2b 	bl	8006d18 <I2C_TransferConfig>
 80064c2:	e00f      	b.n	80064e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	8979      	ldrh	r1, [r7, #10]
 80064d6:	2300      	movs	r3, #0
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fc1a 	bl	8006d18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 faad 	bl	8006a48 <I2C_WaitOnTXISFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e07b      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d034      	beq.n	800659c <HAL_I2C_Mem_Write+0x1c8>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006536:	2b00      	cmp	r3, #0
 8006538:	d130      	bne.n	800659c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	2200      	movs	r2, #0
 8006542:	2180      	movs	r1, #128	; 0x80
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fa3f 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e04d      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	2bff      	cmp	r3, #255	; 0xff
 800655c:	d90e      	bls.n	800657c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22ff      	movs	r2, #255	; 0xff
 8006562:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	b2da      	uxtb	r2, r3
 800656a:	8979      	ldrh	r1, [r7, #10]
 800656c:	2300      	movs	r3, #0
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fbcf 	bl	8006d18 <I2C_TransferConfig>
 800657a:	e00f      	b.n	800659c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658a:	b2da      	uxtb	r2, r3
 800658c:	8979      	ldrh	r1, [r7, #10]
 800658e:	2300      	movs	r3, #0
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fbbe 	bl	8006d18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d19e      	bne.n	80064e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fa8c 	bl	8006ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e01a      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2220      	movs	r2, #32
 80065c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6859      	ldr	r1, [r3, #4]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <HAL_I2C_Mem_Write+0x224>)
 80065ce:	400b      	ands	r3, r1
 80065d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e000      	b.n	80065f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80065ee:	2302      	movs	r3, #2
  }
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	fe00e800 	.word	0xfe00e800

080065fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	4608      	mov	r0, r1
 8006606:	4611      	mov	r1, r2
 8006608:	461a      	mov	r2, r3
 800660a:	4603      	mov	r3, r0
 800660c:	817b      	strh	r3, [r7, #10]
 800660e:	460b      	mov	r3, r1
 8006610:	813b      	strh	r3, [r7, #8]
 8006612:	4613      	mov	r3, r2
 8006614:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b20      	cmp	r3, #32
 8006620:	f040 80fd 	bne.w	800681e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_I2C_Mem_Read+0x34>
 800662a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d105      	bne.n	800663c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006636:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e0f1      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_I2C_Mem_Read+0x4e>
 8006646:	2302      	movs	r3, #2
 8006648:	e0ea      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006652:	f7fd fbf7 	bl	8003e44 <HAL_GetTick>
 8006656:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	2319      	movs	r3, #25
 800665e:	2201      	movs	r2, #1
 8006660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f9af 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0d5      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2222      	movs	r2, #34	; 0x22
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2240      	movs	r2, #64	; 0x40
 8006680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800669c:	88f8      	ldrh	r0, [r7, #6]
 800669e:	893a      	ldrh	r2, [r7, #8]
 80066a0:	8979      	ldrh	r1, [r7, #10]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	4603      	mov	r3, r0
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f913 	bl	80068d8 <I2C_RequestMemoryRead>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e0ad      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2bff      	cmp	r3, #255	; 0xff
 80066cc:	d90e      	bls.n	80066ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	22ff      	movs	r2, #255	; 0xff
 80066d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	8979      	ldrh	r1, [r7, #10]
 80066dc:	4b52      	ldr	r3, [pc, #328]	; (8006828 <HAL_I2C_Mem_Read+0x22c>)
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 fb17 	bl	8006d18 <I2C_TransferConfig>
 80066ea:	e00f      	b.n	800670c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	8979      	ldrh	r1, [r7, #10]
 80066fe:	4b4a      	ldr	r3, [pc, #296]	; (8006828 <HAL_I2C_Mem_Read+0x22c>)
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fb06 	bl	8006d18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	2200      	movs	r2, #0
 8006714:	2104      	movs	r1, #4
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f956 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e07c      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d034      	beq.n	80067cc <HAL_I2C_Mem_Read+0x1d0>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006766:	2b00      	cmp	r3, #0
 8006768:	d130      	bne.n	80067cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	2200      	movs	r2, #0
 8006772:	2180      	movs	r1, #128	; 0x80
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f927 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e04d      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2bff      	cmp	r3, #255	; 0xff
 800678c:	d90e      	bls.n	80067ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	22ff      	movs	r2, #255	; 0xff
 8006792:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006798:	b2da      	uxtb	r2, r3
 800679a:	8979      	ldrh	r1, [r7, #10]
 800679c:	2300      	movs	r3, #0
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fab7 	bl	8006d18 <I2C_TransferConfig>
 80067aa:	e00f      	b.n	80067cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	8979      	ldrh	r1, [r7, #10]
 80067be:	2300      	movs	r3, #0
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 faa6 	bl	8006d18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d19a      	bne.n	800670c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f974 	bl	8006ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e01a      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2220      	movs	r2, #32
 80067f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6859      	ldr	r1, [r3, #4]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <HAL_I2C_Mem_Read+0x230>)
 80067fe:	400b      	ands	r3, r1
 8006800:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	e000      	b.n	8006820 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800681e:	2302      	movs	r3, #2
  }
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	80002400 	.word	0x80002400
 800682c:	fe00e800 	.word	0xfe00e800

08006830 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	461a      	mov	r2, r3
 800683e:	4603      	mov	r3, r0
 8006840:	817b      	strh	r3, [r7, #10]
 8006842:	460b      	mov	r3, r1
 8006844:	813b      	strh	r3, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	b2da      	uxtb	r2, r3
 800684e:	8979      	ldrh	r1, [r7, #10]
 8006850:	4b20      	ldr	r3, [pc, #128]	; (80068d4 <I2C_RequestMemoryWrite+0xa4>)
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 fa5d 	bl	8006d18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	69b9      	ldr	r1, [r7, #24]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f8f0 	bl	8006a48 <I2C_WaitOnTXISFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e02c      	b.n	80068cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d105      	bne.n	8006884 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006878:	893b      	ldrh	r3, [r7, #8]
 800687a:	b2da      	uxtb	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	629a      	str	r2, [r3, #40]	; 0x28
 8006882:	e015      	b.n	80068b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006884:	893b      	ldrh	r3, [r7, #8]
 8006886:	0a1b      	lsrs	r3, r3, #8
 8006888:	b29b      	uxth	r3, r3
 800688a:	b2da      	uxtb	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	69b9      	ldr	r1, [r7, #24]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f8d6 	bl	8006a48 <I2C_WaitOnTXISFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e012      	b.n	80068cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068a6:	893b      	ldrh	r3, [r7, #8]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2200      	movs	r2, #0
 80068b8:	2180      	movs	r1, #128	; 0x80
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f884 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	80002000 	.word	0x80002000

080068d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	817b      	strh	r3, [r7, #10]
 80068ea:	460b      	mov	r3, r1
 80068ec:	813b      	strh	r3, [r7, #8]
 80068ee:	4613      	mov	r3, r2
 80068f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	8979      	ldrh	r1, [r7, #10]
 80068f8:	4b20      	ldr	r3, [pc, #128]	; (800697c <I2C_RequestMemoryRead+0xa4>)
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	2300      	movs	r3, #0
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fa0a 	bl	8006d18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	69b9      	ldr	r1, [r7, #24]
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f89d 	bl	8006a48 <I2C_WaitOnTXISFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e02c      	b.n	8006972 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d105      	bne.n	800692a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800691e:	893b      	ldrh	r3, [r7, #8]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	629a      	str	r2, [r3, #40]	; 0x28
 8006928:	e015      	b.n	8006956 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800692a:	893b      	ldrh	r3, [r7, #8]
 800692c:	0a1b      	lsrs	r3, r3, #8
 800692e:	b29b      	uxth	r3, r3
 8006930:	b2da      	uxtb	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	69b9      	ldr	r1, [r7, #24]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f883 	bl	8006a48 <I2C_WaitOnTXISFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e012      	b.n	8006972 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800694c:	893b      	ldrh	r3, [r7, #8]
 800694e:	b2da      	uxtb	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2200      	movs	r2, #0
 800695e:	2140      	movs	r1, #64	; 0x40
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f831 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	80002000 	.word	0x80002000

08006980 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b02      	cmp	r3, #2
 8006994:	d103      	bne.n	800699e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d007      	beq.n	80069bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	619a      	str	r2, [r3, #24]
  }
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	4613      	mov	r3, r2
 80069d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069d8:	e022      	b.n	8006a20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d01e      	beq.n	8006a20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e2:	f7fd fa2f 	bl	8003e44 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d302      	bcc.n	80069f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d113      	bne.n	8006a20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fc:	f043 0220 	orr.w	r2, r3, #32
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e00f      	b.n	8006a40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d0cd      	beq.n	80069da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a54:	e02c      	b.n	8006ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 f870 	bl	8006b40 <I2C_IsErrorOccurred>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e02a      	b.n	8006ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a70:	d01e      	beq.n	8006ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a72:	f7fd f9e7 	bl	8003e44 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d302      	bcc.n	8006a88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d113      	bne.n	8006ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8c:	f043 0220 	orr.w	r2, r3, #32
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e007      	b.n	8006ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d1cb      	bne.n	8006a56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ad4:	e028      	b.n	8006b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 f830 	bl	8006b40 <I2C_IsErrorOccurred>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e026      	b.n	8006b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aea:	f7fd f9ab 	bl	8003e44 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d302      	bcc.n	8006b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d113      	bne.n	8006b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b04:	f043 0220 	orr.w	r2, r3, #32
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e007      	b.n	8006b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d1cf      	bne.n	8006ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08a      	sub	sp, #40	; 0x28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d075      	beq.n	8006c58 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2210      	movs	r2, #16
 8006b72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b74:	e056      	b.n	8006c24 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d052      	beq.n	8006c24 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b7e:	f7fd f961 	bl	8003e44 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d302      	bcc.n	8006b94 <I2C_IsErrorOccurred+0x54>
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d147      	bne.n	8006c24 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ba6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb6:	d12e      	bne.n	8006c16 <I2C_IsErrorOccurred+0xd6>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bbe:	d02a      	beq.n	8006c16 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006bc0:	7cfb      	ldrb	r3, [r7, #19]
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d027      	beq.n	8006c16 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006bd6:	f7fd f935 	bl	8003e44 <HAL_GetTick>
 8006bda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bdc:	e01b      	b.n	8006c16 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006bde:	f7fd f931 	bl	8003e44 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b19      	cmp	r3, #25
 8006bea:	d914      	bls.n	8006c16 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf0:	f043 0220 	orr.w	r2, r3, #32
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f003 0320 	and.w	r3, r3, #32
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d1dc      	bne.n	8006bde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d003      	beq.n	8006c3a <I2C_IsErrorOccurred+0xfa>
 8006c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d09d      	beq.n	8006b76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2220      	movs	r2, #32
 8006c48:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	f043 0304 	orr.w	r3, r3, #4
 8006c50:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00b      	beq.n	8006c82 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	f043 0301 	orr.w	r3, r3, #1
 8006c70:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	f043 0308 	orr.w	r3, r3, #8
 8006c92:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	f043 0302 	orr.w	r3, r3, #2
 8006cb4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01c      	beq.n	8006d08 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fe56 	bl	8006980 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6859      	ldr	r1, [r3, #4]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <I2C_IsErrorOccurred+0x1d4>)
 8006ce0:	400b      	ands	r3, r1
 8006ce2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3728      	adds	r7, #40	; 0x28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	fe00e800 	.word	0xfe00e800

08006d18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	817b      	strh	r3, [r7, #10]
 8006d26:	4613      	mov	r3, r2
 8006d28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d2a:	897b      	ldrh	r3, [r7, #10]
 8006d2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d30:	7a7b      	ldrb	r3, [r7, #9]
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	0d5b      	lsrs	r3, r3, #21
 8006d52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006d56:	4b08      	ldr	r3, [pc, #32]	; (8006d78 <I2C_TransferConfig+0x60>)
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	43db      	mvns	r3, r3
 8006d5c:	ea02 0103 	and.w	r1, r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	03ff63ff 	.word	0x03ff63ff

08006d7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d138      	bne.n	8006e04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e032      	b.n	8006e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2224      	movs	r2, #36	; 0x24
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0201 	bic.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6819      	ldr	r1, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0201 	orr.w	r2, r2, #1
 8006dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	e000      	b.n	8006e06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e04:	2302      	movs	r3, #2
  }
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b20      	cmp	r3, #32
 8006e26:	d139      	bne.n	8006e9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e033      	b.n	8006e9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2224      	movs	r2, #36	; 0x24
 8006e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0201 	bic.w	r2, r2, #1
 8006e54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	021b      	lsls	r3, r3, #8
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	e000      	b.n	8006e9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e9c:	2302      	movs	r3, #2
  }
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006eb0:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <HAL_ICACHE_Enable+0x1c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a04      	ldr	r2, [pc, #16]	; (8006ec8 <HAL_ICACHE_Enable+0x1c>)
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	40030400 	.word	0x40030400

08006ecc <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f043 0201 	orr.w	r2, r3, #1
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	601a      	str	r2, [r3, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f023 0201 	bic.w	r2, r3, #1
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	601a      	str	r2, [r3, #0]
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006f18:	f7fc ff94 	bl	8003e44 <HAL_GetTick>
 8006f1c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
 8006f28:	e0a5      	b.n	8007076 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f040 809e 	bne.w	8007076 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fc fbb0 	bl	80036a0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006f40:	f241 3188 	movw	r1, #5000	; 0x1388
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f9ec 	bl	8007322 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	4b4b      	ldr	r3, [pc, #300]	; (8007080 <HAL_OSPI_Init+0x174>)
 8006f52:	4013      	ands	r3, r2
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	68d1      	ldr	r1, [r2, #12]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6912      	ldr	r2, [r2, #16]
 8006f5c:	3a01      	subs	r2, #1
 8006f5e:	0412      	lsls	r2, r2, #16
 8006f60:	4311      	orrs	r1, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6952      	ldr	r2, [r2, #20]
 8006f66:	3a01      	subs	r2, #1
 8006f68:	0212      	lsls	r2, r2, #8
 8006f6a:	4311      	orrs	r1, r2
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f70:	4311      	orrs	r1, r2
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	69d2      	ldr	r2, [r2, #28]
 8006f76:	4311      	orrs	r1, r2
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1a      	ldr	r2, [r3, #32]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006fb0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	021a      	lsls	r2, r3, #8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2120      	movs	r1, #32
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fea3 	bl	8007d24 <OSPI_WaitFlagStateUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d146      	bne.n	8007076 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	1e5a      	subs	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800701e:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f042 0201 	orr.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d107      	bne.n	800705e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0202 	orr.w	r2, r2, #2
 800705c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007066:	d103      	bne.n	8007070 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	651a      	str	r2, [r3, #80]	; 0x50
 800706e:	e002      	b.n	8007076 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8007076:	7bfb      	ldrb	r3, [r7, #15]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	f8e0c0f4 	.word	0xf8e0c0f4

08007084 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08a      	sub	sp, #40	; 0x28
 8007088:	af02      	add	r7, sp, #8
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007090:	f7fc fed8 	bl	8003e44 <HAL_GetTick>
 8007094:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a0:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d104      	bne.n	80070b2 <HAL_OSPI_Command+0x2e>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070b0:	d115      	bne.n	80070de <HAL_OSPI_Command+0x5a>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b14      	cmp	r3, #20
 80070b6:	d107      	bne.n	80070c8 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d00e      	beq.n	80070de <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d00a      	beq.n	80070de <HAL_OSPI_Command+0x5a>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2b24      	cmp	r3, #36	; 0x24
 80070cc:	d15b      	bne.n	8007186 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d003      	beq.n	80070de <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d153      	bne.n	8007186 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2200      	movs	r2, #0
 80070e6:	2120      	movs	r1, #32
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 fe1b 	bl	8007d24 <OSPI_WaitFlagStateUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80070f2:	7ffb      	ldrb	r3, [r7, #31]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d14c      	bne.n	8007192 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80070fe:	68b9      	ldr	r1, [r7, #8]
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 fe4f 	bl	8007da4 <OSPI_ConfigCmd>
 8007106:	4603      	mov	r3, r0
 8007108:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800710a:	7ffb      	ldrb	r3, [r7, #31]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d140      	bne.n	8007192 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10e      	bne.n	8007136 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2201      	movs	r2, #1
 8007120:	2102      	movs	r1, #2
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 fdfe 	bl	8007d24 <OSPI_WaitFlagStateUntilTimeout>
 8007128:	4603      	mov	r3, r0
 800712a:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2202      	movs	r2, #2
 8007132:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8007134:	e02d      	b.n	8007192 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2204      	movs	r2, #4
 8007142:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8007144:	e025      	b.n	8007192 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d10b      	bne.n	8007166 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007152:	2b24      	cmp	r3, #36	; 0x24
 8007154:	d103      	bne.n	800715e <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2204      	movs	r2, #4
 800715a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800715c:	e019      	b.n	8007192 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2214      	movs	r2, #20
 8007162:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8007164:	e015      	b.n	8007192 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d111      	bne.n	8007192 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007172:	2b14      	cmp	r3, #20
 8007174:	d103      	bne.n	800717e <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2204      	movs	r2, #4
 800717a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800717c:	e009      	b.n	8007192 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2224      	movs	r2, #36	; 0x24
 8007182:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8007184:	e005      	b.n	8007192 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2210      	movs	r2, #16
 800718e:	655a      	str	r2, [r3, #84]	; 0x54
 8007190:	e000      	b.n	8007194 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8007192:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007194:	7ffb      	ldrb	r3, [r7, #31]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3720      	adds	r7, #32
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b086      	sub	sp, #24
 80071a2:	af02      	add	r7, sp, #8
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80071a8:	f7fc fe4c 	bl	8003e44 <HAL_GetTick>
 80071ac:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d136      	bne.n	8007224 <HAL_OSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	2120      	movs	r1, #32
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fdae 	bl	8007d24 <OSPI_WaitFlagStateUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d12d      	bne.n	800722e <HAL_OSPI_MemoryMapped+0x90>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2288      	movs	r2, #136	; 0x88
 80071d6:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d111      	bne.n	8007204 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	6852      	ldr	r2, [r2, #4]
 80071e8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2210      	movs	r2, #16
 80071f2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007202:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800720e:	f023 0308 	bic.w	r3, r3, #8
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e004      	b.n	800722e <HAL_OSPI_MemoryMapped+0x90>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2210      	movs	r2, #16
 800722c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af02      	add	r7, sp, #8
 800723e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007244:	f7fc fdfe 	bl	8003e44 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724e:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <HAL_OSPI_Abort+0x2c>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b00      	cmp	r3, #0
 8007262:	d052      	beq.n	800730a <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	d014      	beq.n	800729c <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0204 	bic.w	r2, r2, #4
 8007280:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007286:	4618      	mov	r0, r3
 8007288:	f7fd fb7b 	bl	8004982 <HAL_DMA_Abort>
 800728c:	4603      	mov	r3, r0
 800728e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2204      	movs	r2, #4
 800729a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d02b      	beq.n	8007302 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0202 	orr.w	r2, r2, #2
 80072b8:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2201      	movs	r2, #1
 80072c4:	2102      	movs	r1, #2
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fd2c 	bl	8007d24 <OSPI_WaitFlagStateUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d11f      	bne.n	8007316 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2202      	movs	r2, #2
 80072dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2200      	movs	r2, #0
 80072e8:	2120      	movs	r1, #32
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fd1a 	bl	8007d24 <OSPI_WaitFlagStateUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10d      	bne.n	8007316 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2202      	movs	r2, #2
 80072fe:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007300:	e009      	b.n	8007316 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2202      	movs	r2, #2
 8007306:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007308:	e005      	b.n	8007316 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2210      	movs	r2, #16
 8007312:	655a      	str	r2, [r3, #84]	; 0x54
 8007314:	e000      	b.n	8007318 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007316:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007318:	7dfb      	ldrb	r3, [r7, #23]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b094      	sub	sp, #80	; 0x50
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a9d      	ldr	r2, [pc, #628]	; (80075d4 <HAL_OSPIM_Config+0x294>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d105      	bne.n	800736e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800736c:	e004      	b.n	8007378 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800736e:	2301      	movs	r3, #1
 8007370:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007378:	2300      	movs	r3, #0
 800737a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800737e:	e01d      	b.n	80073bc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8007380:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007384:	3301      	adds	r3, #1
 8007386:	b2d8      	uxtb	r0, r3
 8007388:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800738c:	f107 0114 	add.w	r1, r7, #20
 8007390:	4613      	mov	r3, r2
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	4413      	add	r3, r2
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	440b      	add	r3, r1
 800739a:	4619      	mov	r1, r3
 800739c:	f000 fe7c 	bl	8008098 <OSPIM_GetConfig>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2208      	movs	r2, #8
 80073b0:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80073b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80073b6:	3301      	adds	r3, #1
 80073b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80073bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d9dd      	bls.n	8007380 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80073c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f040 849e 	bne.w	8007d0a <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80073ce:	4b81      	ldr	r3, [pc, #516]	; (80075d4 <HAL_OSPIM_Config+0x294>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00b      	beq.n	80073f2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80073da:	4b7e      	ldr	r3, [pc, #504]	; (80075d4 <HAL_OSPIM_Config+0x294>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a7d      	ldr	r2, [pc, #500]	; (80075d4 <HAL_OSPIM_Config+0x294>)
 80073e0:	f023 0301 	bic.w	r3, r3, #1
 80073e4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80073e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80073ea:	f043 0301 	orr.w	r3, r3, #1
 80073ee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80073f2:	4b79      	ldr	r3, [pc, #484]	; (80075d8 <HAL_OSPIM_Config+0x298>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80073fe:	4b76      	ldr	r3, [pc, #472]	; (80075d8 <HAL_OSPIM_Config+0x298>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a75      	ldr	r2, [pc, #468]	; (80075d8 <HAL_OSPIM_Config+0x298>)
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800740a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800740e:	f043 0302 	orr.w	r3, r3, #2
 8007412:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007416:	4971      	ldr	r1, [pc, #452]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 8007418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800741a:	4613      	mov	r3, r2
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	4413      	add	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	3350      	adds	r3, #80	; 0x50
 8007424:	443b      	add	r3, r7
 8007426:	3b34      	subs	r3, #52	; 0x34
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3b01      	subs	r3, #1
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	440b      	add	r3, r1
 8007430:	6859      	ldr	r1, [r3, #4]
 8007432:	486a      	ldr	r0, [pc, #424]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 8007434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007436:	4613      	mov	r3, r2
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	4413      	add	r3, r2
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	3350      	adds	r3, #80	; 0x50
 8007440:	443b      	add	r3, r7
 8007442:	3b34      	subs	r3, #52	; 0x34
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3b01      	subs	r3, #1
 8007448:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4403      	add	r3, r0
 8007450:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007452:	4b62      	ldr	r3, [pc, #392]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 80c0 	beq.w	80075e0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007460:	4b5e      	ldr	r3, [pc, #376]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a5d      	ldr	r2, [pc, #372]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 8007466:	f023 0301 	bic.w	r3, r3, #1
 800746a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800746c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007470:	2b01      	cmp	r3, #1
 8007472:	f040 8162 	bne.w	800773a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8007476:	4959      	ldr	r1, [pc, #356]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 8007478:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800747c:	4613      	mov	r3, r2
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	4413      	add	r3, r2
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	3350      	adds	r3, #80	; 0x50
 8007486:	443b      	add	r3, r7
 8007488:	3b3c      	subs	r3, #60	; 0x3c
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3b01      	subs	r3, #1
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	6859      	ldr	r1, [r3, #4]
 8007494:	4851      	ldr	r0, [pc, #324]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 8007496:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800749a:	4613      	mov	r3, r2
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	4413      	add	r3, r2
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	3350      	adds	r3, #80	; 0x50
 80074a4:	443b      	add	r3, r7
 80074a6:	3b3c      	subs	r3, #60	; 0x3c
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	f041 0202 	orr.w	r2, r1, #2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4403      	add	r3, r0
 80074b4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80074b6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074ba:	4613      	mov	r3, r2
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	4413      	add	r3, r2
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	3350      	adds	r3, #80	; 0x50
 80074c4:	443b      	add	r3, r7
 80074c6:	3b38      	subs	r3, #56	; 0x38
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d01f      	beq.n	800750e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80074ce:	4943      	ldr	r1, [pc, #268]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 80074d0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074d4:	4613      	mov	r3, r2
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	4413      	add	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	3350      	adds	r3, #80	; 0x50
 80074de:	443b      	add	r3, r7
 80074e0:	3b38      	subs	r3, #56	; 0x38
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	6859      	ldr	r1, [r3, #4]
 80074ec:	483b      	ldr	r0, [pc, #236]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 80074ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074f2:	4613      	mov	r3, r2
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	4413      	add	r3, r2
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	3350      	adds	r3, #80	; 0x50
 80074fc:	443b      	add	r3, r7
 80074fe:	3b38      	subs	r3, #56	; 0x38
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3b01      	subs	r3, #1
 8007504:	f041 0220 	orr.w	r2, r1, #32
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4403      	add	r3, r0
 800750c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800750e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007512:	4613      	mov	r3, r2
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	4413      	add	r3, r2
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	3350      	adds	r3, #80	; 0x50
 800751c:	443b      	add	r3, r7
 800751e:	3b30      	subs	r3, #48	; 0x30
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d023      	beq.n	800756e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007526:	492d      	ldr	r1, [pc, #180]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 8007528:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800752c:	4613      	mov	r3, r2
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	4413      	add	r3, r2
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	3350      	adds	r3, #80	; 0x50
 8007536:	443b      	add	r3, r7
 8007538:	3b30      	subs	r3, #48	; 0x30
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3b01      	subs	r3, #1
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	6859      	ldr	r1, [r3, #4]
 8007548:	4824      	ldr	r0, [pc, #144]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 800754a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800754e:	4613      	mov	r3, r2
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4413      	add	r3, r2
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	3350      	adds	r3, #80	; 0x50
 8007558:	443b      	add	r3, r7
 800755a:	3b30      	subs	r3, #48	; 0x30
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3b01      	subs	r3, #1
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4403      	add	r3, r0
 800756c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800756e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007572:	4613      	mov	r3, r2
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	4413      	add	r3, r2
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	3350      	adds	r3, #80	; 0x50
 800757c:	443b      	add	r3, r7
 800757e:	3b2c      	subs	r3, #44	; 0x2c
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 80d9 	beq.w	800773a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007588:	4914      	ldr	r1, [pc, #80]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 800758a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800758e:	4613      	mov	r3, r2
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	4413      	add	r3, r2
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	3350      	adds	r3, #80	; 0x50
 8007598:	443b      	add	r3, r7
 800759a:	3b2c      	subs	r3, #44	; 0x2c
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3b01      	subs	r3, #1
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	6859      	ldr	r1, [r3, #4]
 80075aa:	480c      	ldr	r0, [pc, #48]	; (80075dc <HAL_OSPIM_Config+0x29c>)
 80075ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80075b0:	4613      	mov	r3, r2
 80075b2:	005b      	lsls	r3, r3, #1
 80075b4:	4413      	add	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	3350      	adds	r3, #80	; 0x50
 80075ba:	443b      	add	r3, r7
 80075bc:	3b2c      	subs	r3, #44	; 0x2c
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4403      	add	r3, r0
 80075ce:	605a      	str	r2, [r3, #4]
 80075d0:	e0b3      	b.n	800773a <HAL_OSPIM_Config+0x3fa>
 80075d2:	bf00      	nop
 80075d4:	420d1400 	.word	0x420d1400
 80075d8:	420d2400 	.word	0x420d2400
 80075dc:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80075e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075e2:	4613      	mov	r3, r2
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	4413      	add	r3, r2
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	3350      	adds	r3, #80	; 0x50
 80075ec:	443b      	add	r3, r7
 80075ee:	3b3c      	subs	r3, #60	; 0x3c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 80a1 	beq.w	800773a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80075f8:	4993      	ldr	r1, [pc, #588]	; (8007848 <HAL_OSPIM_Config+0x508>)
 80075fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075fc:	4613      	mov	r3, r2
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	4413      	add	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	3350      	adds	r3, #80	; 0x50
 8007606:	443b      	add	r3, r7
 8007608:	3b3c      	subs	r3, #60	; 0x3c
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3b01      	subs	r3, #1
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	6859      	ldr	r1, [r3, #4]
 8007614:	488c      	ldr	r0, [pc, #560]	; (8007848 <HAL_OSPIM_Config+0x508>)
 8007616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007618:	4613      	mov	r3, r2
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	4413      	add	r3, r2
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	3350      	adds	r3, #80	; 0x50
 8007622:	443b      	add	r3, r7
 8007624:	3b3c      	subs	r3, #60	; 0x3c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3b01      	subs	r3, #1
 800762a:	f021 0201 	bic.w	r2, r1, #1
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4403      	add	r3, r0
 8007632:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007636:	4613      	mov	r3, r2
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	4413      	add	r3, r2
 800763c:	00db      	lsls	r3, r3, #3
 800763e:	3350      	adds	r3, #80	; 0x50
 8007640:	443b      	add	r3, r7
 8007642:	3b38      	subs	r3, #56	; 0x38
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01d      	beq.n	8007686 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800764a:	497f      	ldr	r1, [pc, #508]	; (8007848 <HAL_OSPIM_Config+0x508>)
 800764c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800764e:	4613      	mov	r3, r2
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	4413      	add	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	3350      	adds	r3, #80	; 0x50
 8007658:	443b      	add	r3, r7
 800765a:	3b38      	subs	r3, #56	; 0x38
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3b01      	subs	r3, #1
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	440b      	add	r3, r1
 8007664:	6859      	ldr	r1, [r3, #4]
 8007666:	4878      	ldr	r0, [pc, #480]	; (8007848 <HAL_OSPIM_Config+0x508>)
 8007668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800766a:	4613      	mov	r3, r2
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	4413      	add	r3, r2
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	3350      	adds	r3, #80	; 0x50
 8007674:	443b      	add	r3, r7
 8007676:	3b38      	subs	r3, #56	; 0x38
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3b01      	subs	r3, #1
 800767c:	f021 0210 	bic.w	r2, r1, #16
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4403      	add	r3, r0
 8007684:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007688:	4613      	mov	r3, r2
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	4413      	add	r3, r2
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	3350      	adds	r3, #80	; 0x50
 8007692:	443b      	add	r3, r7
 8007694:	3b30      	subs	r3, #48	; 0x30
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d021      	beq.n	80076e0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800769c:	496a      	ldr	r1, [pc, #424]	; (8007848 <HAL_OSPIM_Config+0x508>)
 800769e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076a0:	4613      	mov	r3, r2
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	3350      	adds	r3, #80	; 0x50
 80076aa:	443b      	add	r3, r7
 80076ac:	3b30      	subs	r3, #48	; 0x30
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	4862      	ldr	r0, [pc, #392]	; (8007848 <HAL_OSPIM_Config+0x508>)
 80076be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c0:	4613      	mov	r3, r2
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	4413      	add	r3, r2
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	3350      	adds	r3, #80	; 0x50
 80076ca:	443b      	add	r3, r7
 80076cc:	3b30      	subs	r3, #48	; 0x30
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4403      	add	r3, r0
 80076de:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80076e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076e2:	4613      	mov	r3, r2
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4413      	add	r3, r2
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	3350      	adds	r3, #80	; 0x50
 80076ec:	443b      	add	r3, r7
 80076ee:	3b2c      	subs	r3, #44	; 0x2c
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d021      	beq.n	800773a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80076f6:	4954      	ldr	r1, [pc, #336]	; (8007848 <HAL_OSPIM_Config+0x508>)
 80076f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076fa:	4613      	mov	r3, r2
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	4413      	add	r3, r2
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	3350      	adds	r3, #80	; 0x50
 8007704:	443b      	add	r3, r7
 8007706:	3b2c      	subs	r3, #44	; 0x2c
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3b01      	subs	r3, #1
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	6859      	ldr	r1, [r3, #4]
 8007716:	484c      	ldr	r0, [pc, #304]	; (8007848 <HAL_OSPIM_Config+0x508>)
 8007718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800771a:	4613      	mov	r3, r2
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	4413      	add	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	3350      	adds	r3, #80	; 0x50
 8007724:	443b      	add	r3, r7
 8007726:	3b2c      	subs	r3, #44	; 0x2c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3b01      	subs	r3, #1
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4403      	add	r3, r0
 8007738:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	6819      	ldr	r1, [r3, #0]
 800773e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007742:	4613      	mov	r3, r2
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	4413      	add	r3, r2
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	3350      	adds	r3, #80	; 0x50
 800774c:	443b      	add	r3, r7
 800774e:	3b3c      	subs	r3, #60	; 0x3c
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4299      	cmp	r1, r3
 8007754:	d038      	beq.n	80077c8 <HAL_OSPIM_Config+0x488>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6859      	ldr	r1, [r3, #4]
 800775a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800775e:	4613      	mov	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	3350      	adds	r3, #80	; 0x50
 8007768:	443b      	add	r3, r7
 800776a:	3b38      	subs	r3, #56	; 0x38
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4299      	cmp	r1, r3
 8007770:	d02a      	beq.n	80077c8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	6899      	ldr	r1, [r3, #8]
 8007776:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800777a:	4613      	mov	r3, r2
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	4413      	add	r3, r2
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	3350      	adds	r3, #80	; 0x50
 8007784:	443b      	add	r3, r7
 8007786:	3b34      	subs	r3, #52	; 0x34
 8007788:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800778a:	4299      	cmp	r1, r3
 800778c:	d01c      	beq.n	80077c8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	68d9      	ldr	r1, [r3, #12]
 8007792:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007796:	4613      	mov	r3, r2
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	4413      	add	r3, r2
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	3350      	adds	r3, #80	; 0x50
 80077a0:	443b      	add	r3, r7
 80077a2:	3b30      	subs	r3, #48	; 0x30
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4299      	cmp	r1, r3
 80077a8:	d00e      	beq.n	80077c8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	6919      	ldr	r1, [r3, #16]
 80077ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077b2:	4613      	mov	r3, r2
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	4413      	add	r3, r2
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	3350      	adds	r3, #80	; 0x50
 80077bc:	443b      	add	r3, r7
 80077be:	3b2c      	subs	r3, #44	; 0x2c
 80077c0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80077c2:	4299      	cmp	r1, r3
 80077c4:	f040 810e 	bne.w	80079e4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6819      	ldr	r1, [r3, #0]
 80077cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077d0:	4613      	mov	r3, r2
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	4413      	add	r3, r2
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	3350      	adds	r3, #80	; 0x50
 80077da:	443b      	add	r3, r7
 80077dc:	3b3c      	subs	r3, #60	; 0x3c
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4299      	cmp	r1, r3
 80077e2:	d133      	bne.n	800784c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6859      	ldr	r1, [r3, #4]
 80077e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077ec:	4613      	mov	r3, r2
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	4413      	add	r3, r2
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	3350      	adds	r3, #80	; 0x50
 80077f6:	443b      	add	r3, r7
 80077f8:	3b38      	subs	r3, #56	; 0x38
 80077fa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80077fc:	4299      	cmp	r1, r3
 80077fe:	d125      	bne.n	800784c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	68d9      	ldr	r1, [r3, #12]
 8007804:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007808:	4613      	mov	r3, r2
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	4413      	add	r3, r2
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	3350      	adds	r3, #80	; 0x50
 8007812:	443b      	add	r3, r7
 8007814:	3b30      	subs	r3, #48	; 0x30
 8007816:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007818:	4299      	cmp	r1, r3
 800781a:	d117      	bne.n	800784c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6919      	ldr	r1, [r3, #16]
 8007820:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007824:	4613      	mov	r3, r2
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	4413      	add	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	3350      	adds	r3, #80	; 0x50
 800782e:	443b      	add	r3, r7
 8007830:	3b2c      	subs	r3, #44	; 0x2c
 8007832:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007834:	4299      	cmp	r1, r3
 8007836:	d109      	bne.n	800784c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007838:	4b03      	ldr	r3, [pc, #12]	; (8007848 <HAL_OSPIM_Config+0x508>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a02      	ldr	r2, [pc, #8]	; (8007848 <HAL_OSPIM_Config+0x508>)
 800783e:	f043 0301 	orr.w	r3, r3, #1
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	e0ce      	b.n	80079e4 <HAL_OSPIM_Config+0x6a4>
 8007846:	bf00      	nop
 8007848:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800784c:	49a4      	ldr	r1, [pc, #656]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 800784e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007852:	4613      	mov	r3, r2
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	4413      	add	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	3350      	adds	r3, #80	; 0x50
 800785c:	443b      	add	r3, r7
 800785e:	3b3c      	subs	r3, #60	; 0x3c
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3b01      	subs	r3, #1
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	440b      	add	r3, r1
 8007868:	6859      	ldr	r1, [r3, #4]
 800786a:	489d      	ldr	r0, [pc, #628]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 800786c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007870:	4613      	mov	r3, r2
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	4413      	add	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	3350      	adds	r3, #80	; 0x50
 800787a:	443b      	add	r3, r7
 800787c:	3b3c      	subs	r3, #60	; 0x3c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3b01      	subs	r3, #1
 8007882:	f021 0201 	bic.w	r2, r1, #1
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4403      	add	r3, r0
 800788a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800788c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007890:	4613      	mov	r3, r2
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	4413      	add	r3, r2
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	3350      	adds	r3, #80	; 0x50
 800789a:	443b      	add	r3, r7
 800789c:	3b38      	subs	r3, #56	; 0x38
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01f      	beq.n	80078e4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80078a4:	498e      	ldr	r1, [pc, #568]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80078a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078aa:	4613      	mov	r3, r2
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	4413      	add	r3, r2
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	3350      	adds	r3, #80	; 0x50
 80078b4:	443b      	add	r3, r7
 80078b6:	3b38      	subs	r3, #56	; 0x38
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3b01      	subs	r3, #1
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	440b      	add	r3, r1
 80078c0:	6859      	ldr	r1, [r3, #4]
 80078c2:	4887      	ldr	r0, [pc, #540]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80078c4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078c8:	4613      	mov	r3, r2
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	3350      	adds	r3, #80	; 0x50
 80078d2:	443b      	add	r3, r7
 80078d4:	3b38      	subs	r3, #56	; 0x38
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3b01      	subs	r3, #1
 80078da:	f021 0210 	bic.w	r2, r1, #16
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4403      	add	r3, r0
 80078e2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80078e4:	497e      	ldr	r1, [pc, #504]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80078e6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078ea:	4613      	mov	r3, r2
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	4413      	add	r3, r2
 80078f0:	00db      	lsls	r3, r3, #3
 80078f2:	3350      	adds	r3, #80	; 0x50
 80078f4:	443b      	add	r3, r7
 80078f6:	3b34      	subs	r3, #52	; 0x34
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	440b      	add	r3, r1
 8007900:	6859      	ldr	r1, [r3, #4]
 8007902:	4877      	ldr	r0, [pc, #476]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007904:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007908:	4613      	mov	r3, r2
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	4413      	add	r3, r2
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	3350      	adds	r3, #80	; 0x50
 8007912:	443b      	add	r3, r7
 8007914:	3b34      	subs	r3, #52	; 0x34
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3b01      	subs	r3, #1
 800791a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4403      	add	r3, r0
 8007922:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007924:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007928:	4613      	mov	r3, r2
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	4413      	add	r3, r2
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	3350      	adds	r3, #80	; 0x50
 8007932:	443b      	add	r3, r7
 8007934:	3b30      	subs	r3, #48	; 0x30
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d023      	beq.n	8007984 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800793c:	4968      	ldr	r1, [pc, #416]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 800793e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007942:	4613      	mov	r3, r2
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4413      	add	r3, r2
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	3350      	adds	r3, #80	; 0x50
 800794c:	443b      	add	r3, r7
 800794e:	3b30      	subs	r3, #48	; 0x30
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3b01      	subs	r3, #1
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	6859      	ldr	r1, [r3, #4]
 800795e:	4860      	ldr	r0, [pc, #384]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007960:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007964:	4613      	mov	r3, r2
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	4413      	add	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	3350      	adds	r3, #80	; 0x50
 800796e:	443b      	add	r3, r7
 8007970:	3b30      	subs	r3, #48	; 0x30
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3b01      	subs	r3, #1
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4403      	add	r3, r0
 8007982:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007984:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007988:	4613      	mov	r3, r2
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	4413      	add	r3, r2
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	3350      	adds	r3, #80	; 0x50
 8007992:	443b      	add	r3, r7
 8007994:	3b2c      	subs	r3, #44	; 0x2c
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d023      	beq.n	80079e4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800799c:	4950      	ldr	r1, [pc, #320]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 800799e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80079a2:	4613      	mov	r3, r2
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4413      	add	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	3350      	adds	r3, #80	; 0x50
 80079ac:	443b      	add	r3, r7
 80079ae:	3b2c      	subs	r3, #44	; 0x2c
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	440b      	add	r3, r1
 80079bc:	6859      	ldr	r1, [r3, #4]
 80079be:	4848      	ldr	r0, [pc, #288]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80079c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80079c4:	4613      	mov	r3, r2
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	4413      	add	r3, r2
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	3350      	adds	r3, #80	; 0x50
 80079ce:	443b      	add	r3, r7
 80079d0:	3b2c      	subs	r3, #44	; 0x2c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4403      	add	r3, r0
 80079e2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80079e4:	4a3e      	ldr	r2, [pc, #248]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079f8:	025b      	lsls	r3, r3, #9
 80079fa:	431a      	orrs	r2, r3
 80079fc:	4938      	ldr	r1, [pc, #224]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d018      	beq.n	8007a48 <HAL_OSPIM_Config+0x708>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1e:	d813      	bhi.n	8007a48 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	1e5a      	subs	r2, r3, #1
 8007a26:	4b2e      	ldr	r3, [pc, #184]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	0c1b      	lsrs	r3, r3, #16
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d90a      	bls.n	8007a48 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8007a32:	4b2b      	ldr	r3, [pc, #172]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	041b      	lsls	r3, r3, #16
 8007a42:	4927      	ldr	r1, [pc, #156]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007a48:	4b25      	ldr	r3, [pc, #148]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 809a 	beq.w	8007b8a <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8007a56:	4a22      	ldr	r2, [pc, #136]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f023 0203 	bic.w	r2, r3, #3
 8007a68:	491d      	ldr	r1, [pc, #116]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	f042 0201 	orr.w	r2, r2, #1
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	440b      	add	r3, r1
 8007a78:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d011      	beq.n	8007aa6 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007a82:	4a17      	ldr	r2, [pc, #92]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a94:	4912      	ldr	r1, [pc, #72]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	f042 0210 	orr.w	r2, r2, #16
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d018      	beq.n	8007ae4 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007ab2:	4a0b      	ldr	r2, [pc, #44]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007ac8:	4905      	ldr	r1, [pc, #20]	; (8007ae0 <HAL_OSPIM_Config+0x7a0>)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	605a      	str	r2, [r3, #4]
 8007ade:	e01b      	b.n	8007b18 <HAL_OSPIM_Config+0x7d8>
 8007ae0:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d015      	beq.n	8007b18 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007aec:	4a8a      	ldr	r2, [pc, #552]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007b02:	4985      	ldr	r1, [pc, #532]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	440b      	add	r3, r1
 8007b16:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d016      	beq.n	8007b52 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b24:	4a7c      	ldr	r2, [pc, #496]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b3a:	4977      	ldr	r1, [pc, #476]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	440b      	add	r3, r1
 8007b4e:	605a      	str	r2, [r3, #4]
 8007b50:	e0c3      	b.n	8007cda <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 80bf 	beq.w	8007cda <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b5c:	4a6e      	ldr	r2, [pc, #440]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007b72:	4969      	ldr	r1, [pc, #420]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	605a      	str	r2, [r3, #4]
 8007b88:	e0a7      	b.n	8007cda <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007b8a:	4a63      	ldr	r2, [pc, #396]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f023 0203 	bic.w	r2, r3, #3
 8007b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	495d      	ldr	r1, [pc, #372]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	f042 0201 	orr.w	r2, r2, #1
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d014      	beq.n	8007be6 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007bbc:	4a56      	ldr	r2, [pc, #344]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd0:	015b      	lsls	r3, r3, #5
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	4950      	ldr	r1, [pc, #320]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	f042 0210 	orr.w	r2, r2, #16
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	440b      	add	r3, r1
 8007be4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d019      	beq.n	8007c26 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007bf2:	4a49      	ldr	r2, [pc, #292]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0a:	049b      	lsls	r3, r3, #18
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	4942      	ldr	r1, [pc, #264]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	3b01      	subs	r3, #1
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	605a      	str	r2, [r3, #4]
 8007c24:	e01c      	b.n	8007c60 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d018      	beq.n	8007c60 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c2e:	4a3a      	ldr	r2, [pc, #232]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c46:	069b      	lsls	r3, r3, #26
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	4933      	ldr	r1, [pc, #204]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d019      	beq.n	8007ca0 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c6c:	4a2a      	ldr	r2, [pc, #168]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c84:	049b      	lsls	r3, r3, #18
 8007c86:	431a      	orrs	r2, r3
 8007c88:	4923      	ldr	r1, [pc, #140]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	605a      	str	r2, [r3, #4]
 8007c9e:	e01c      	b.n	8007cda <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d018      	beq.n	8007cda <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007ca8:	4a1b      	ldr	r2, [pc, #108]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc0:	069b      	lsls	r3, r3, #26
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	4914      	ldr	r1, [pc, #80]	; (8007d18 <HAL_OSPIM_Config+0x9d8>)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	440b      	add	r3, r1
 8007cd8:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007cda:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d005      	beq.n	8007cf2 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007ce6:	4b0d      	ldr	r3, [pc, #52]	; (8007d1c <HAL_OSPIM_Config+0x9dc>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a0c      	ldr	r2, [pc, #48]	; (8007d1c <HAL_OSPIM_Config+0x9dc>)
 8007cec:	f043 0301 	orr.w	r3, r3, #1
 8007cf0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007cf2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d005      	beq.n	8007d0a <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007cfe:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <HAL_OSPIM_Config+0x9e0>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a07      	ldr	r2, [pc, #28]	; (8007d20 <HAL_OSPIM_Config+0x9e0>)
 8007d04:	f043 0301 	orr.w	r3, r3, #1
 8007d08:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007d0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3750      	adds	r7, #80	; 0x50
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	420c4000 	.word	0x420c4000
 8007d1c:	420d1400 	.word	0x420d1400
 8007d20:	420d2400 	.word	0x420d2400

08007d24 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	4613      	mov	r3, r2
 8007d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007d34:	e022      	b.n	8007d7c <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3c:	d01e      	beq.n	8007d7c <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d3e:	f7fc f881 	bl	8003e44 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d302      	bcc.n	8007d54 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d113      	bne.n	8007d7c <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6a1a      	ldr	r2, [r3, #32]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	401a      	ands	r2, r3
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d00b      	beq.n	8007d7c <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d6a:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d70:	f043 0201 	orr.w	r2, r3, #1
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e00e      	b.n	8007d9a <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6a1a      	ldr	r2, [r3, #32]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	4013      	ands	r3, r2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	bf14      	ite	ne
 8007d8a:	2301      	movne	r3, #1
 8007d8c:	2300      	moveq	r3, #0
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	461a      	mov	r2, r3
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d1ce      	bne.n	8007d36 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b089      	sub	sp, #36	; 0x24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007dc0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d114      	bne.n	8007e12 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007df0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007dfa:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007e04:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	e02c      	b.n	8007e6c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d114      	bne.n	8007e44 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007e22:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8007e2c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e36:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	e013      	b.n	8007e6c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007e4c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8007e56:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8007e60:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e74:	431a      	orrs	r2, r3
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d012      	beq.n	8007ea8 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	4319      	orrs	r1, r3
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f023 021f 	bic.w	r2, r3, #31
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d009      	beq.n	8007ed6 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d105      	bne.n	8007ed6 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3a01      	subs	r2, #1
 8007ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 8099 	beq.w	8008012 <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d055      	beq.n	8007f94 <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01e      	beq.n	8007f2e <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	4b67      	ldr	r3, [pc, #412]	; (8008094 <OSPI_ConfigCmd+0x2f0>)
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	68d1      	ldr	r1, [r2, #12]
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	6952      	ldr	r2, [r2, #20]
 8007f00:	4311      	orrs	r1, r2
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	6912      	ldr	r2, [r2, #16]
 8007f06:	4311      	orrs	r1, r2
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	69d2      	ldr	r2, [r2, #28]
 8007f0c:	4311      	orrs	r1, r2
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f12:	4311      	orrs	r1, r2
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	6a12      	ldr	r2, [r2, #32]
 8007f18:	4311      	orrs	r1, r2
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f1e:	4311      	orrs	r1, r2
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007f24:	430a      	orrs	r2, r1
 8007f26:	431a      	orrs	r2, r3
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	e028      	b.n	8007f80 <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	68d1      	ldr	r1, [r2, #12]
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	6952      	ldr	r2, [r2, #20]
 8007f42:	4311      	orrs	r1, r2
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	6912      	ldr	r2, [r2, #16]
 8007f48:	4311      	orrs	r1, r2
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	69d2      	ldr	r2, [r2, #28]
 8007f4e:	4311      	orrs	r1, r2
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f54:	4311      	orrs	r1, r2
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	6a12      	ldr	r2, [r2, #32]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f6a:	d109      	bne.n	8007f80 <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d105      	bne.n	8007f80 <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	6992      	ldr	r2, [r2, #24]
 8007f90:	649a      	str	r2, [r3, #72]	; 0x48
 8007f92:	e078      	b.n	8008086 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d017      	beq.n	8007fcc <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8007fa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	68d1      	ldr	r1, [r2, #12]
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	6952      	ldr	r2, [r2, #20]
 8007fb0:	4311      	orrs	r1, r2
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	6912      	ldr	r2, [r2, #16]
 8007fb6:	4311      	orrs	r1, r2
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fbc:	4311      	orrs	r1, r2
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	e01d      	b.n	8008008 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	68d9      	ldr	r1, [r3, #12]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	4319      	orrs	r1, r3
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	430b      	orrs	r3, r1
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ff2:	d109      	bne.n	8008008 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d105      	bne.n	8008008 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	e039      	b.n	8008086 <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d030      	beq.n	800807c <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801e:	2b00      	cmp	r3, #0
 8008020:	d017      	beq.n	8008052 <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800802a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	69d1      	ldr	r1, [r2, #28]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008036:	4311      	orrs	r1, r2
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	6a12      	ldr	r2, [r2, #32]
 800803c:	4311      	orrs	r1, r2
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008042:	4311      	orrs	r1, r2
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008048:	430a      	orrs	r2, r1
 800804a:	431a      	orrs	r2, r3
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	e00e      	b.n	8008070 <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	69d9      	ldr	r1, [r3, #28]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	4319      	orrs	r1, r3
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	430b      	orrs	r3, r1
 800806a:	431a      	orrs	r2, r3
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	6992      	ldr	r2, [r2, #24]
 8008078:	649a      	str	r2, [r3, #72]	; 0x48
 800807a:	e004      	b.n	8008086 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2208      	movs	r2, #8
 8008084:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 8008086:	7ffb      	ldrb	r3, [r7, #31]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3724      	adds	r7, #36	; 0x24
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	f0ffc0c0 	.word	0xf0ffc0c0

08008098 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	6039      	str	r1, [r7, #0]
 80080a2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80080ac:	79fb      	ldrb	r3, [r7, #7]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d005      	beq.n	80080be <OSPIM_GetConfig+0x26>
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d802      	bhi.n	80080be <OSPIM_GetConfig+0x26>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	75fb      	strb	r3, [r7, #23]
 80080c2:	e098      	b.n	80081f6 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2200      	movs	r2, #0
 80080ce:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2200      	movs	r2, #0
 80080da:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2200      	movs	r2, #0
 80080e0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d10b      	bne.n	8008100 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80080e8:	4b46      	ldr	r3, [pc, #280]	; (8008204 <OSPIM_GetConfig+0x16c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80080f4:	4b44      	ldr	r3, [pc, #272]	; (8008208 <OSPIM_GetConfig+0x170>)
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	e002      	b.n	8008100 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80080fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080fe:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	e074      	b.n	80081f0 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8008106:	4a3f      	ldr	r2, [pc, #252]	; (8008204 <OSPIM_GetConfig+0x16c>)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	4053      	eors	r3, r2
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	4053      	eors	r3, r2
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d103      	bne.n	8008152 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	4053      	eors	r3, r2
 8008162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d018      	beq.n	80081ae <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	4053      	eors	r3, r2
 8008182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d111      	bne.n	80081ae <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d106      	bne.n	80081a2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3301      	adds	r3, #1
 8008198:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	60da      	str	r2, [r3, #12]
 80081a0:	e005      	b.n	80081ae <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3301      	adds	r3, #1
 80081a6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d018      	beq.n	80081ea <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	4053      	eors	r3, r2
 80081be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d111      	bne.n	80081ea <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3301      	adds	r3, #1
 80081d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	611a      	str	r2, [r3, #16]
 80081dc:	e005      	b.n	80081ea <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	3301      	adds	r3, #1
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d987      	bls.n	8008106 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	420c4000 	.word	0x420c4000
 8008208:	04040222 	.word	0x04040222

0800820c <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f042 0202 	orr.w	r2, r2, #2
 8008228:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2208      	movs	r2, #8
 800822e:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a15      	ldr	r2, [pc, #84]	; (800828c <HAL_OSPI_DLYB_SetConfig+0x80>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d109      	bne.n	800824e <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800823a:	4815      	ldr	r0, [pc, #84]	; (8008290 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800823c:	f7fe fe46 	bl	8006ecc <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	4813      	ldr	r0, [pc, #76]	; (8008290 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8008244:	f002 ff22 	bl	800b08c <LL_DLYB_SetDelay>
    status = HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]
 800824c:	e00d      	b.n	800826a <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a10      	ldr	r2, [pc, #64]	; (8008294 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d108      	bne.n	800826a <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8008258:	480f      	ldr	r0, [pc, #60]	; (8008298 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800825a:	f7fe fe37 	bl	8006ecc <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	480d      	ldr	r0, [pc, #52]	; (8008298 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8008262:	f002 ff13 	bl	800b08c <LL_DLYB_SetDelay>
    status = HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7fe ffe4 	bl	8007238 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 0202 	bic.w	r2, r2, #2
 800827e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	420d1400 	.word	0x420d1400
 8008290:	420cf000 	.word	0x420cf000
 8008294:	420d2400 	.word	0x420d2400
 8008298:	420cf400 	.word	0x420cf400

0800829c <HAL_OSPI_DLYB_GetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	73fb      	strb	r3, [r7, #15]

  if (hospi->Instance == OCTOSPI1)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a0d      	ldr	r2, [pc, #52]	; (80082e4 <HAL_OSPI_DLYB_GetConfig+0x48>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d106      	bne.n	80082c2 <HAL_OSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	480c      	ldr	r0, [pc, #48]	; (80082e8 <HAL_OSPI_DLYB_GetConfig+0x4c>)
 80082b8:	f002 ff07 	bl	800b0ca <LL_DLYB_GetDelay>
    status = HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
 80082c0:	e00a      	b.n	80082d8 <HAL_OSPI_DLYB_GetConfig+0x3c>
  }
  else if (hospi->Instance == OCTOSPI2)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a09      	ldr	r2, [pc, #36]	; (80082ec <HAL_OSPI_DLYB_GetConfig+0x50>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d105      	bne.n	80082d8 <HAL_OSPI_DLYB_GetConfig+0x3c>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	4808      	ldr	r0, [pc, #32]	; (80082f0 <HAL_OSPI_DLYB_GetConfig+0x54>)
 80082d0:	f002 fefb 	bl	800b0ca <LL_DLYB_GetDelay>
    status = HAL_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Return function status */
  return status;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	420d1400 	.word	0x420d1400
 80082e8:	420cf000 	.word	0x420cf000
 80082ec:	420d2400 	.word	0x420d2400
 80082f0:	420cf400 	.word	0x420cf400

080082f4 <HAL_OSPI_DLYB_GetClockPeriod>:
  * @brief  Get the Delay line length value.
  * @param  hospi   : OSPI handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_GetClockPeriod(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0202 	orr.w	r2, r2, #2
 8008310:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2208      	movs	r2, #8
 8008316:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a1b      	ldr	r2, [pc, #108]	; (800838c <HAL_OSPI_DLYB_GetClockPeriod+0x98>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d10f      	bne.n	8008342 <HAL_OSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8008322:	481b      	ldr	r0, [pc, #108]	; (8008390 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 8008324:	f7fe fdd2 	bl	8006ecc <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	4819      	ldr	r0, [pc, #100]	; (8008390 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 800832c:	f002 fee6 	bl	800b0fc <LL_DLYB_GetClockPeriod>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_OSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 800833a:	4815      	ldr	r0, [pc, #84]	; (8008390 <HAL_OSPI_DLYB_GetClockPeriod+0x9c>)
 800833c:	f7fe fdd6 	bl	8006eec <LL_DLYB_Disable>
 8008340:	e013      	b.n	800836a <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  }

  else if (hospi->Instance == OCTOSPI2)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a13      	ldr	r2, [pc, #76]	; (8008394 <HAL_OSPI_DLYB_GetClockPeriod+0xa0>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d10e      	bne.n	800836a <HAL_OSPI_DLYB_GetClockPeriod+0x76>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 800834c:	4812      	ldr	r0, [pc, #72]	; (8008398 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 800834e:	f7fe fdbd 	bl	8006ecc <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	4810      	ldr	r0, [pc, #64]	; (8008398 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 8008356:	f002 fed1 	bl	800b0fc <LL_DLYB_GetClockPeriod>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <HAL_OSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 8008364:	480c      	ldr	r0, [pc, #48]	; (8008398 <HAL_OSPI_DLYB_GetClockPeriod+0xa4>)
 8008366:	f7fe fdc1 	bl	8006eec <LL_DLYB_Disable>
  {
    /* Nothing to do */
  }

  /* Abort the current OctoSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7fe ff64 	bl	8007238 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689a      	ldr	r2, [r3, #8]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0202 	bic.w	r2, r2, #2
 800837e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	420d1400 	.word	0x420d1400
 8008390:	420cf000 	.word	0x420cf000
 8008394:	420d2400 	.word	0x420d2400
 8008398:	420cf400 	.word	0x420cf400

0800839c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80083a4:	4b34      	ldr	r3, [pc, #208]	; (8008478 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083ac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d101      	bne.n	80083ba <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	e057      	b.n	800846a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c0:	d90a      	bls.n	80083d8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80083c2:	4b2d      	ldr	r3, [pc, #180]	; (8008478 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	4a2a      	ldr	r2, [pc, #168]	; (8008478 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80083d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083d4:	60d3      	str	r3, [r2, #12]
 80083d6:	e007      	b.n	80083e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80083d8:	4b27      	ldr	r3, [pc, #156]	; (8008478 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80083e0:	4925      	ldr	r1, [pc, #148]	; (8008478 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80083e8:	4b24      	ldr	r3, [pc, #144]	; (800847c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a24      	ldr	r2, [pc, #144]	; (8008480 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80083ee:	fba2 2303 	umull	r2, r3, r2, r3
 80083f2:	099b      	lsrs	r3, r3, #6
 80083f4:	2232      	movs	r2, #50	; 0x32
 80083f6:	fb02 f303 	mul.w	r3, r2, r3
 80083fa:	4a21      	ldr	r2, [pc, #132]	; (8008480 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80083fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008400:	099b      	lsrs	r3, r3, #6
 8008402:	3301      	adds	r3, #1
 8008404:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008406:	e002      	b.n	800840e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3b01      	subs	r3, #1
 800840c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800840e:	4b1a      	ldr	r3, [pc, #104]	; (8008478 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <HAL_PWREx_ControlVoltageScaling+0x84>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1f3      	bne.n	8008408 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d01b      	beq.n	800845e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008426:	4b15      	ldr	r3, [pc, #84]	; (800847c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a15      	ldr	r2, [pc, #84]	; (8008480 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800842c:	fba2 2303 	umull	r2, r3, r2, r3
 8008430:	099b      	lsrs	r3, r3, #6
 8008432:	2232      	movs	r2, #50	; 0x32
 8008434:	fb02 f303 	mul.w	r3, r2, r3
 8008438:	4a11      	ldr	r2, [pc, #68]	; (8008480 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800843a:	fba2 2303 	umull	r2, r3, r2, r3
 800843e:	099b      	lsrs	r3, r3, #6
 8008440:	3301      	adds	r3, #1
 8008442:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008444:	e002      	b.n	800844c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3b01      	subs	r3, #1
 800844a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800844c:	4b0a      	ldr	r3, [pc, #40]	; (8008478 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800844e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1f3      	bne.n	8008446 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e000      	b.n	800846a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	46020800 	.word	0x46020800
 800847c:	2000001c 	.word	0x2000001c
 8008480:	10624dd3 	.word	0x10624dd3

08008484 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008484:	b480      	push	{r7}
 8008486:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008488:	4b04      	ldr	r3, [pc, #16]	; (800849c <HAL_PWREx_GetVoltageRange+0x18>)
 800848a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8008490:	4618      	mov	r0, r3
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	46020800 	.word	0x46020800

080084a0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80084a8:	4b22      	ldr	r3, [pc, #136]	; (8008534 <HAL_PWREx_ConfigSupply+0x94>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a22      	ldr	r2, [pc, #136]	; (8008538 <HAL_PWREx_ConfigSupply+0x98>)
 80084ae:	fba2 2303 	umull	r2, r3, r2, r3
 80084b2:	099b      	lsrs	r3, r3, #6
 80084b4:	2232      	movs	r2, #50	; 0x32
 80084b6:	fb02 f303 	mul.w	r3, r2, r3
 80084ba:	4a1f      	ldr	r2, [pc, #124]	; (8008538 <HAL_PWREx_ConfigSupply+0x98>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	099b      	lsrs	r3, r3, #6
 80084c2:	3301      	adds	r3, #1
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d113      	bne.n	80084f4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80084cc:	4b1b      	ldr	r3, [pc, #108]	; (800853c <HAL_PWREx_ConfigSupply+0x9c>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	4a1a      	ldr	r2, [pc, #104]	; (800853c <HAL_PWREx_ConfigSupply+0x9c>)
 80084d2:	f023 0302 	bic.w	r3, r3, #2
 80084d6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80084d8:	e002      	b.n	80084e0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3b01      	subs	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80084e0:	4b16      	ldr	r3, [pc, #88]	; (800853c <HAL_PWREx_ConfigSupply+0x9c>)
 80084e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d116      	bne.n	800851a <HAL_PWREx_ConfigSupply+0x7a>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f3      	bne.n	80084da <HAL_PWREx_ConfigSupply+0x3a>
 80084f2:	e012      	b.n	800851a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80084f4:	4b11      	ldr	r3, [pc, #68]	; (800853c <HAL_PWREx_ConfigSupply+0x9c>)
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	4a10      	ldr	r2, [pc, #64]	; (800853c <HAL_PWREx_ConfigSupply+0x9c>)
 80084fa:	f043 0302 	orr.w	r3, r3, #2
 80084fe:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008500:	e002      	b.n	8008508 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3b01      	subs	r3, #1
 8008506:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008508:	4b0c      	ldr	r3, [pc, #48]	; (800853c <HAL_PWREx_ConfigSupply+0x9c>)
 800850a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <HAL_PWREx_ConfigSupply+0x7a>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1f3      	bne.n	8008502 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e000      	b.n	8008526 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	2000001c 	.word	0x2000001c
 8008538:	10624dd3 	.word	0x10624dd3
 800853c:	46020800 	.word	0x46020800

08008540 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <HAL_PWREx_EnableVddIO2+0x1c>)
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	4a04      	ldr	r2, [pc, #16]	; (800855c <HAL_PWREx_EnableVddIO2+0x1c>)
 800854a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800854e:	6113      	str	r3, [r2, #16]
}
 8008550:	bf00      	nop
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	46020800 	.word	0x46020800

08008560 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b08e      	sub	sp, #56	; 0x38
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008568:	2300      	movs	r3, #0
 800856a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	f000 bec3 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800857a:	4b9c      	ldr	r3, [pc, #624]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	f003 030c 	and.w	r3, r3, #12
 8008582:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008584:	4b99      	ldr	r3, [pc, #612]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0310 	and.w	r3, r3, #16
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 8172 	beq.w	8008880 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d007      	beq.n	80085b2 <HAL_RCC_OscConfig+0x52>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	2b0c      	cmp	r3, #12
 80085a6:	f040 80e4 	bne.w	8008772 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	f040 80e0 	bne.w	8008772 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80085b2:	4b8e      	ldr	r3, [pc, #568]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d006      	beq.n	80085cc <HAL_RCC_OscConfig+0x6c>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f000 be9a 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085d0:	4b86      	ldr	r3, [pc, #536]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <HAL_RCC_OscConfig+0x86>
 80085dc:	4b83      	ldr	r3, [pc, #524]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80085e4:	e005      	b.n	80085f2 <HAL_RCC_OscConfig+0x92>
 80085e6:	4b81      	ldr	r3, [pc, #516]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80085e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085ec:	041b      	lsls	r3, r3, #16
 80085ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d255      	bcs.n	80086a2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	4618      	mov	r0, r3
 8008602:	f001 f9e3 	bl	80099cc <RCC_SetFlashLatencyFromMSIRange>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	f000 be77 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008612:	4b76      	ldr	r3, [pc, #472]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	4a75      	ldr	r2, [pc, #468]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800861c:	6093      	str	r3, [r2, #8]
 800861e:	4b73      	ldr	r3, [pc, #460]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	4970      	ldr	r1, [pc, #448]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 800862c:	4313      	orrs	r3, r2
 800862e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008638:	d309      	bcc.n	800864e <HAL_RCC_OscConfig+0xee>
 800863a:	4b6c      	ldr	r3, [pc, #432]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f023 021f 	bic.w	r2, r3, #31
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	4969      	ldr	r1, [pc, #420]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008648:	4313      	orrs	r3, r2
 800864a:	60cb      	str	r3, [r1, #12]
 800864c:	e07e      	b.n	800874c <HAL_RCC_OscConfig+0x1ec>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	2b00      	cmp	r3, #0
 8008654:	da0a      	bge.n	800866c <HAL_RCC_OscConfig+0x10c>
 8008656:	4b65      	ldr	r3, [pc, #404]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	015b      	lsls	r3, r3, #5
 8008664:	4961      	ldr	r1, [pc, #388]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008666:	4313      	orrs	r3, r2
 8008668:	60cb      	str	r3, [r1, #12]
 800866a:	e06f      	b.n	800874c <HAL_RCC_OscConfig+0x1ec>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008674:	d30a      	bcc.n	800868c <HAL_RCC_OscConfig+0x12c>
 8008676:	4b5d      	ldr	r3, [pc, #372]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	029b      	lsls	r3, r3, #10
 8008684:	4959      	ldr	r1, [pc, #356]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008686:	4313      	orrs	r3, r2
 8008688:	60cb      	str	r3, [r1, #12]
 800868a:	e05f      	b.n	800874c <HAL_RCC_OscConfig+0x1ec>
 800868c:	4b57      	ldr	r3, [pc, #348]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	03db      	lsls	r3, r3, #15
 800869a:	4954      	ldr	r1, [pc, #336]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 800869c:	4313      	orrs	r3, r2
 800869e:	60cb      	str	r3, [r1, #12]
 80086a0:	e054      	b.n	800874c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80086a2:	4b52      	ldr	r3, [pc, #328]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	4a51      	ldr	r2, [pc, #324]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80086a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086ac:	6093      	str	r3, [r2, #8]
 80086ae:	4b4f      	ldr	r3, [pc, #316]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	494c      	ldr	r1, [pc, #304]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80086c8:	d309      	bcc.n	80086de <HAL_RCC_OscConfig+0x17e>
 80086ca:	4b48      	ldr	r3, [pc, #288]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f023 021f 	bic.w	r2, r3, #31
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	4945      	ldr	r1, [pc, #276]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	60cb      	str	r3, [r1, #12]
 80086dc:	e028      	b.n	8008730 <HAL_RCC_OscConfig+0x1d0>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da0a      	bge.n	80086fc <HAL_RCC_OscConfig+0x19c>
 80086e6:	4b41      	ldr	r3, [pc, #260]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	015b      	lsls	r3, r3, #5
 80086f4:	493d      	ldr	r1, [pc, #244]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60cb      	str	r3, [r1, #12]
 80086fa:	e019      	b.n	8008730 <HAL_RCC_OscConfig+0x1d0>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008704:	d30a      	bcc.n	800871c <HAL_RCC_OscConfig+0x1bc>
 8008706:	4b39      	ldr	r3, [pc, #228]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	029b      	lsls	r3, r3, #10
 8008714:	4935      	ldr	r1, [pc, #212]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008716:	4313      	orrs	r3, r2
 8008718:	60cb      	str	r3, [r1, #12]
 800871a:	e009      	b.n	8008730 <HAL_RCC_OscConfig+0x1d0>
 800871c:	4b33      	ldr	r3, [pc, #204]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	03db      	lsls	r3, r3, #15
 800872a:	4930      	ldr	r1, [pc, #192]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 800872c:	4313      	orrs	r3, r2
 800872e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10a      	bne.n	800874c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	4618      	mov	r0, r3
 800873c:	f001 f946 	bl	80099cc <RCC_SetFlashLatencyFromMSIRange>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f000 bdda 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800874c:	f001 f8d8 	bl	8009900 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008750:	4b27      	ldr	r3, [pc, #156]	; (80087f0 <HAL_RCC_OscConfig+0x290>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4618      	mov	r0, r3
 8008756:	f7fb fa2d 	bl	8003bb4 <HAL_InitTick>
 800875a:	4603      	mov	r3, r0
 800875c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8008760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 808a 	beq.w	800887e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800876a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800876e:	f000 bdc7 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d066      	beq.n	8008848 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800877a:	4b1c      	ldr	r3, [pc, #112]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a1b      	ldr	r2, [pc, #108]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 8008780:	f043 0301 	orr.w	r3, r3, #1
 8008784:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008786:	f7fb fb5d 	bl	8003e44 <HAL_GetTick>
 800878a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800878c:	e009      	b.n	80087a2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800878e:	f7fb fb59 	bl	8003e44 <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d902      	bls.n	80087a2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	f000 bdaf 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80087a2:	4b12      	ldr	r3, [pc, #72]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0304 	and.w	r3, r3, #4
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0ef      	beq.n	800878e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80087ae:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	4a0e      	ldr	r2, [pc, #56]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80087b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087b8:	6093      	str	r3, [r2, #8]
 80087ba:	4b0c      	ldr	r3, [pc, #48]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	4909      	ldr	r1, [pc, #36]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80087d4:	d30e      	bcc.n	80087f4 <HAL_RCC_OscConfig+0x294>
 80087d6:	4b05      	ldr	r3, [pc, #20]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f023 021f 	bic.w	r2, r3, #31
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	4902      	ldr	r1, [pc, #8]	; (80087ec <HAL_RCC_OscConfig+0x28c>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60cb      	str	r3, [r1, #12]
 80087e8:	e04a      	b.n	8008880 <HAL_RCC_OscConfig+0x320>
 80087ea:	bf00      	nop
 80087ec:	46020c00 	.word	0x46020c00
 80087f0:	20000020 	.word	0x20000020
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	da0a      	bge.n	8008812 <HAL_RCC_OscConfig+0x2b2>
 80087fc:	4b9b      	ldr	r3, [pc, #620]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	015b      	lsls	r3, r3, #5
 800880a:	4998      	ldr	r1, [pc, #608]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 800880c:	4313      	orrs	r3, r2
 800880e:	60cb      	str	r3, [r1, #12]
 8008810:	e036      	b.n	8008880 <HAL_RCC_OscConfig+0x320>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881a:	d30a      	bcc.n	8008832 <HAL_RCC_OscConfig+0x2d2>
 800881c:	4b93      	ldr	r3, [pc, #588]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	029b      	lsls	r3, r3, #10
 800882a:	4990      	ldr	r1, [pc, #576]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 800882c:	4313      	orrs	r3, r2
 800882e:	60cb      	str	r3, [r1, #12]
 8008830:	e026      	b.n	8008880 <HAL_RCC_OscConfig+0x320>
 8008832:	4b8e      	ldr	r3, [pc, #568]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	03db      	lsls	r3, r3, #15
 8008840:	498a      	ldr	r1, [pc, #552]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008842:	4313      	orrs	r3, r2
 8008844:	60cb      	str	r3, [r1, #12]
 8008846:	e01b      	b.n	8008880 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008848:	4b88      	ldr	r3, [pc, #544]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a87      	ldr	r2, [pc, #540]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 800884e:	f023 0301 	bic.w	r3, r3, #1
 8008852:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008854:	f7fb faf6 	bl	8003e44 <HAL_GetTick>
 8008858:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800885a:	e009      	b.n	8008870 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800885c:	f7fb faf2 	bl	8003e44 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d902      	bls.n	8008870 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	f000 bd48 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008870:	4b7e      	ldr	r3, [pc, #504]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0304 	and.w	r3, r3, #4
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1ef      	bne.n	800885c <HAL_RCC_OscConfig+0x2fc>
 800887c:	e000      	b.n	8008880 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800887e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 8094 	beq.w	80089b6 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	2b08      	cmp	r3, #8
 8008892:	d005      	beq.n	80088a0 <HAL_RCC_OscConfig+0x340>
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	2b0c      	cmp	r3, #12
 8008898:	d110      	bne.n	80088bc <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889c:	2b03      	cmp	r3, #3
 800889e:	d10d      	bne.n	80088bc <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088a0:	4b72      	ldr	r3, [pc, #456]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 8083 	beq.w	80089b4 <HAL_RCC_OscConfig+0x454>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d17e      	bne.n	80089b4 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f000 bd22 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c4:	d106      	bne.n	80088d4 <HAL_RCC_OscConfig+0x374>
 80088c6:	4b69      	ldr	r3, [pc, #420]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a68      	ldr	r2, [pc, #416]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80088cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	e041      	b.n	8008958 <HAL_RCC_OscConfig+0x3f8>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088dc:	d112      	bne.n	8008904 <HAL_RCC_OscConfig+0x3a4>
 80088de:	4b63      	ldr	r3, [pc, #396]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a62      	ldr	r2, [pc, #392]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80088e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	4b60      	ldr	r3, [pc, #384]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a5f      	ldr	r2, [pc, #380]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80088f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	4b5d      	ldr	r3, [pc, #372]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a5c      	ldr	r2, [pc, #368]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80088fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	e029      	b.n	8008958 <HAL_RCC_OscConfig+0x3f8>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800890c:	d112      	bne.n	8008934 <HAL_RCC_OscConfig+0x3d4>
 800890e:	4b57      	ldr	r3, [pc, #348]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a56      	ldr	r2, [pc, #344]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	4b54      	ldr	r3, [pc, #336]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a53      	ldr	r2, [pc, #332]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008924:	6013      	str	r3, [r2, #0]
 8008926:	4b51      	ldr	r3, [pc, #324]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a50      	ldr	r2, [pc, #320]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 800892c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	e011      	b.n	8008958 <HAL_RCC_OscConfig+0x3f8>
 8008934:	4b4d      	ldr	r3, [pc, #308]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a4c      	ldr	r2, [pc, #304]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 800893a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800893e:	6013      	str	r3, [r2, #0]
 8008940:	4b4a      	ldr	r3, [pc, #296]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a49      	ldr	r2, [pc, #292]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	4b47      	ldr	r3, [pc, #284]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a46      	ldr	r2, [pc, #280]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008952:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d014      	beq.n	800898a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8008960:	f7fb fa70 	bl	8003e44 <HAL_GetTick>
 8008964:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008966:	e009      	b.n	800897c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008968:	f7fb fa6c 	bl	8003e44 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b64      	cmp	r3, #100	; 0x64
 8008974:	d902      	bls.n	800897c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	f000 bcc2 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800897c:	4b3b      	ldr	r3, [pc, #236]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0ef      	beq.n	8008968 <HAL_RCC_OscConfig+0x408>
 8008988:	e015      	b.n	80089b6 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800898a:	f7fb fa5b 	bl	8003e44 <HAL_GetTick>
 800898e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008990:	e009      	b.n	80089a6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008992:	f7fb fa57 	bl	8003e44 <HAL_GetTick>
 8008996:	4602      	mov	r2, r0
 8008998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	2b64      	cmp	r3, #100	; 0x64
 800899e:	d902      	bls.n	80089a6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	f000 bcad 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089a6:	4b31      	ldr	r3, [pc, #196]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1ef      	bne.n	8008992 <HAL_RCC_OscConfig+0x432>
 80089b2:	e000      	b.n	80089b6 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0302 	and.w	r3, r3, #2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d066      	beq.n	8008a90 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	d005      	beq.n	80089d4 <HAL_RCC_OscConfig+0x474>
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	2b0c      	cmp	r3, #12
 80089cc:	d11a      	bne.n	8008a04 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d117      	bne.n	8008a04 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089d4:	4b25      	ldr	r3, [pc, #148]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d006      	beq.n	80089ee <HAL_RCC_OscConfig+0x48e>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	f000 bc89 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80089ee:	4b1f      	ldr	r3, [pc, #124]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	491b      	ldr	r1, [pc, #108]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a02:	e045      	b.n	8008a90 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d024      	beq.n	8008a56 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8008a0c:	4b17      	ldr	r3, [pc, #92]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a16      	ldr	r2, [pc, #88]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008a18:	f7fb fa14 	bl	8003e44 <HAL_GetTick>
 8008a1c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a1e:	e009      	b.n	8008a34 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a20:	f7fb fa10 	bl	8003e44 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d902      	bls.n	8008a34 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	f000 bc66 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a34:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d0ef      	beq.n	8008a20 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	041b      	lsls	r3, r3, #16
 8008a4e:	4907      	ldr	r1, [pc, #28]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	610b      	str	r3, [r1, #16]
 8008a54:	e01c      	b.n	8008a90 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8008a56:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a04      	ldr	r2, [pc, #16]	; (8008a6c <HAL_RCC_OscConfig+0x50c>)
 8008a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a60:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008a62:	f7fb f9ef 	bl	8003e44 <HAL_GetTick>
 8008a66:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a68:	e00c      	b.n	8008a84 <HAL_RCC_OscConfig+0x524>
 8008a6a:	bf00      	nop
 8008a6c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a70:	f7fb f9e8 	bl	8003e44 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d902      	bls.n	8008a84 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	f000 bc3e 	b.w	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a84:	4baf      	ldr	r3, [pc, #700]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1ef      	bne.n	8008a70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0308 	and.w	r3, r3, #8
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 80c7 	beq.w	8008c2c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008aa4:	4ba7      	ldr	r3, [pc, #668]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d111      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ab2:	4ba4      	ldr	r3, [pc, #656]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ab8:	4aa2      	ldr	r2, [pc, #648]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008aba:	f043 0304 	orr.w	r3, r3, #4
 8008abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008ac2:	4ba0      	ldr	r3, [pc, #640]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008ad6:	4b9c      	ldr	r3, [pc, #624]	; (8008d48 <HAL_RCC_OscConfig+0x7e8>)
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d118      	bne.n	8008b14 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008ae2:	4b99      	ldr	r3, [pc, #612]	; (8008d48 <HAL_RCC_OscConfig+0x7e8>)
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae6:	4a98      	ldr	r2, [pc, #608]	; (8008d48 <HAL_RCC_OscConfig+0x7e8>)
 8008ae8:	f043 0301 	orr.w	r3, r3, #1
 8008aec:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008aee:	f7fb f9a9 	bl	8003e44 <HAL_GetTick>
 8008af2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008af4:	e008      	b.n	8008b08 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008af6:	f7fb f9a5 	bl	8003e44 <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d901      	bls.n	8008b08 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e3fb      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008b08:	4b8f      	ldr	r3, [pc, #572]	; (8008d48 <HAL_RCC_OscConfig+0x7e8>)
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0f0      	beq.n	8008af6 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d05f      	beq.n	8008bdc <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8008b1c:	4b89      	ldr	r3, [pc, #548]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b22:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	699a      	ldr	r2, [r3, #24]
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d037      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d006      	beq.n	8008b4a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e3da      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d01b      	beq.n	8008b8c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8008b54:	4b7b      	ldr	r3, [pc, #492]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b5a:	4a7a      	ldr	r2, [pc, #488]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008b5c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8008b60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8008b64:	f7fb f96e 	bl	8003e44 <HAL_GetTick>
 8008b68:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b6c:	f7fb f96a 	bl	8003e44 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e3c0      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008b7e:	4b71      	ldr	r3, [pc, #452]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1ef      	bne.n	8008b6c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8008b8c:	4b6d      	ldr	r3, [pc, #436]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	496a      	ldr	r1, [pc, #424]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8008ba2:	4b68      	ldr	r3, [pc, #416]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ba8:	4a66      	ldr	r2, [pc, #408]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008baa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8008bb2:	f7fb f947 	bl	8003e44 <HAL_GetTick>
 8008bb6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008bb8:	e008      	b.n	8008bcc <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bba:	f7fb f943 	bl	8003e44 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d901      	bls.n	8008bcc <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e399      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008bcc:	4b5d      	ldr	r3, [pc, #372]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0ef      	beq.n	8008bba <HAL_RCC_OscConfig+0x65a>
 8008bda:	e01b      	b.n	8008c14 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8008bdc:	4b59      	ldr	r3, [pc, #356]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008be2:	4a58      	ldr	r2, [pc, #352]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008be4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8008be8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8008bec:	f7fb f92a 	bl	8003e44 <HAL_GetTick>
 8008bf0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008bf2:	e008      	b.n	8008c06 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bf4:	f7fb f926 	bl	8003e44 <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d901      	bls.n	8008c06 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e37c      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008c06:	4b4f      	ldr	r3, [pc, #316]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1ef      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d107      	bne.n	8008c2c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c1c:	4b49      	ldr	r3, [pc, #292]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c22:	4a48      	ldr	r2, [pc, #288]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008c24:	f023 0304 	bic.w	r3, r3, #4
 8008c28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 0304 	and.w	r3, r3, #4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8112 	beq.w	8008e5e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c40:	4b40      	ldr	r3, [pc, #256]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d111      	bne.n	8008c72 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c4e:	4b3d      	ldr	r3, [pc, #244]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c54:	4a3b      	ldr	r2, [pc, #236]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008c56:	f043 0304 	orr.w	r3, r3, #4
 8008c5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008c5e:	4b39      	ldr	r3, [pc, #228]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	613b      	str	r3, [r7, #16]
 8008c6a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008c72:	4b35      	ldr	r3, [pc, #212]	; (8008d48 <HAL_RCC_OscConfig+0x7e8>)
 8008c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d118      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008c7e:	4b32      	ldr	r3, [pc, #200]	; (8008d48 <HAL_RCC_OscConfig+0x7e8>)
 8008c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c82:	4a31      	ldr	r2, [pc, #196]	; (8008d48 <HAL_RCC_OscConfig+0x7e8>)
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c8a:	f7fb f8db 	bl	8003e44 <HAL_GetTick>
 8008c8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c92:	f7fb f8d7 	bl	8003e44 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e32d      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008ca4:	4b28      	ldr	r3, [pc, #160]	; (8008d48 <HAL_RCC_OscConfig+0x7e8>)
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f0      	beq.n	8008c92 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01f      	beq.n	8008cfc <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d010      	beq.n	8008cea <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008cc8:	4b1e      	ldr	r3, [pc, #120]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008cce:	4a1d      	ldr	r2, [pc, #116]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008cd0:	f043 0304 	orr.w	r3, r3, #4
 8008cd4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008cd8:	4b1a      	ldr	r3, [pc, #104]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008cde:	4a19      	ldr	r2, [pc, #100]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008ce0:	f043 0301 	orr.w	r3, r3, #1
 8008ce4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008ce8:	e018      	b.n	8008d1c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008cea:	4b16      	ldr	r3, [pc, #88]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008cf0:	4a14      	ldr	r2, [pc, #80]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008cf2:	f043 0301 	orr.w	r3, r3, #1
 8008cf6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008cfa:	e00f      	b.n	8008d1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008cfc:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d02:	4a10      	ldr	r2, [pc, #64]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008d0c:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d12:	4a0c      	ldr	r2, [pc, #48]	; (8008d44 <HAL_RCC_OscConfig+0x7e4>)
 8008d14:	f023 0304 	bic.w	r3, r3, #4
 8008d18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d058      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8008d24:	f7fb f88e 	bl	8003e44 <HAL_GetTick>
 8008d28:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d2a:	e00f      	b.n	8008d4c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d2c:	f7fb f88a 	bl	8003e44 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d906      	bls.n	8008d4c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e2de      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
 8008d42:	bf00      	nop
 8008d44:	46020c00 	.word	0x46020c00
 8008d48:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d4c:	4b9c      	ldr	r3, [pc, #624]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0e8      	beq.n	8008d2c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d01b      	beq.n	8008d9e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008d66:	4b96      	ldr	r3, [pc, #600]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d6c:	4a94      	ldr	r2, [pc, #592]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008d76:	e00a      	b.n	8008d8e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d78:	f7fb f864 	bl	8003e44 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d901      	bls.n	8008d8e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e2b8      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008d8e:	4b8c      	ldr	r3, [pc, #560]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d0ed      	beq.n	8008d78 <HAL_RCC_OscConfig+0x818>
 8008d9c:	e053      	b.n	8008e46 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008d9e:	4b88      	ldr	r3, [pc, #544]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008da4:	4a86      	ldr	r2, [pc, #536]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008daa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008dae:	e00a      	b.n	8008dc6 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008db0:	f7fb f848 	bl	8003e44 <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d901      	bls.n	8008dc6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e29c      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008dc6:	4b7e      	ldr	r3, [pc, #504]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1ed      	bne.n	8008db0 <HAL_RCC_OscConfig+0x850>
 8008dd4:	e037      	b.n	8008e46 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8008dd6:	f7fb f835 	bl	8003e44 <HAL_GetTick>
 8008dda:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ddc:	e00a      	b.n	8008df4 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dde:	f7fb f831 	bl	8003e44 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e285      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008df4:	4b72      	ldr	r3, [pc, #456]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1ed      	bne.n	8008dde <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008e02:	4b6f      	ldr	r3, [pc, #444]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01a      	beq.n	8008e46 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008e10:	4b6b      	ldr	r3, [pc, #428]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e16:	4a6a      	ldr	r2, [pc, #424]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008e20:	e00a      	b.n	8008e38 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e22:	f7fb f80f 	bl	8003e44 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d901      	bls.n	8008e38 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e263      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008e38:	4b61      	ldr	r3, [pc, #388]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1ed      	bne.n	8008e22 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d107      	bne.n	8008e5e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e4e:	4b5c      	ldr	r3, [pc, #368]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e54:	4a5a      	ldr	r2, [pc, #360]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008e56:	f023 0304 	bic.w	r3, r3, #4
 8008e5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0320 	and.w	r3, r3, #32
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d036      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d019      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008e72:	4b53      	ldr	r3, [pc, #332]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a52      	ldr	r2, [pc, #328]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e7c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008e7e:	f7fa ffe1 	bl	8003e44 <HAL_GetTick>
 8008e82:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008e84:	e008      	b.n	8008e98 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e86:	f7fa ffdd 	bl	8003e44 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d901      	bls.n	8008e98 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e233      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008e98:	4b49      	ldr	r3, [pc, #292]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0f0      	beq.n	8008e86 <HAL_RCC_OscConfig+0x926>
 8008ea4:	e018      	b.n	8008ed8 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008ea6:	4b46      	ldr	r3, [pc, #280]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a45      	ldr	r2, [pc, #276]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eb0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008eb2:	f7fa ffc7 	bl	8003e44 <HAL_GetTick>
 8008eb6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008eb8:	e008      	b.n	8008ecc <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008eba:	f7fa ffc3 	bl	8003e44 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d901      	bls.n	8008ecc <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e219      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008ecc:	4b3c      	ldr	r3, [pc, #240]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f0      	bne.n	8008eba <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d036      	beq.n	8008f52 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d019      	beq.n	8008f20 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008eec:	4b34      	ldr	r3, [pc, #208]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a33      	ldr	r2, [pc, #204]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ef6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008ef8:	f7fa ffa4 	bl	8003e44 <HAL_GetTick>
 8008efc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008efe:	e008      	b.n	8008f12 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008f00:	f7fa ffa0 	bl	8003e44 <HAL_GetTick>
 8008f04:	4602      	mov	r2, r0
 8008f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d901      	bls.n	8008f12 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e1f6      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008f12:	4b2b      	ldr	r3, [pc, #172]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0f0      	beq.n	8008f00 <HAL_RCC_OscConfig+0x9a0>
 8008f1e:	e018      	b.n	8008f52 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008f20:	4b27      	ldr	r3, [pc, #156]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a26      	ldr	r2, [pc, #152]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008f2c:	f7fa ff8a 	bl	8003e44 <HAL_GetTick>
 8008f30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008f32:	e008      	b.n	8008f46 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008f34:	f7fa ff86 	bl	8003e44 <HAL_GetTick>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d901      	bls.n	8008f46 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e1dc      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008f46:	4b1e      	ldr	r3, [pc, #120]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1f0      	bne.n	8008f34 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d07f      	beq.n	800905e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d062      	beq.n	800902c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008f66:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	4a15      	ldr	r2, [pc, #84]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008f6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f70:	6093      	str	r3, [r2, #8]
 8008f72:	4b13      	ldr	r3, [pc, #76]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7e:	4910      	ldr	r1, [pc, #64]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008f80:	4313      	orrs	r3, r2
 8008f82:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008f8c:	d309      	bcc.n	8008fa2 <HAL_RCC_OscConfig+0xa42>
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	f023 021f 	bic.w	r2, r3, #31
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	4909      	ldr	r1, [pc, #36]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	60cb      	str	r3, [r1, #12]
 8008fa0:	e02a      	b.n	8008ff8 <HAL_RCC_OscConfig+0xa98>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	da0c      	bge.n	8008fc4 <HAL_RCC_OscConfig+0xa64>
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	015b      	lsls	r3, r3, #5
 8008fb8:	4901      	ldr	r1, [pc, #4]	; (8008fc0 <HAL_RCC_OscConfig+0xa60>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60cb      	str	r3, [r1, #12]
 8008fbe:	e01b      	b.n	8008ff8 <HAL_RCC_OscConfig+0xa98>
 8008fc0:	46020c00 	.word	0x46020c00
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fcc:	d30a      	bcc.n	8008fe4 <HAL_RCC_OscConfig+0xa84>
 8008fce:	4ba5      	ldr	r3, [pc, #660]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	029b      	lsls	r3, r3, #10
 8008fdc:	49a1      	ldr	r1, [pc, #644]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60cb      	str	r3, [r1, #12]
 8008fe2:	e009      	b.n	8008ff8 <HAL_RCC_OscConfig+0xa98>
 8008fe4:	4b9f      	ldr	r3, [pc, #636]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	03db      	lsls	r3, r3, #15
 8008ff2:	499c      	ldr	r1, [pc, #624]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008ff8:	4b9a      	ldr	r3, [pc, #616]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a99      	ldr	r2, [pc, #612]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8008ffe:	f043 0310 	orr.w	r3, r3, #16
 8009002:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009004:	f7fa ff1e 	bl	8003e44 <HAL_GetTick>
 8009008:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800900a:	e008      	b.n	800901e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800900c:	f7fa ff1a 	bl	8003e44 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	2b02      	cmp	r3, #2
 8009018:	d901      	bls.n	800901e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e170      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800901e:	4b91      	ldr	r3, [pc, #580]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0320 	and.w	r3, r3, #32
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0f0      	beq.n	800900c <HAL_RCC_OscConfig+0xaac>
 800902a:	e018      	b.n	800905e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800902c:	4b8d      	ldr	r3, [pc, #564]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a8c      	ldr	r2, [pc, #560]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009032:	f023 0310 	bic.w	r3, r3, #16
 8009036:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009038:	f7fa ff04 	bl	8003e44 <HAL_GetTick>
 800903c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800903e:	e008      	b.n	8009052 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009040:	f7fa ff00 	bl	8003e44 <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	2b02      	cmp	r3, #2
 800904c:	d901      	bls.n	8009052 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e156      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009052:	4b84      	ldr	r3, [pc, #528]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f0      	bne.n	8009040 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 814b 	beq.w	80092fe <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8009068:	2300      	movs	r3, #0
 800906a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800906e:	4b7d      	ldr	r3, [pc, #500]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	f003 030c 	and.w	r3, r3, #12
 8009076:	2b0c      	cmp	r3, #12
 8009078:	f000 80fa 	beq.w	8009270 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	2b02      	cmp	r3, #2
 8009082:	f040 80cc 	bne.w	800921e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009086:	4b77      	ldr	r3, [pc, #476]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a76      	ldr	r2, [pc, #472]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 800908c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009090:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009092:	f7fa fed7 	bl	8003e44 <HAL_GetTick>
 8009096:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009098:	e008      	b.n	80090ac <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800909a:	f7fa fed3 	bl	8003e44 <HAL_GetTick>
 800909e:	4602      	mov	r2, r0
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d901      	bls.n	80090ac <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e129      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80090ac:	4b6d      	ldr	r3, [pc, #436]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1f0      	bne.n	800909a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090b8:	4b6a      	ldr	r3, [pc, #424]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80090ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090be:	f003 0304 	and.w	r3, r3, #4
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d111      	bne.n	80090ea <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80090c6:	4b67      	ldr	r3, [pc, #412]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80090c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090cc:	4a65      	ldr	r2, [pc, #404]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80090ce:	f043 0304 	orr.w	r3, r3, #4
 80090d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80090d6:	4b63      	ldr	r3, [pc, #396]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80090d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090dc:	f003 0304 	and.w	r3, r3, #4
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80090e4:	2301      	movs	r3, #1
 80090e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80090ea:	4b5f      	ldr	r3, [pc, #380]	; (8009268 <HAL_RCC_OscConfig+0xd08>)
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090f6:	d102      	bne.n	80090fe <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80090f8:	2301      	movs	r3, #1
 80090fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80090fe:	4b5a      	ldr	r3, [pc, #360]	; (8009268 <HAL_RCC_OscConfig+0xd08>)
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	4a59      	ldr	r2, [pc, #356]	; (8009268 <HAL_RCC_OscConfig+0xd08>)
 8009104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009108:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800910a:	4b56      	ldr	r3, [pc, #344]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 800910c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009112:	f023 0303 	bic.w	r3, r3, #3
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800911e:	3a01      	subs	r2, #1
 8009120:	0212      	lsls	r2, r2, #8
 8009122:	4311      	orrs	r1, r2
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009128:	430a      	orrs	r2, r1
 800912a:	494e      	ldr	r1, [pc, #312]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 800912c:	4313      	orrs	r3, r2
 800912e:	628b      	str	r3, [r1, #40]	; 0x28
 8009130:	4b4c      	ldr	r3, [pc, #304]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009134:	4b4d      	ldr	r3, [pc, #308]	; (800926c <HAL_RCC_OscConfig+0xd0c>)
 8009136:	4013      	ands	r3, r2
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800913c:	3a01      	subs	r2, #1
 800913e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009146:	3a01      	subs	r2, #1
 8009148:	0252      	lsls	r2, r2, #9
 800914a:	b292      	uxth	r2, r2
 800914c:	4311      	orrs	r1, r2
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009152:	3a01      	subs	r2, #1
 8009154:	0412      	lsls	r2, r2, #16
 8009156:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800915a:	4311      	orrs	r1, r2
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009160:	3a01      	subs	r2, #1
 8009162:	0612      	lsls	r2, r2, #24
 8009164:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009168:	430a      	orrs	r2, r1
 800916a:	493e      	ldr	r1, [pc, #248]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 800916c:	4313      	orrs	r3, r2
 800916e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009170:	4b3c      	ldr	r3, [pc, #240]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	4a3b      	ldr	r2, [pc, #236]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009176:	f023 0310 	bic.w	r3, r3, #16
 800917a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800917c:	4b39      	ldr	r3, [pc, #228]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009184:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800918c:	00d2      	lsls	r2, r2, #3
 800918e:	4935      	ldr	r1, [pc, #212]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009190:	4313      	orrs	r3, r2
 8009192:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009194:	4b33      	ldr	r3, [pc, #204]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009198:	4a32      	ldr	r2, [pc, #200]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 800919a:	f043 0310 	orr.w	r3, r3, #16
 800919e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80091a0:	4b30      	ldr	r3, [pc, #192]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80091a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a4:	f023 020c 	bic.w	r2, r3, #12
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ac:	492d      	ldr	r1, [pc, #180]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80091b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d105      	bne.n	80091c6 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80091ba:	4b2b      	ldr	r3, [pc, #172]	; (8009268 <HAL_RCC_OscConfig+0xd08>)
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	4a2a      	ldr	r2, [pc, #168]	; (8009268 <HAL_RCC_OscConfig+0xd08>)
 80091c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091c4:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80091c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d107      	bne.n	80091de <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80091ce:	4b25      	ldr	r3, [pc, #148]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80091d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091d4:	4a23      	ldr	r2, [pc, #140]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80091d6:	f023 0304 	bic.w	r3, r3, #4
 80091da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80091de:	4b21      	ldr	r3, [pc, #132]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80091e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e2:	4a20      	ldr	r2, [pc, #128]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80091e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091e8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80091ea:	4b1e      	ldr	r3, [pc, #120]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a1d      	ldr	r2, [pc, #116]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 80091f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80091f6:	f7fa fe25 	bl	8003e44 <HAL_GetTick>
 80091fa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80091fc:	e008      	b.n	8009210 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091fe:	f7fa fe21 	bl	8003e44 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	2b02      	cmp	r3, #2
 800920a:	d901      	bls.n	8009210 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e077      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009210:	4b14      	ldr	r3, [pc, #80]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d0f0      	beq.n	80091fe <HAL_RCC_OscConfig+0xc9e>
 800921c:	e06f      	b.n	80092fe <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800921e:	4b11      	ldr	r3, [pc, #68]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a10      	ldr	r2, [pc, #64]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009228:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800922a:	f7fa fe0b 	bl	8003e44 <HAL_GetTick>
 800922e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009230:	e008      	b.n	8009244 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009232:	f7fa fe07 	bl	8003e44 <HAL_GetTick>
 8009236:	4602      	mov	r2, r0
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	2b02      	cmp	r3, #2
 800923e:	d901      	bls.n	8009244 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e05d      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009244:	4b07      	ldr	r3, [pc, #28]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1f0      	bne.n	8009232 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009250:	4b04      	ldr	r3, [pc, #16]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009254:	4a03      	ldr	r2, [pc, #12]	; (8009264 <HAL_RCC_OscConfig+0xd04>)
 8009256:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800925a:	f023 0303 	bic.w	r3, r3, #3
 800925e:	6293      	str	r3, [r2, #40]	; 0x28
 8009260:	e04d      	b.n	80092fe <HAL_RCC_OscConfig+0xd9e>
 8009262:	bf00      	nop
 8009264:	46020c00 	.word	0x46020c00
 8009268:	46020800 	.word	0x46020800
 800926c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8009270:	4b25      	ldr	r3, [pc, #148]	; (8009308 <HAL_RCC_OscConfig+0xda8>)
 8009272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009274:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009276:	4b24      	ldr	r3, [pc, #144]	; (8009308 <HAL_RCC_OscConfig+0xda8>)
 8009278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	2b01      	cmp	r3, #1
 8009282:	d03a      	beq.n	80092fa <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	f003 0203 	and.w	r2, r3, #3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800928e:	429a      	cmp	r2, r3
 8009290:	d133      	bne.n	80092fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	0a1b      	lsrs	r3, r3, #8
 8009296:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d12a      	bne.n	80092fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	0b1b      	lsrs	r3, r3, #12
 80092a8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d122      	bne.n	80092fa <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092be:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d11a      	bne.n	80092fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	0a5b      	lsrs	r3, r3, #9
 80092c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092d0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d111      	bne.n	80092fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	0c1b      	lsrs	r3, r3, #16
 80092da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d108      	bne.n	80092fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	0e1b      	lsrs	r3, r3, #24
 80092ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d001      	beq.n	80092fe <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3738      	adds	r7, #56	; 0x38
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	46020c00 	.word	0x46020c00

0800930c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e1d9      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009320:	4b9b      	ldr	r3, [pc, #620]	; (8009590 <HAL_RCC_ClockConfig+0x284>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 030f 	and.w	r3, r3, #15
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d910      	bls.n	8009350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800932e:	4b98      	ldr	r3, [pc, #608]	; (8009590 <HAL_RCC_ClockConfig+0x284>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f023 020f 	bic.w	r2, r3, #15
 8009336:	4996      	ldr	r1, [pc, #600]	; (8009590 <HAL_RCC_ClockConfig+0x284>)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	4313      	orrs	r3, r2
 800933c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800933e:	4b94      	ldr	r3, [pc, #592]	; (8009590 <HAL_RCC_ClockConfig+0x284>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 030f 	and.w	r3, r3, #15
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	429a      	cmp	r2, r3
 800934a:	d001      	beq.n	8009350 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e1c1      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0310 	and.w	r3, r3, #16
 8009358:	2b00      	cmp	r3, #0
 800935a:	d010      	beq.n	800937e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	695a      	ldr	r2, [r3, #20]
 8009360:	4b8c      	ldr	r3, [pc, #560]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009368:	429a      	cmp	r2, r3
 800936a:	d908      	bls.n	800937e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800936c:	4b89      	ldr	r3, [pc, #548]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	4986      	ldr	r1, [pc, #536]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 800937a:	4313      	orrs	r3, r2
 800937c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0308 	and.w	r3, r3, #8
 8009386:	2b00      	cmp	r3, #0
 8009388:	d012      	beq.n	80093b0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	691a      	ldr	r2, [r3, #16]
 800938e:	4b81      	ldr	r3, [pc, #516]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	091b      	lsrs	r3, r3, #4
 8009394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009398:	429a      	cmp	r2, r3
 800939a:	d909      	bls.n	80093b0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800939c:	4b7d      	ldr	r3, [pc, #500]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	011b      	lsls	r3, r3, #4
 80093aa:	497a      	ldr	r1, [pc, #488]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d010      	beq.n	80093de <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	4b74      	ldr	r3, [pc, #464]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d908      	bls.n	80093de <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80093cc:	4b71      	ldr	r3, [pc, #452]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80093ce:	6a1b      	ldr	r3, [r3, #32]
 80093d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	496e      	ldr	r1, [pc, #440]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0302 	and.w	r3, r3, #2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d010      	beq.n	800940c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	689a      	ldr	r2, [r3, #8]
 80093ee:	4b69      	ldr	r3, [pc, #420]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	f003 030f 	and.w	r3, r3, #15
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d908      	bls.n	800940c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80093fa:	4b66      	ldr	r3, [pc, #408]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	f023 020f 	bic.w	r2, r3, #15
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	4963      	ldr	r1, [pc, #396]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 8009408:	4313      	orrs	r3, r2
 800940a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 80d2 	beq.w	80095be <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	2b03      	cmp	r3, #3
 8009424:	d143      	bne.n	80094ae <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009426:	4b5b      	ldr	r3, [pc, #364]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 8009428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b00      	cmp	r3, #0
 8009432:	d110      	bne.n	8009456 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009434:	4b57      	ldr	r3, [pc, #348]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 8009436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800943a:	4a56      	ldr	r2, [pc, #344]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 800943c:	f043 0304 	orr.w	r3, r3, #4
 8009440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009444:	4b53      	ldr	r3, [pc, #332]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 8009446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800944a:	f003 0304 	and.w	r3, r3, #4
 800944e:	60bb      	str	r3, [r7, #8]
 8009450:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8009452:	2301      	movs	r3, #1
 8009454:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8009456:	f7fa fcf5 	bl	8003e44 <HAL_GetTick>
 800945a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800945c:	4b4e      	ldr	r3, [pc, #312]	; (8009598 <HAL_RCC_ClockConfig+0x28c>)
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00f      	beq.n	8009488 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009468:	e008      	b.n	800947c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800946a:	f7fa fceb 	bl	8003e44 <HAL_GetTick>
 800946e:	4602      	mov	r2, r0
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	2b02      	cmp	r3, #2
 8009476:	d901      	bls.n	800947c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e12b      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800947c:	4b46      	ldr	r3, [pc, #280]	; (8009598 <HAL_RCC_ClockConfig+0x28c>)
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0f0      	beq.n	800946a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d107      	bne.n	800949e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800948e:	4b41      	ldr	r3, [pc, #260]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 8009490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009494:	4a3f      	ldr	r2, [pc, #252]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 8009496:	f023 0304 	bic.w	r3, r3, #4
 800949a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800949e:	4b3d      	ldr	r3, [pc, #244]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d121      	bne.n	80094ee <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e112      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d107      	bne.n	80094c6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094b6:	4b37      	ldr	r3, [pc, #220]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d115      	bne.n	80094ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e106      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d107      	bne.n	80094de <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80094ce:	4b31      	ldr	r3, [pc, #196]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0304 	and.w	r3, r3, #4
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d109      	bne.n	80094ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e0fa      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094de:	4b2d      	ldr	r3, [pc, #180]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e0f2      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80094ee:	4b29      	ldr	r3, [pc, #164]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	f023 0203 	bic.w	r2, r3, #3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	4926      	ldr	r1, [pc, #152]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8009500:	f7fa fca0 	bl	8003e44 <HAL_GetTick>
 8009504:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	2b03      	cmp	r3, #3
 800950c:	d112      	bne.n	8009534 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800950e:	e00a      	b.n	8009526 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009510:	f7fa fc98 	bl	8003e44 <HAL_GetTick>
 8009514:	4602      	mov	r2, r0
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	f241 3288 	movw	r2, #5000	; 0x1388
 800951e:	4293      	cmp	r3, r2
 8009520:	d901      	bls.n	8009526 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e0d6      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009526:	4b1b      	ldr	r3, [pc, #108]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	f003 030c 	and.w	r3, r3, #12
 800952e:	2b0c      	cmp	r3, #12
 8009530:	d1ee      	bne.n	8009510 <HAL_RCC_ClockConfig+0x204>
 8009532:	e044      	b.n	80095be <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d112      	bne.n	8009562 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800953c:	e00a      	b.n	8009554 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800953e:	f7fa fc81 	bl	8003e44 <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	f241 3288 	movw	r2, #5000	; 0x1388
 800954c:	4293      	cmp	r3, r2
 800954e:	d901      	bls.n	8009554 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e0bf      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009554:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	f003 030c 	and.w	r3, r3, #12
 800955c:	2b08      	cmp	r3, #8
 800955e:	d1ee      	bne.n	800953e <HAL_RCC_ClockConfig+0x232>
 8009560:	e02d      	b.n	80095be <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d123      	bne.n	80095b2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800956a:	e00a      	b.n	8009582 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800956c:	f7fa fc6a 	bl	8003e44 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	f241 3288 	movw	r2, #5000	; 0x1388
 800957a:	4293      	cmp	r3, r2
 800957c:	d901      	bls.n	8009582 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e0a8      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009582:	4b04      	ldr	r3, [pc, #16]	; (8009594 <HAL_RCC_ClockConfig+0x288>)
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	f003 030c 	and.w	r3, r3, #12
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1ee      	bne.n	800956c <HAL_RCC_ClockConfig+0x260>
 800958e:	e016      	b.n	80095be <HAL_RCC_ClockConfig+0x2b2>
 8009590:	40022000 	.word	0x40022000
 8009594:	46020c00 	.word	0x46020c00
 8009598:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800959c:	f7fa fc52 	bl	8003e44 <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d901      	bls.n	80095b2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e090      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80095b2:	4b4a      	ldr	r3, [pc, #296]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f003 030c 	and.w	r3, r3, #12
 80095ba:	2b04      	cmp	r3, #4
 80095bc:	d1ee      	bne.n	800959c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d010      	beq.n	80095ec <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	689a      	ldr	r2, [r3, #8]
 80095ce:	4b43      	ldr	r3, [pc, #268]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	f003 030f 	and.w	r3, r3, #15
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d208      	bcs.n	80095ec <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80095da:	4b40      	ldr	r3, [pc, #256]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	f023 020f 	bic.w	r2, r3, #15
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	493d      	ldr	r1, [pc, #244]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 80095e8:	4313      	orrs	r3, r2
 80095ea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095ec:	4b3c      	ldr	r3, [pc, #240]	; (80096e0 <HAL_RCC_ClockConfig+0x3d4>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 030f 	and.w	r3, r3, #15
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d210      	bcs.n	800961c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095fa:	4b39      	ldr	r3, [pc, #228]	; (80096e0 <HAL_RCC_ClockConfig+0x3d4>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f023 020f 	bic.w	r2, r3, #15
 8009602:	4937      	ldr	r1, [pc, #220]	; (80096e0 <HAL_RCC_ClockConfig+0x3d4>)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	4313      	orrs	r3, r2
 8009608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800960a:	4b35      	ldr	r3, [pc, #212]	; (80096e0 <HAL_RCC_ClockConfig+0x3d4>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 030f 	and.w	r3, r3, #15
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	429a      	cmp	r2, r3
 8009616:	d001      	beq.n	800961c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e05b      	b.n	80096d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0304 	and.w	r3, r3, #4
 8009624:	2b00      	cmp	r3, #0
 8009626:	d010      	beq.n	800964a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	4b2b      	ldr	r3, [pc, #172]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009634:	429a      	cmp	r2, r3
 8009636:	d208      	bcs.n	800964a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009638:	4b28      	ldr	r3, [pc, #160]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 800963a:	6a1b      	ldr	r3, [r3, #32]
 800963c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	4925      	ldr	r1, [pc, #148]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 8009646:	4313      	orrs	r3, r2
 8009648:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0308 	and.w	r3, r3, #8
 8009652:	2b00      	cmp	r3, #0
 8009654:	d012      	beq.n	800967c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	4b20      	ldr	r3, [pc, #128]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	091b      	lsrs	r3, r3, #4
 8009660:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009664:	429a      	cmp	r2, r3
 8009666:	d209      	bcs.n	800967c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009668:	4b1c      	ldr	r3, [pc, #112]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 800966a:	6a1b      	ldr	r3, [r3, #32]
 800966c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	011b      	lsls	r3, r3, #4
 8009676:	4919      	ldr	r1, [pc, #100]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 8009678:	4313      	orrs	r3, r2
 800967a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0310 	and.w	r3, r3, #16
 8009684:	2b00      	cmp	r3, #0
 8009686:	d010      	beq.n	80096aa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	695a      	ldr	r2, [r3, #20]
 800968c:	4b13      	ldr	r3, [pc, #76]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009694:	429a      	cmp	r2, r3
 8009696:	d208      	bcs.n	80096aa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8009698:	4b10      	ldr	r3, [pc, #64]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 800969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	695b      	ldr	r3, [r3, #20]
 80096a4:	490d      	ldr	r1, [pc, #52]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80096aa:	f000 f821 	bl	80096f0 <HAL_RCC_GetSysClockFreq>
 80096ae:	4602      	mov	r2, r0
 80096b0:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <HAL_RCC_ClockConfig+0x3d0>)
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	f003 030f 	and.w	r3, r3, #15
 80096b8:	490a      	ldr	r1, [pc, #40]	; (80096e4 <HAL_RCC_ClockConfig+0x3d8>)
 80096ba:	5ccb      	ldrb	r3, [r1, r3]
 80096bc:	fa22 f303 	lsr.w	r3, r2, r3
 80096c0:	4a09      	ldr	r2, [pc, #36]	; (80096e8 <HAL_RCC_ClockConfig+0x3dc>)
 80096c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80096c4:	4b09      	ldr	r3, [pc, #36]	; (80096ec <HAL_RCC_ClockConfig+0x3e0>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fa fa73 	bl	8003bb4 <HAL_InitTick>
 80096ce:	4603      	mov	r3, r0
 80096d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	46020c00 	.word	0x46020c00
 80096e0:	40022000 	.word	0x40022000
 80096e4:	0800d2d4 	.word	0x0800d2d4
 80096e8:	2000001c 	.word	0x2000001c
 80096ec:	20000020 	.word	0x20000020

080096f0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b08b      	sub	sp, #44	; 0x2c
 80096f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80096fa:	2300      	movs	r3, #0
 80096fc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096fe:	4b7b      	ldr	r3, [pc, #492]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	f003 030c 	and.w	r3, r3, #12
 8009706:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009708:	4b78      	ldr	r3, [pc, #480]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800970a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970c:	f003 0303 	and.w	r3, r3, #3
 8009710:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d005      	beq.n	8009724 <HAL_RCC_GetSysClockFreq+0x34>
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	2b0c      	cmp	r3, #12
 800971c:	d121      	bne.n	8009762 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d11e      	bne.n	8009762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8009724:	4b71      	ldr	r3, [pc, #452]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d107      	bne.n	8009740 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009730:	4b6e      	ldr	r3, [pc, #440]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009736:	0b1b      	lsrs	r3, r3, #12
 8009738:	f003 030f 	and.w	r3, r3, #15
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
 800973e:	e005      	b.n	800974c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009740:	4b6a      	ldr	r3, [pc, #424]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	0f1b      	lsrs	r3, r3, #28
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800974c:	4a68      	ldr	r2, [pc, #416]	; (80098f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009754:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d110      	bne.n	800977e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009760:	e00d      	b.n	800977e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009762:	4b62      	ldr	r3, [pc, #392]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	f003 030c 	and.w	r3, r3, #12
 800976a:	2b04      	cmp	r3, #4
 800976c:	d102      	bne.n	8009774 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800976e:	4b61      	ldr	r3, [pc, #388]	; (80098f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8009770:	623b      	str	r3, [r7, #32]
 8009772:	e004      	b.n	800977e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	2b08      	cmp	r3, #8
 8009778:	d101      	bne.n	800977e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800977a:	4b5e      	ldr	r3, [pc, #376]	; (80098f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800977c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	2b0c      	cmp	r3, #12
 8009782:	f040 80ac 	bne.w	80098de <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009786:	4b59      	ldr	r3, [pc, #356]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009790:	4b56      	ldr	r3, [pc, #344]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009794:	0a1b      	lsrs	r3, r3, #8
 8009796:	f003 030f 	and.w	r3, r3, #15
 800979a:	3301      	adds	r3, #1
 800979c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800979e:	4b53      	ldr	r3, [pc, #332]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80097a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a2:	091b      	lsrs	r3, r3, #4
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80097aa:	4b50      	ldr	r3, [pc, #320]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80097ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ae:	08db      	lsrs	r3, r3, #3
 80097b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	fb02 f303 	mul.w	r3, r2, r3
 80097ba:	ee07 3a90 	vmov	s15, r3
 80097be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 8086 	beq.w	80098da <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d003      	beq.n	80097dc <HAL_RCC_GetSysClockFreq+0xec>
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d022      	beq.n	8009820 <HAL_RCC_GetSysClockFreq+0x130>
 80097da:	e043      	b.n	8009864 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	ee07 3a90 	vmov	s15, r3
 80097e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e6:	eddf 6a44 	vldr	s13, [pc, #272]	; 80098f8 <HAL_RCC_GetSysClockFreq+0x208>
 80097ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ee:	4b3f      	ldr	r3, [pc, #252]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80097f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f6:	ee07 3a90 	vmov	s15, r3
 80097fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80097fe:	ed97 6a01 	vldr	s12, [r7, #4]
 8009802:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80098fc <HAL_RCC_GetSysClockFreq+0x20c>
 8009806:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800980a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800980e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009812:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800981a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800981e:	e046      	b.n	80098ae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	ee07 3a90 	vmov	s15, r3
 8009826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800982a:	eddf 6a33 	vldr	s13, [pc, #204]	; 80098f8 <HAL_RCC_GetSysClockFreq+0x208>
 800982e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009832:	4b2e      	ldr	r3, [pc, #184]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800983a:	ee07 3a90 	vmov	s15, r3
 800983e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009842:	ed97 6a01 	vldr	s12, [r7, #4]
 8009846:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80098fc <HAL_RCC_GetSysClockFreq+0x20c>
 800984a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800984e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009856:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800985a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800985e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8009862:	e024      	b.n	80098ae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	ee07 3a90 	vmov	s15, r3
 800986a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	ee07 3a90 	vmov	s15, r3
 8009874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800987c:	4b1b      	ldr	r3, [pc, #108]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800987e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009884:	ee07 3a90 	vmov	s15, r3
 8009888:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800988c:	ed97 6a01 	vldr	s12, [r7, #4]
 8009890:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80098fc <HAL_RCC_GetSysClockFreq+0x20c>
 8009894:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009898:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800989c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80098a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80098ac:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80098ae:	4b0f      	ldr	r3, [pc, #60]	; (80098ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80098b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b2:	0e1b      	lsrs	r3, r3, #24
 80098b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b8:	3301      	adds	r3, #1
 80098ba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80098c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80098ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098d2:	ee17 3a90 	vmov	r3, s15
 80098d6:	623b      	str	r3, [r7, #32]
 80098d8:	e001      	b.n	80098de <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80098de:	6a3b      	ldr	r3, [r7, #32]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	372c      	adds	r7, #44	; 0x2c
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	46020c00 	.word	0x46020c00
 80098f0:	0800d2ec 	.word	0x0800d2ec
 80098f4:	00f42400 	.word	0x00f42400
 80098f8:	4b742400 	.word	0x4b742400
 80098fc:	46000000 	.word	0x46000000

08009900 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009904:	f7ff fef4 	bl	80096f0 <HAL_RCC_GetSysClockFreq>
 8009908:	4602      	mov	r2, r0
 800990a:	4b07      	ldr	r3, [pc, #28]	; (8009928 <HAL_RCC_GetHCLKFreq+0x28>)
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	f003 030f 	and.w	r3, r3, #15
 8009912:	4906      	ldr	r1, [pc, #24]	; (800992c <HAL_RCC_GetHCLKFreq+0x2c>)
 8009914:	5ccb      	ldrb	r3, [r1, r3]
 8009916:	fa22 f303 	lsr.w	r3, r2, r3
 800991a:	4a05      	ldr	r2, [pc, #20]	; (8009930 <HAL_RCC_GetHCLKFreq+0x30>)
 800991c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800991e:	4b04      	ldr	r3, [pc, #16]	; (8009930 <HAL_RCC_GetHCLKFreq+0x30>)
 8009920:	681b      	ldr	r3, [r3, #0]
}
 8009922:	4618      	mov	r0, r3
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	46020c00 	.word	0x46020c00
 800992c:	0800d2d4 	.word	0x0800d2d4
 8009930:	2000001c 	.word	0x2000001c

08009934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8009938:	f7ff ffe2 	bl	8009900 <HAL_RCC_GetHCLKFreq>
 800993c:	4602      	mov	r2, r0
 800993e:	4b05      	ldr	r3, [pc, #20]	; (8009954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	091b      	lsrs	r3, r3, #4
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	4903      	ldr	r1, [pc, #12]	; (8009958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800994a:	5ccb      	ldrb	r3, [r1, r3]
 800994c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009950:	4618      	mov	r0, r3
 8009952:	bd80      	pop	{r7, pc}
 8009954:	46020c00 	.word	0x46020c00
 8009958:	0800d2e4 	.word	0x0800d2e4

0800995c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	221f      	movs	r2, #31
 800996a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800996c:	4b15      	ldr	r3, [pc, #84]	; (80099c4 <HAL_RCC_GetClockConfig+0x68>)
 800996e:	69db      	ldr	r3, [r3, #28]
 8009970:	f003 0203 	and.w	r2, r3, #3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8009978:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <HAL_RCC_GetClockConfig+0x68>)
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	f003 020f 	and.w	r2, r3, #15
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8009984:	4b0f      	ldr	r3, [pc, #60]	; (80099c4 <HAL_RCC_GetClockConfig+0x68>)
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8009990:	4b0c      	ldr	r3, [pc, #48]	; (80099c4 <HAL_RCC_GetClockConfig+0x68>)
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	091b      	lsrs	r3, r3, #4
 8009996:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800999e:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <HAL_RCC_GetClockConfig+0x68>)
 80099a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80099aa:	4b07      	ldr	r3, [pc, #28]	; (80099c8 <HAL_RCC_GetClockConfig+0x6c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 020f 	and.w	r2, r3, #15
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	601a      	str	r2, [r3, #0]
}
 80099b6:	bf00      	nop
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	46020c00 	.word	0x46020c00
 80099c8:	40022000 	.word	0x40022000

080099cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80099d4:	4b3e      	ldr	r3, [pc, #248]	; (8009ad0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80099d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099da:	f003 0304 	and.w	r3, r3, #4
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80099e2:	f7fe fd4f 	bl	8008484 <HAL_PWREx_GetVoltageRange>
 80099e6:	6178      	str	r0, [r7, #20]
 80099e8:	e019      	b.n	8009a1e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80099ea:	4b39      	ldr	r3, [pc, #228]	; (8009ad0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80099ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099f0:	4a37      	ldr	r2, [pc, #220]	; (8009ad0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80099f2:	f043 0304 	orr.w	r3, r3, #4
 80099f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80099fa:	4b35      	ldr	r3, [pc, #212]	; (8009ad0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80099fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a00:	f003 0304 	and.w	r3, r3, #4
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009a08:	f7fe fd3c 	bl	8008484 <HAL_PWREx_GetVoltageRange>
 8009a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009a0e:	4b30      	ldr	r3, [pc, #192]	; (8009ad0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a14:	4a2e      	ldr	r2, [pc, #184]	; (8009ad0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009a16:	f023 0304 	bic.w	r3, r3, #4
 8009a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a24:	d003      	beq.n	8009a2e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a2c:	d109      	bne.n	8009a42 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a34:	d202      	bcs.n	8009a3c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8009a36:	2301      	movs	r3, #1
 8009a38:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009a3a:	e033      	b.n	8009aa4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009a40:	e030      	b.n	8009aa4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a48:	d208      	bcs.n	8009a5c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a50:	d102      	bne.n	8009a58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8009a52:	2303      	movs	r3, #3
 8009a54:	613b      	str	r3, [r7, #16]
 8009a56:	e025      	b.n	8009aa4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e035      	b.n	8009ac8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a62:	d90f      	bls.n	8009a84 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d109      	bne.n	8009a7e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a70:	d902      	bls.n	8009a78 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009a72:	2300      	movs	r3, #0
 8009a74:	613b      	str	r3, [r7, #16]
 8009a76:	e015      	b.n	8009aa4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8009a78:	2301      	movs	r3, #1
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	e012      	b.n	8009aa4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8009a7e:	2300      	movs	r3, #0
 8009a80:	613b      	str	r3, [r7, #16]
 8009a82:	e00f      	b.n	8009aa4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a8a:	d109      	bne.n	8009aa0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a92:	d102      	bne.n	8009a9a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009a94:	2301      	movs	r3, #1
 8009a96:	613b      	str	r3, [r7, #16]
 8009a98:	e004      	b.n	8009aa4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8009a9a:	2302      	movs	r3, #2
 8009a9c:	613b      	str	r3, [r7, #16]
 8009a9e:	e001      	b.n	8009aa4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009aa4:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f023 020f 	bic.w	r2, r3, #15
 8009aac:	4909      	ldr	r1, [pc, #36]	; (8009ad4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009ab4:	4b07      	ldr	r3, [pc, #28]	; (8009ad4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 030f 	and.w	r3, r3, #15
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d001      	beq.n	8009ac6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e000      	b.n	8009ac8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	46020c00 	.word	0x46020c00
 8009ad4:	40022000 	.word	0x40022000

08009ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009adc:	b0ba      	sub	sp, #232	; 0xe8
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009aea:	2300      	movs	r3, #0
 8009aec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f002 0401 	and.w	r4, r2, #1
 8009afc:	2500      	movs	r5, #0
 8009afe:	ea54 0305 	orrs.w	r3, r4, r5
 8009b02:	d00b      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009b04:	4bcb      	ldr	r3, [pc, #812]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b0a:	f023 0103 	bic.w	r1, r3, #3
 8009b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b14:	4ac7      	ldr	r2, [pc, #796]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009b16:	430b      	orrs	r3, r1
 8009b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f002 0802 	and.w	r8, r2, #2
 8009b28:	f04f 0900 	mov.w	r9, #0
 8009b2c:	ea58 0309 	orrs.w	r3, r8, r9
 8009b30:	d00b      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009b32:	4bc0      	ldr	r3, [pc, #768]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b38:	f023 010c 	bic.w	r1, r3, #12
 8009b3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b42:	4abc      	ldr	r2, [pc, #752]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009b44:	430b      	orrs	r3, r1
 8009b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	f002 0a04 	and.w	sl, r2, #4
 8009b56:	f04f 0b00 	mov.w	fp, #0
 8009b5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8009b5e:	d00b      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009b60:	4bb4      	ldr	r3, [pc, #720]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b66:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b70:	4ab0      	ldr	r2, [pc, #704]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009b72:	430b      	orrs	r3, r1
 8009b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	f002 0308 	and.w	r3, r2, #8
 8009b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009b92:	460b      	mov	r3, r1
 8009b94:	4313      	orrs	r3, r2
 8009b96:	d00b      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8009b98:	4ba6      	ldr	r3, [pc, #664]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ba8:	4aa2      	ldr	r2, [pc, #648]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009baa:	430b      	orrs	r3, r1
 8009bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb8:	f002 0310 	and.w	r3, r2, #16
 8009bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bc6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	d00b      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009bd0:	4b98      	ldr	r3, [pc, #608]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009be0:	4a94      	ldr	r2, [pc, #592]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009be2:	430b      	orrs	r3, r1
 8009be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009be8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	f002 0320 	and.w	r3, r2, #32
 8009bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009bfe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009c02:	460b      	mov	r3, r1
 8009c04:	4313      	orrs	r3, r2
 8009c06:	d00b      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8009c08:	4b8a      	ldr	r3, [pc, #552]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c0e:	f023 0107 	bic.w	r1, r3, #7
 8009c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c18:	4a86      	ldr	r2, [pc, #536]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009c1a:	430b      	orrs	r3, r1
 8009c1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c30:	2300      	movs	r3, #0
 8009c32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	d00b      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8009c40:	4b7c      	ldr	r3, [pc, #496]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c46:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8009c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c50:	4a78      	ldr	r2, [pc, #480]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009c52:	430b      	orrs	r3, r1
 8009c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c60:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009c64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c68:	2300      	movs	r3, #0
 8009c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c6e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009c72:	460b      	mov	r3, r1
 8009c74:	4313      	orrs	r3, r2
 8009c76:	d00b      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009c78:	4b6e      	ldr	r3, [pc, #440]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c88:	4a6a      	ldr	r2, [pc, #424]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009c8a:	430b      	orrs	r3, r1
 8009c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8009c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009ca6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4313      	orrs	r3, r2
 8009cae:	d00b      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009cb0:	4b60      	ldr	r3, [pc, #384]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009cb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc0:	4a5c      	ldr	r2, [pc, #368]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009cc2:	430b      	orrs	r3, r1
 8009cc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009cde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	d00b      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009ce8:	4b52      	ldr	r3, [pc, #328]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009cee:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8009cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cf8:	4a4e      	ldr	r2, [pc, #312]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009cfa:	430b      	orrs	r3, r1
 8009cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009d00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8009d0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d10:	2300      	movs	r3, #0
 8009d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	d00b      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009d20:	4b44      	ldr	r3, [pc, #272]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009d26:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8009d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d30:	4a40      	ldr	r2, [pc, #256]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009d32:	430b      	orrs	r3, r1
 8009d34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009d38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009d4e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009d52:	460b      	mov	r3, r1
 8009d54:	4313      	orrs	r3, r2
 8009d56:	d00b      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009d58:	4b36      	ldr	r3, [pc, #216]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d5e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8009d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d68:	4a32      	ldr	r2, [pc, #200]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009d6a:	430b      	orrs	r3, r1
 8009d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8009d70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d80:	2300      	movs	r3, #0
 8009d82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	d00c      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8009d90:	4b28      	ldr	r3, [pc, #160]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009d96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009da2:	4a24      	ldr	r2, [pc, #144]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009da4:	430b      	orrs	r3, r1
 8009da6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009db6:	67bb      	str	r3, [r7, #120]	; 0x78
 8009db8:	2300      	movs	r3, #0
 8009dba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009dbc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	d04f      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dce:	2b80      	cmp	r3, #128	; 0x80
 8009dd0:	d02d      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8009dd2:	2b80      	cmp	r3, #128	; 0x80
 8009dd4:	d827      	bhi.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009dd6:	2b60      	cmp	r3, #96	; 0x60
 8009dd8:	d02e      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009dda:	2b60      	cmp	r3, #96	; 0x60
 8009ddc:	d823      	bhi.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009dde:	2b40      	cmp	r3, #64	; 0x40
 8009de0:	d006      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8009de2:	2b40      	cmp	r3, #64	; 0x40
 8009de4:	d81f      	bhi.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d009      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x326>
 8009dea:	2b20      	cmp	r3, #32
 8009dec:	d011      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8009dee:	e01a      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009df0:	4b10      	ldr	r3, [pc, #64]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df4:	4a0f      	ldr	r2, [pc, #60]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dfa:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009dfc:	e01d      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e02:	3308      	adds	r3, #8
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 fc27 	bl	800a658 <RCCEx_PLL2_Config>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009e10:	e013      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e16:	332c      	adds	r3, #44	; 0x2c
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fcb5 	bl	800a788 <RCCEx_PLL3_Config>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009e24:	e009      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8009e2c:	e005      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8009e2e:	bf00      	nop
 8009e30:	e003      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8009e32:	bf00      	nop
 8009e34:	46020c00 	.word	0x46020c00
        break;
 8009e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10d      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009e42:	4bb6      	ldr	r3, [pc, #728]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8009e44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e48:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8009e4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e54:	4ab1      	ldr	r2, [pc, #708]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8009e56:	430b      	orrs	r3, r1
 8009e58:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009e5c:	e003      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8009e62:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009e72:	673b      	str	r3, [r7, #112]	; 0x70
 8009e74:	2300      	movs	r3, #0
 8009e76:	677b      	str	r3, [r7, #116]	; 0x74
 8009e78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	d053      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e8e:	d033      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e94:	d82c      	bhi.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e9a:	d02f      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8009e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ea0:	d826      	bhi.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea6:	d008      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8009ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eac:	d820      	bhi.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00a      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8009eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb6:	d011      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8009eb8:	e01a      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009eba:	4b98      	ldr	r3, [pc, #608]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebe:	4a97      	ldr	r2, [pc, #604]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8009ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ec4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009ec6:	e01a      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ecc:	3308      	adds	r3, #8
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 fbc2 	bl	800a658 <RCCEx_PLL2_Config>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009eda:	e010      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009edc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ee0:	332c      	adds	r3, #44	; 0x2c
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fc50 	bl	800a788 <RCCEx_PLL3_Config>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009eee:	e006      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8009ef6:	e002      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8009ef8:	bf00      	nop
 8009efa:	e000      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8009efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009efe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10d      	bne.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009f06:	4b85      	ldr	r3, [pc, #532]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8009f08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009f0c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8009f10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f18:	4a80      	ldr	r2, [pc, #512]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8009f1a:	430b      	orrs	r3, r1
 8009f1c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009f20:	e003      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f22:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8009f26:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f38:	2300      	movs	r3, #0
 8009f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f3c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009f40:	460b      	mov	r3, r1
 8009f42:	4313      	orrs	r3, r2
 8009f44:	d046      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f4e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009f52:	d028      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8009f54:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009f58:	d821      	bhi.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8009f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f5e:	d022      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8009f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f64:	d81b      	bhi.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8009f66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f6a:	d01c      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8009f6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f70:	d815      	bhi.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8009f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f76:	d008      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f7c:	d80f      	bhi.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d011      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8009f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f86:	d00e      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8009f88:	e009      	b.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f8e:	3308      	adds	r3, #8
 8009f90:	4618      	mov	r0, r3
 8009f92:	f000 fb61 	bl	800a658 <RCCEx_PLL2_Config>
 8009f96:	4603      	mov	r3, r0
 8009f98:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8009f9c:	e004      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8009fa4:	e000      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8009fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fa8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10d      	bne.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009fb0:	4b5a      	ldr	r3, [pc, #360]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8009fb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009fb6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009fc2:	4a56      	ldr	r2, [pc, #344]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8009fc4:	430b      	orrs	r3, r1
 8009fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009fca:	e003      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fcc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8009fd0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009fd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	667b      	str	r3, [r7, #100]	; 0x64
 8009fe6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009fea:	460b      	mov	r3, r1
 8009fec:	4313      	orrs	r3, r2
 8009fee:	d03f      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	d81e      	bhi.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x562>
 8009ffc:	a201      	add	r2, pc, #4	; (adr r2, 800a004 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8009ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a002:	bf00      	nop
 800a004:	0800a043 	.word	0x0800a043
 800a008:	0800a019 	.word	0x0800a019
 800a00c:	0800a027 	.word	0x0800a027
 800a010:	0800a043 	.word	0x0800a043
 800a014:	0800a043 	.word	0x0800a043
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a018:	4b40      	ldr	r3, [pc, #256]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01c:	4a3f      	ldr	r2, [pc, #252]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a01e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a022:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a024:	e00e      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a02a:	332c      	adds	r3, #44	; 0x2c
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fbab 	bl	800a788 <RCCEx_PLL3_Config>
 800a032:	4603      	mov	r3, r0
 800a034:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a038:	e004      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a040:	e000      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800a042:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a044:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10d      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800a04c:	4b33      	ldr	r3, [pc, #204]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a04e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a052:	f023 0107 	bic.w	r1, r3, #7
 800a056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a05e:	4a2f      	ldr	r2, [pc, #188]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a060:	430b      	orrs	r3, r1
 800a062:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a066:	e003      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a068:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a06c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800a070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a07c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a07e:	2300      	movs	r3, #0
 800a080:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a082:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a086:	460b      	mov	r3, r1
 800a088:	4313      	orrs	r3, r2
 800a08a:	d04d      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800a08c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a094:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a098:	d028      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x614>
 800a09a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a09e:	d821      	bhi.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800a0a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a0a4:	d024      	beq.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800a0a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a0aa:	d81b      	bhi.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800a0ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0b0:	d00e      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800a0b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0b6:	d815      	bhi.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d01b      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800a0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0c0:	d110      	bne.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a0c2:	4b16      	ldr	r3, [pc, #88]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c6:	4a15      	ldr	r2, [pc, #84]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a0c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0cc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a0ce:	e012      	b.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a0d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0d4:	332c      	adds	r3, #44	; 0x2c
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 fb56 	bl	800a788 <RCCEx_PLL3_Config>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a0e2:	e008      	b.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a0ea:	e004      	b.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800a0ec:	bf00      	nop
 800a0ee:	e002      	b.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800a0f0:	bf00      	nop
 800a0f2:	e000      	b.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800a0f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a0f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d110      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800a0fe:	4b07      	ldr	r3, [pc, #28]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a104:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a10c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a110:	4a02      	ldr	r2, [pc, #8]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a112:	430b      	orrs	r3, r1
 800a114:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a118:	e006      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800a11a:	bf00      	nop
 800a11c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a120:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a124:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a128:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a134:	653b      	str	r3, [r7, #80]	; 0x50
 800a136:	2300      	movs	r3, #0
 800a138:	657b      	str	r3, [r7, #84]	; 0x54
 800a13a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a13e:	460b      	mov	r3, r1
 800a140:	4313      	orrs	r3, r2
 800a142:	f000 80b5 	beq.w	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a146:	2300      	movs	r3, #0
 800a148:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a14c:	4b9d      	ldr	r3, [pc, #628]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a14e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a152:	f003 0304 	and.w	r3, r3, #4
 800a156:	2b00      	cmp	r3, #0
 800a158:	d113      	bne.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a15a:	4b9a      	ldr	r3, [pc, #616]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a15c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a160:	4a98      	ldr	r2, [pc, #608]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a162:	f043 0304 	orr.w	r3, r3, #4
 800a166:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a16a:	4b96      	ldr	r3, [pc, #600]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a16c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a170:	f003 0304 	and.w	r3, r3, #4
 800a174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800a17c:	2301      	movs	r3, #1
 800a17e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a182:	4b91      	ldr	r3, [pc, #580]	; (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800a184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a186:	4a90      	ldr	r2, [pc, #576]	; (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800a188:	f043 0301 	orr.w	r3, r3, #1
 800a18c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a18e:	f7f9 fe59 	bl	8003e44 <HAL_GetTick>
 800a192:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a196:	e00b      	b.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a198:	f7f9 fe54 	bl	8003e44 <HAL_GetTick>
 800a19c:	4602      	mov	r2, r0
 800a19e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d903      	bls.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a1ae:	e005      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a1b0:	4b85      	ldr	r3, [pc, #532]	; (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800a1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b4:	f003 0301 	and.w	r3, r3, #1
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d0ed      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800a1bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d165      	bne.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a1c4:	4b7f      	ldr	r3, [pc, #508]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a1c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a1ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800a1d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d023      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800a1da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800a1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d01b      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a1ea:	4b76      	ldr	r3, [pc, #472]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a1ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a1f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a1f8:	4b72      	ldr	r3, [pc, #456]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a1fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a1fe:	4a71      	ldr	r2, [pc, #452]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a204:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a208:	4b6e      	ldr	r3, [pc, #440]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a20a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a20e:	4a6d      	ldr	r2, [pc, #436]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a214:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a218:	4a6a      	ldr	r2, [pc, #424]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a21e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d019      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a22e:	f7f9 fe09 	bl	8003e44 <HAL_GetTick>
 800a232:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a236:	e00d      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a238:	f7f9 fe04 	bl	8003e44 <HAL_GetTick>
 800a23c:	4602      	mov	r2, r0
 800a23e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a242:	1ad2      	subs	r2, r2, r3
 800a244:	f241 3388 	movw	r3, #5000	; 0x1388
 800a248:	429a      	cmp	r2, r3
 800a24a:	d903      	bls.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800a252:	e006      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a254:	4b5b      	ldr	r3, [pc, #364]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0ea      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800a262:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10d      	bne.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a26a:	4b56      	ldr	r3, [pc, #344]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a26c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a270:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a278:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a27c:	4a51      	ldr	r2, [pc, #324]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a27e:	430b      	orrs	r3, r1
 800a280:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a284:	e008      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a286:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a28a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800a28e:	e003      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a290:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a294:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a298:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d107      	bne.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2a0:	4b48      	ldr	r3, [pc, #288]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a2a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2a6:	4a47      	ldr	r2, [pc, #284]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a2a8:	f023 0304 	bic.w	r3, r3, #4
 800a2ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800a2b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a2bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2be:	2300      	movs	r3, #0
 800a2c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	d042      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800a2cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a2d8:	d022      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800a2da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a2de:	d81b      	bhi.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800a2e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2e4:	d011      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x832>
 800a2e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2ea:	d815      	bhi.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d019      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800a2f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2f4:	d110      	bne.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a2f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2fa:	3308      	adds	r3, #8
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 f9ab 	bl	800a658 <RCCEx_PLL2_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a308:	e00d      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a30a:	4b2e      	ldr	r3, [pc, #184]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30e:	4a2d      	ldr	r2, [pc, #180]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a314:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a316:	e006      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a31e:	e002      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800a320:	bf00      	nop
 800a322:	e000      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800a324:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a326:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10d      	bne.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800a32e:	4b25      	ldr	r3, [pc, #148]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a334:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800a338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a33c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a340:	4a20      	ldr	r2, [pc, #128]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a342:	430b      	orrs	r3, r1
 800a344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a348:	e003      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a34e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a35e:	643b      	str	r3, [r7, #64]	; 0x40
 800a360:	2300      	movs	r3, #0
 800a362:	647b      	str	r3, [r7, #68]	; 0x44
 800a364:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a368:	460b      	mov	r3, r1
 800a36a:	4313      	orrs	r3, r2
 800a36c:	d032      	beq.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a36e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a37a:	d00b      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800a37c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a380:	d804      	bhi.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800a382:	2b00      	cmp	r3, #0
 800a384:	d008      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800a386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a38a:	d007      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a392:	e004      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800a394:	bf00      	nop
 800a396:	e002      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800a398:	bf00      	nop
 800a39a:	e000      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800a39c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a39e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d112      	bne.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a3a6:	4b07      	ldr	r3, [pc, #28]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a3a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a3ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3b8:	4a02      	ldr	r2, [pc, #8]	; (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a3ba:	430b      	orrs	r3, r1
 800a3bc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a3c0:	e008      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800a3c2:	bf00      	nop
 800a3c4:	46020c00 	.word	0x46020c00
 800a3c8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a3d0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a3d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a3e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	d00c      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800a3f0:	4b98      	ldr	r3, [pc, #608]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a3f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a3f6:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800a3fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a402:	4a94      	ldr	r2, [pc, #592]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a404:	430b      	orrs	r3, r1
 800a406:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a40a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a416:	633b      	str	r3, [r7, #48]	; 0x30
 800a418:	2300      	movs	r3, #0
 800a41a:	637b      	str	r3, [r7, #52]	; 0x34
 800a41c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a420:	460b      	mov	r3, r1
 800a422:	4313      	orrs	r3, r2
 800a424:	d019      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a42a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a42e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a432:	d105      	bne.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a434:	4b87      	ldr	r3, [pc, #540]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a438:	4a86      	ldr	r2, [pc, #536]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a43a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a43e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a440:	4b84      	ldr	r3, [pc, #528]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a442:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a446:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a44a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a44e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a452:	4a80      	ldr	r2, [pc, #512]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a454:	430b      	orrs	r3, r1
 800a456:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a45a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28
 800a468:	2300      	movs	r3, #0
 800a46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a46c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a470:	460b      	mov	r3, r1
 800a472:	4313      	orrs	r3, r2
 800a474:	d00c      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a476:	4b77      	ldr	r3, [pc, #476]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a47c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a480:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a484:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a488:	4972      	ldr	r1, [pc, #456]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a48a:	4313      	orrs	r3, r2
 800a48c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a490:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a49c:	623b      	str	r3, [r7, #32]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	d00c      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a4ac:	4b69      	ldr	r3, [pc, #420]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a4ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a4b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4be:	4965      	ldr	r1, [pc, #404]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a4c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a4d2:	61bb      	str	r3, [r7, #24]
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	61fb      	str	r3, [r7, #28]
 800a4d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	d00c      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a4e2:	4b5c      	ldr	r3, [pc, #368]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a4e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a4e8:	f023 0218 	bic.w	r2, r3, #24
 800a4ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a4f4:	4957      	ldr	r1, [pc, #348]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a4fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800a508:	613b      	str	r3, [r7, #16]
 800a50a:	2300      	movs	r3, #0
 800a50c:	617b      	str	r3, [r7, #20]
 800a50e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a512:	460b      	mov	r3, r1
 800a514:	4313      	orrs	r3, r2
 800a516:	d032      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a51c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a524:	d105      	bne.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a526:	4b4b      	ldr	r3, [pc, #300]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52a:	4a4a      	ldr	r2, [pc, #296]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a52c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a530:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a536:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a53a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a53e:	d108      	bne.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a540:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a544:	3308      	adds	r3, #8
 800a546:	4618      	mov	r0, r3
 800a548:	f000 f886 	bl	800a658 <RCCEx_PLL2_Config>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800a552:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10d      	bne.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a55a:	4b3e      	ldr	r3, [pc, #248]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a55c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a564:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a568:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a56c:	4939      	ldr	r1, [pc, #228]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a574:	e003      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a576:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a57a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a57e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800a58a:	60bb      	str	r3, [r7, #8]
 800a58c:	2300      	movs	r3, #0
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a594:	460b      	mov	r3, r1
 800a596:	4313      	orrs	r3, r2
 800a598:	d03a      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a59a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a59e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5a6:	d00e      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800a5a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5ac:	d815      	bhi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d017      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a5b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5b6:	d110      	bne.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5b8:	4b26      	ldr	r3, [pc, #152]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5bc:	4a25      	ldr	r2, [pc, #148]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a5be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5c2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a5c4:	e00e      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a5c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 f843 	bl	800a658 <RCCEx_PLL2_Config>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a5d8:	e004      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a5e0:	e000      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800a5e2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a5e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10d      	bne.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a5ec:	4b19      	ldr	r3, [pc, #100]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a5ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a5f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5fe:	4915      	ldr	r1, [pc, #84]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a600:	4313      	orrs	r3, r2
 800a602:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a606:	e003      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a608:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a60c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a61c:	603b      	str	r3, [r7, #0]
 800a61e:	2300      	movs	r3, #0
 800a620:	607b      	str	r3, [r7, #4]
 800a622:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a626:	460b      	mov	r3, r1
 800a628:	4313      	orrs	r3, r2
 800a62a:	d00c      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a62c:	4b09      	ldr	r3, [pc, #36]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a62e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a632:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a63a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a63e:	4905      	ldr	r1, [pc, #20]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a640:	4313      	orrs	r3, r2
 800a642:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a646:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	37e8      	adds	r7, #232	; 0xe8
 800a64e:	46bd      	mov	sp, r7
 800a650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a654:	46020c00 	.word	0x46020c00

0800a658 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a660:	4b47      	ldr	r3, [pc, #284]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a46      	ldr	r2, [pc, #280]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a666:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a66a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a66c:	f7f9 fbea 	bl	8003e44 <HAL_GetTick>
 800a670:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a672:	e008      	b.n	800a686 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a674:	f7f9 fbe6 	bl	8003e44 <HAL_GetTick>
 800a678:	4602      	mov	r2, r0
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d901      	bls.n	800a686 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e077      	b.n	800a776 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a686:	4b3e      	ldr	r3, [pc, #248]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1f0      	bne.n	800a674 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a692:	4b3b      	ldr	r3, [pc, #236]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a696:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a69a:	f023 0303 	bic.w	r3, r3, #3
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	6811      	ldr	r1, [r2, #0]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	6852      	ldr	r2, [r2, #4]
 800a6a6:	3a01      	subs	r2, #1
 800a6a8:	0212      	lsls	r2, r2, #8
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	4934      	ldr	r1, [pc, #208]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a6b2:	4b33      	ldr	r3, [pc, #204]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a6b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6b6:	4b33      	ldr	r3, [pc, #204]	; (800a784 <RCCEx_PLL2_Config+0x12c>)
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	6892      	ldr	r2, [r2, #8]
 800a6be:	3a01      	subs	r2, #1
 800a6c0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	68d2      	ldr	r2, [r2, #12]
 800a6c8:	3a01      	subs	r2, #1
 800a6ca:	0252      	lsls	r2, r2, #9
 800a6cc:	b292      	uxth	r2, r2
 800a6ce:	4311      	orrs	r1, r2
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	6912      	ldr	r2, [r2, #16]
 800a6d4:	3a01      	subs	r2, #1
 800a6d6:	0412      	lsls	r2, r2, #16
 800a6d8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a6dc:	4311      	orrs	r1, r2
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	6952      	ldr	r2, [r2, #20]
 800a6e2:	3a01      	subs	r2, #1
 800a6e4:	0612      	lsls	r2, r2, #24
 800a6e6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	4924      	ldr	r1, [pc, #144]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a6f2:	4b23      	ldr	r3, [pc, #140]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f6:	f023 020c 	bic.w	r2, r3, #12
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	4920      	ldr	r1, [pc, #128]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a700:	4313      	orrs	r3, r2
 800a702:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a704:	4b1e      	ldr	r3, [pc, #120]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	491c      	ldr	r1, [pc, #112]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a70e:	4313      	orrs	r3, r2
 800a710:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a712:	4b1b      	ldr	r3, [pc, #108]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a716:	4a1a      	ldr	r2, [pc, #104]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a718:	f023 0310 	bic.w	r3, r3, #16
 800a71c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a71e:	4b18      	ldr	r3, [pc, #96]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a726:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	69d2      	ldr	r2, [r2, #28]
 800a72e:	00d2      	lsls	r2, r2, #3
 800a730:	4913      	ldr	r1, [pc, #76]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a732:	4313      	orrs	r3, r2
 800a734:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a736:	4b12      	ldr	r3, [pc, #72]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	4a11      	ldr	r2, [pc, #68]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a73c:	f043 0310 	orr.w	r3, r3, #16
 800a740:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a742:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a0e      	ldr	r2, [pc, #56]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a748:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a74c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a74e:	f7f9 fb79 	bl	8003e44 <HAL_GetTick>
 800a752:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a754:	e008      	b.n	800a768 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a756:	f7f9 fb75 	bl	8003e44 <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	2b02      	cmp	r3, #2
 800a762:	d901      	bls.n	800a768 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e006      	b.n	800a776 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a768:	4b05      	ldr	r3, [pc, #20]	; (800a780 <RCCEx_PLL2_Config+0x128>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d0f0      	beq.n	800a756 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a774:	2300      	movs	r3, #0

}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	46020c00 	.word	0x46020c00
 800a784:	80800000 	.word	0x80800000

0800a788 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a790:	4b47      	ldr	r3, [pc, #284]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a46      	ldr	r2, [pc, #280]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a79a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a79c:	f7f9 fb52 	bl	8003e44 <HAL_GetTick>
 800a7a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a7a2:	e008      	b.n	800a7b6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a7a4:	f7f9 fb4e 	bl	8003e44 <HAL_GetTick>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d901      	bls.n	800a7b6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e077      	b.n	800a8a6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a7b6:	4b3e      	ldr	r3, [pc, #248]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1f0      	bne.n	800a7a4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a7c2:	4b3b      	ldr	r3, [pc, #236]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a7ca:	f023 0303 	bic.w	r3, r3, #3
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	6811      	ldr	r1, [r2, #0]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	6852      	ldr	r2, [r2, #4]
 800a7d6:	3a01      	subs	r2, #1
 800a7d8:	0212      	lsls	r2, r2, #8
 800a7da:	430a      	orrs	r2, r1
 800a7dc:	4934      	ldr	r1, [pc, #208]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	630b      	str	r3, [r1, #48]	; 0x30
 800a7e2:	4b33      	ldr	r3, [pc, #204]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a7e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7e6:	4b33      	ldr	r3, [pc, #204]	; (800a8b4 <RCCEx_PLL3_Config+0x12c>)
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	6892      	ldr	r2, [r2, #8]
 800a7ee:	3a01      	subs	r2, #1
 800a7f0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	68d2      	ldr	r2, [r2, #12]
 800a7f8:	3a01      	subs	r2, #1
 800a7fa:	0252      	lsls	r2, r2, #9
 800a7fc:	b292      	uxth	r2, r2
 800a7fe:	4311      	orrs	r1, r2
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	6912      	ldr	r2, [r2, #16]
 800a804:	3a01      	subs	r2, #1
 800a806:	0412      	lsls	r2, r2, #16
 800a808:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a80c:	4311      	orrs	r1, r2
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	6952      	ldr	r2, [r2, #20]
 800a812:	3a01      	subs	r2, #1
 800a814:	0612      	lsls	r2, r2, #24
 800a816:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a81a:	430a      	orrs	r2, r1
 800a81c:	4924      	ldr	r1, [pc, #144]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a81e:	4313      	orrs	r3, r2
 800a820:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a822:	4b23      	ldr	r3, [pc, #140]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a826:	f023 020c 	bic.w	r2, r3, #12
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	4920      	ldr	r1, [pc, #128]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a830:	4313      	orrs	r3, r2
 800a832:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a834:	4b1e      	ldr	r3, [pc, #120]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	491c      	ldr	r1, [pc, #112]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a83e:	4313      	orrs	r3, r2
 800a840:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a842:	4b1b      	ldr	r3, [pc, #108]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a846:	4a1a      	ldr	r2, [pc, #104]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a848:	f023 0310 	bic.w	r3, r3, #16
 800a84c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a84e:	4b18      	ldr	r3, [pc, #96]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a856:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	69d2      	ldr	r2, [r2, #28]
 800a85e:	00d2      	lsls	r2, r2, #3
 800a860:	4913      	ldr	r1, [pc, #76]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a862:	4313      	orrs	r3, r2
 800a864:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a866:	4b12      	ldr	r3, [pc, #72]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86a:	4a11      	ldr	r2, [pc, #68]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a86c:	f043 0310 	orr.w	r3, r3, #16
 800a870:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a872:	4b0f      	ldr	r3, [pc, #60]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a0e      	ldr	r2, [pc, #56]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a87c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a87e:	f7f9 fae1 	bl	8003e44 <HAL_GetTick>
 800a882:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a884:	e008      	b.n	800a898 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a886:	f7f9 fadd 	bl	8003e44 <HAL_GetTick>
 800a88a:	4602      	mov	r2, r0
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	2b02      	cmp	r3, #2
 800a892:	d901      	bls.n	800a898 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a894:	2303      	movs	r3, #3
 800a896:	e006      	b.n	800a8a6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a898:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <RCCEx_PLL3_Config+0x128>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0f0      	beq.n	800a886 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	46020c00 	.word	0x46020c00
 800a8b4:	80800000 	.word	0x80800000

0800a8b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e049      	b.n	800a95e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d106      	bne.n	800a8e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f841 	bl	800a966 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	f000 fa88 	bl	800ae0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a96e:	bf00      	nop
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
	...

0800a97c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d001      	beq.n	800a994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e072      	b.n	800aa7a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	68da      	ldr	r2, [r3, #12]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f042 0201 	orr.w	r2, r2, #1
 800a9aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a35      	ldr	r2, [pc, #212]	; (800aa88 <HAL_TIM_Base_Start_IT+0x10c>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d040      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a34      	ldr	r2, [pc, #208]	; (800aa8c <HAL_TIM_Base_Start_IT+0x110>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d03b      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9c8:	d036      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9d2:	d031      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a2d      	ldr	r2, [pc, #180]	; (800aa90 <HAL_TIM_Base_Start_IT+0x114>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d02c      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a2c      	ldr	r2, [pc, #176]	; (800aa94 <HAL_TIM_Base_Start_IT+0x118>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d027      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a2a      	ldr	r2, [pc, #168]	; (800aa98 <HAL_TIM_Base_Start_IT+0x11c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d022      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a29      	ldr	r2, [pc, #164]	; (800aa9c <HAL_TIM_Base_Start_IT+0x120>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d01d      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a27      	ldr	r2, [pc, #156]	; (800aaa0 <HAL_TIM_Base_Start_IT+0x124>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d018      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a26      	ldr	r2, [pc, #152]	; (800aaa4 <HAL_TIM_Base_Start_IT+0x128>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d013      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a24      	ldr	r2, [pc, #144]	; (800aaa8 <HAL_TIM_Base_Start_IT+0x12c>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d00e      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a23      	ldr	r2, [pc, #140]	; (800aaac <HAL_TIM_Base_Start_IT+0x130>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d009      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a21      	ldr	r2, [pc, #132]	; (800aab0 <HAL_TIM_Base_Start_IT+0x134>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d004      	beq.n	800aa38 <HAL_TIM_Base_Start_IT+0xbc>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a20      	ldr	r2, [pc, #128]	; (800aab4 <HAL_TIM_Base_Start_IT+0x138>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d115      	bne.n	800aa64 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	689a      	ldr	r2, [r3, #8]
 800aa3e:	4b1e      	ldr	r3, [pc, #120]	; (800aab8 <HAL_TIM_Base_Start_IT+0x13c>)
 800aa40:	4013      	ands	r3, r2
 800aa42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2b06      	cmp	r3, #6
 800aa48:	d015      	beq.n	800aa76 <HAL_TIM_Base_Start_IT+0xfa>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa50:	d011      	beq.n	800aa76 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f042 0201 	orr.w	r2, r2, #1
 800aa60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa62:	e008      	b.n	800aa76 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0201 	orr.w	r2, r2, #1
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	e000      	b.n	800aa78 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3714      	adds	r7, #20
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	40012c00 	.word	0x40012c00
 800aa8c:	50012c00 	.word	0x50012c00
 800aa90:	40000400 	.word	0x40000400
 800aa94:	50000400 	.word	0x50000400
 800aa98:	40000800 	.word	0x40000800
 800aa9c:	50000800 	.word	0x50000800
 800aaa0:	40000c00 	.word	0x40000c00
 800aaa4:	50000c00 	.word	0x50000c00
 800aaa8:	40013400 	.word	0x40013400
 800aaac:	50013400 	.word	0x50013400
 800aab0:	40014000 	.word	0x40014000
 800aab4:	50014000 	.word	0x50014000
 800aab8:	00010007 	.word	0x00010007

0800aabc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	f003 0302 	and.w	r3, r3, #2
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d122      	bne.n	800ab18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d11b      	bne.n	800ab18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f06f 0202 	mvn.w	r2, #2
 800aae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	f003 0303 	and.w	r3, r3, #3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d003      	beq.n	800ab06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f965 	bl	800adce <HAL_TIM_IC_CaptureCallback>
 800ab04:	e005      	b.n	800ab12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f957 	bl	800adba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f968 	bl	800ade2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	f003 0304 	and.w	r3, r3, #4
 800ab22:	2b04      	cmp	r3, #4
 800ab24:	d122      	bne.n	800ab6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b04      	cmp	r3, #4
 800ab32:	d11b      	bne.n	800ab6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f06f 0204 	mvn.w	r2, #4
 800ab3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2202      	movs	r2, #2
 800ab42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f93b 	bl	800adce <HAL_TIM_IC_CaptureCallback>
 800ab58:	e005      	b.n	800ab66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f92d 	bl	800adba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f93e 	bl	800ade2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	f003 0308 	and.w	r3, r3, #8
 800ab76:	2b08      	cmp	r3, #8
 800ab78:	d122      	bne.n	800abc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	f003 0308 	and.w	r3, r3, #8
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d11b      	bne.n	800abc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f06f 0208 	mvn.w	r2, #8
 800ab90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2204      	movs	r2, #4
 800ab96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	f003 0303 	and.w	r3, r3, #3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f911 	bl	800adce <HAL_TIM_IC_CaptureCallback>
 800abac:	e005      	b.n	800abba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f903 	bl	800adba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f914 	bl	800ade2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	f003 0310 	and.w	r3, r3, #16
 800abca:	2b10      	cmp	r3, #16
 800abcc:	d122      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	f003 0310 	and.w	r3, r3, #16
 800abd8:	2b10      	cmp	r3, #16
 800abda:	d11b      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f06f 0210 	mvn.w	r2, #16
 800abe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2208      	movs	r2, #8
 800abea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f8e7 	bl	800adce <HAL_TIM_IC_CaptureCallback>
 800ac00:	e005      	b.n	800ac0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f8d9 	bl	800adba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f8ea 	bl	800ade2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d10e      	bne.n	800ac40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d107      	bne.n	800ac40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f06f 0201 	mvn.w	r2, #1
 800ac38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7f8 fd18 	bl	8003670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac4a:	2b80      	cmp	r3, #128	; 0x80
 800ac4c:	d10e      	bne.n	800ac6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac58:	2b80      	cmp	r3, #128	; 0x80
 800ac5a:	d107      	bne.n	800ac6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f9d4 	bl	800b014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac7a:	d10e      	bne.n	800ac9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac86:	2b80      	cmp	r3, #128	; 0x80
 800ac88:	d107      	bne.n	800ac9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f9c7 	bl	800b028 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca4:	2b40      	cmp	r3, #64	; 0x40
 800aca6:	d10e      	bne.n	800acc6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb2:	2b40      	cmp	r3, #64	; 0x40
 800acb4:	d107      	bne.n	800acc6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 f898 	bl	800adf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	f003 0320 	and.w	r3, r3, #32
 800acd0:	2b20      	cmp	r3, #32
 800acd2:	d10e      	bne.n	800acf2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	f003 0320 	and.w	r3, r3, #32
 800acde:	2b20      	cmp	r3, #32
 800ace0:	d107      	bne.n	800acf2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f06f 0220 	mvn.w	r2, #32
 800acea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f987 	bl	800b000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad00:	d10f      	bne.n	800ad22 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad10:	d107      	bne.n	800ad22 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ad1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 f98d 	bl	800b03c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad30:	d10f      	bne.n	800ad52 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad40:	d107      	bne.n	800ad52 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ad4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f97f 	bl	800b050 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad60:	d10f      	bne.n	800ad82 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad70:	d107      	bne.n	800ad82 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ad7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f971 	bl	800b064 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad90:	d10f      	bne.n	800adb2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ada0:	d107      	bne.n	800adb2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800adaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f963 	bl	800b078 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adb2:	bf00      	nop
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adc2:	bf00      	nop
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adce:	b480      	push	{r7}
 800add0:	b083      	sub	sp, #12
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800add6:	bf00      	nop
 800add8:	370c      	adds	r7, #12
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adea:	bf00      	nop
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
	...

0800ae0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a68      	ldr	r2, [pc, #416]	; (800afc0 <TIM_Base_SetConfig+0x1b4>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d02b      	beq.n	800ae7c <TIM_Base_SetConfig+0x70>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a67      	ldr	r2, [pc, #412]	; (800afc4 <TIM_Base_SetConfig+0x1b8>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d027      	beq.n	800ae7c <TIM_Base_SetConfig+0x70>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae32:	d023      	beq.n	800ae7c <TIM_Base_SetConfig+0x70>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae3a:	d01f      	beq.n	800ae7c <TIM_Base_SetConfig+0x70>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a62      	ldr	r2, [pc, #392]	; (800afc8 <TIM_Base_SetConfig+0x1bc>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d01b      	beq.n	800ae7c <TIM_Base_SetConfig+0x70>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a61      	ldr	r2, [pc, #388]	; (800afcc <TIM_Base_SetConfig+0x1c0>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d017      	beq.n	800ae7c <TIM_Base_SetConfig+0x70>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a60      	ldr	r2, [pc, #384]	; (800afd0 <TIM_Base_SetConfig+0x1c4>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d013      	beq.n	800ae7c <TIM_Base_SetConfig+0x70>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a5f      	ldr	r2, [pc, #380]	; (800afd4 <TIM_Base_SetConfig+0x1c8>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d00f      	beq.n	800ae7c <TIM_Base_SetConfig+0x70>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a5e      	ldr	r2, [pc, #376]	; (800afd8 <TIM_Base_SetConfig+0x1cc>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d00b      	beq.n	800ae7c <TIM_Base_SetConfig+0x70>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a5d      	ldr	r2, [pc, #372]	; (800afdc <TIM_Base_SetConfig+0x1d0>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d007      	beq.n	800ae7c <TIM_Base_SetConfig+0x70>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a5c      	ldr	r2, [pc, #368]	; (800afe0 <TIM_Base_SetConfig+0x1d4>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d003      	beq.n	800ae7c <TIM_Base_SetConfig+0x70>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a5b      	ldr	r2, [pc, #364]	; (800afe4 <TIM_Base_SetConfig+0x1d8>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d108      	bne.n	800ae8e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a4b      	ldr	r2, [pc, #300]	; (800afc0 <TIM_Base_SetConfig+0x1b4>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d043      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a4a      	ldr	r2, [pc, #296]	; (800afc4 <TIM_Base_SetConfig+0x1b8>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d03f      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea4:	d03b      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeac:	d037      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a45      	ldr	r2, [pc, #276]	; (800afc8 <TIM_Base_SetConfig+0x1bc>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d033      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a44      	ldr	r2, [pc, #272]	; (800afcc <TIM_Base_SetConfig+0x1c0>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d02f      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a43      	ldr	r2, [pc, #268]	; (800afd0 <TIM_Base_SetConfig+0x1c4>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d02b      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a42      	ldr	r2, [pc, #264]	; (800afd4 <TIM_Base_SetConfig+0x1c8>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d027      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a41      	ldr	r2, [pc, #260]	; (800afd8 <TIM_Base_SetConfig+0x1cc>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d023      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a40      	ldr	r2, [pc, #256]	; (800afdc <TIM_Base_SetConfig+0x1d0>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d01f      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a3f      	ldr	r2, [pc, #252]	; (800afe0 <TIM_Base_SetConfig+0x1d4>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d01b      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a3e      	ldr	r2, [pc, #248]	; (800afe4 <TIM_Base_SetConfig+0x1d8>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d017      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a3d      	ldr	r2, [pc, #244]	; (800afe8 <TIM_Base_SetConfig+0x1dc>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d013      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a3c      	ldr	r2, [pc, #240]	; (800afec <TIM_Base_SetConfig+0x1e0>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d00f      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a3b      	ldr	r2, [pc, #236]	; (800aff0 <TIM_Base_SetConfig+0x1e4>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d00b      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a3a      	ldr	r2, [pc, #232]	; (800aff4 <TIM_Base_SetConfig+0x1e8>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d007      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a39      	ldr	r2, [pc, #228]	; (800aff8 <TIM_Base_SetConfig+0x1ec>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d003      	beq.n	800af1e <TIM_Base_SetConfig+0x112>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a38      	ldr	r2, [pc, #224]	; (800affc <TIM_Base_SetConfig+0x1f0>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d108      	bne.n	800af30 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	689a      	ldr	r2, [r3, #8]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a1a      	ldr	r2, [pc, #104]	; (800afc0 <TIM_Base_SetConfig+0x1b4>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d023      	beq.n	800afa4 <TIM_Base_SetConfig+0x198>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a19      	ldr	r2, [pc, #100]	; (800afc4 <TIM_Base_SetConfig+0x1b8>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d01f      	beq.n	800afa4 <TIM_Base_SetConfig+0x198>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4a1e      	ldr	r2, [pc, #120]	; (800afe0 <TIM_Base_SetConfig+0x1d4>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d01b      	beq.n	800afa4 <TIM_Base_SetConfig+0x198>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a1d      	ldr	r2, [pc, #116]	; (800afe4 <TIM_Base_SetConfig+0x1d8>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d017      	beq.n	800afa4 <TIM_Base_SetConfig+0x198>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a1c      	ldr	r2, [pc, #112]	; (800afe8 <TIM_Base_SetConfig+0x1dc>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d013      	beq.n	800afa4 <TIM_Base_SetConfig+0x198>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a1b      	ldr	r2, [pc, #108]	; (800afec <TIM_Base_SetConfig+0x1e0>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d00f      	beq.n	800afa4 <TIM_Base_SetConfig+0x198>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a1a      	ldr	r2, [pc, #104]	; (800aff0 <TIM_Base_SetConfig+0x1e4>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d00b      	beq.n	800afa4 <TIM_Base_SetConfig+0x198>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a19      	ldr	r2, [pc, #100]	; (800aff4 <TIM_Base_SetConfig+0x1e8>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d007      	beq.n	800afa4 <TIM_Base_SetConfig+0x198>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a18      	ldr	r2, [pc, #96]	; (800aff8 <TIM_Base_SetConfig+0x1ec>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d003      	beq.n	800afa4 <TIM_Base_SetConfig+0x198>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a17      	ldr	r2, [pc, #92]	; (800affc <TIM_Base_SetConfig+0x1f0>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d103      	bne.n	800afac <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	691a      	ldr	r2, [r3, #16]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	615a      	str	r2, [r3, #20]
}
 800afb2:	bf00      	nop
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	40012c00 	.word	0x40012c00
 800afc4:	50012c00 	.word	0x50012c00
 800afc8:	40000400 	.word	0x40000400
 800afcc:	50000400 	.word	0x50000400
 800afd0:	40000800 	.word	0x40000800
 800afd4:	50000800 	.word	0x50000800
 800afd8:	40000c00 	.word	0x40000c00
 800afdc:	50000c00 	.word	0x50000c00
 800afe0:	40013400 	.word	0x40013400
 800afe4:	50013400 	.word	0x50013400
 800afe8:	40014000 	.word	0x40014000
 800afec:	50014000 	.word	0x50014000
 800aff0:	40014400 	.word	0x40014400
 800aff4:	50014400 	.word	0x50014400
 800aff8:	40014800 	.word	0x40014800
 800affc:	50014800 	.word	0x50014800

0800b000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f043 0202 	orr.w	r2, r3, #2
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	021b      	lsls	r3, r3, #8
 800b0ac:	431a      	orrs	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f023 0202 	bic.w	r2, r3, #2
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	601a      	str	r2, [r3, #0]
}
 800b0be:	bf00      	nop
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	b083      	sub	sp, #12
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	0a1b      	lsrs	r3, r3, #8
 800b0da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	f003 020f 	and.w	r2, r3, #15
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	605a      	str	r2, [r3, #4]
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
	...

0800b0fc <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f043 0202 	orr.w	r2, r3, #2
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 800b116:	e02a      	b.n	800b16e <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	021b      	lsls	r3, r3, #8
 800b11c:	f043 020c 	orr.w	r2, r3, #12
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 800b124:	f7f8 fe8e 	bl	8003e44 <HAL_GetTick>
 800b128:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800b12a:	e00c      	b.n	800b146 <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 800b12c:	f7f8 fe8a 	bl	8003e44 <HAL_GetTick>
 800b130:	4602      	mov	r2, r0
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	2bfe      	cmp	r3, #254	; 0xfe
 800b138:	d905      	bls.n	800b146 <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	db01      	blt.n	800b146 <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 800b142:	2303      	movs	r3, #3
 800b144:	e042      	b.n	800b1cc <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	daee      	bge.n	800b12c <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685a      	ldr	r2, [r3, #4]
 800b152:	4b20      	ldr	r3, [pc, #128]	; (800b1d4 <LL_DLYB_GetClockPeriod+0xd8>)
 800b154:	4013      	ands	r3, r2
 800b156:	2b00      	cmp	r3, #0
 800b158:	d006      	beq.n	800b168 <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b162:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b166:	d106      	bne.n	800b176 <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	3301      	adds	r3, #1
 800b16c:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2b7f      	cmp	r3, #127	; 0x7f
 800b172:	d9d1      	bls.n	800b118 <LL_DLYB_GetClockPeriod+0x1c>
 800b174:	e000      	b.n	800b178 <LL_DLYB_GetClockPeriod+0x7c>
        break;
 800b176:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2b80      	cmp	r3, #128	; 0x80
 800b17c:	d022      	beq.n	800b1c4 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	0c1b      	lsrs	r3, r3, #16
 800b184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b188:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 800b18a:	230a      	movs	r3, #10
 800b18c:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 800b18e:	e002      	b.n	800b196 <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	3b01      	subs	r3, #1
 800b194:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <LL_DLYB_GetClockPeriod+0xac>
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d0f3      	beq.n	800b190 <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00a      	beq.n	800b1c4 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2202      	movs	r2, #2
 800b1be:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	e003      	b.n	800b1cc <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 800b1ca:	2301      	movs	r3, #1

}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3718      	adds	r7, #24
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	07ff0000 	.word	0x07ff0000

0800b1d8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08e      	sub	sp, #56	; 0x38
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
 800b1e4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b1e6:	2234      	movs	r2, #52	; 0x34
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f001 fdee 	bl	800cdcc <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	f023 0303 	bic.w	r3, r3, #3
 800b1f6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	f1a3 0208 	sub.w	r2, r3, #8
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2202      	movs	r2, #2
 800b224:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b22a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	4413      	add	r3, r2
 800b230:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b234:	3b04      	subs	r3, #4
 800b236:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b244:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b248:	3b04      	subs	r3, #4
 800b24a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800b25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b262:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b26a:	3304      	adds	r3, #4
 800b26c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b270:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b274:	4a1f      	ldr	r2, [pc, #124]	; (800b2f4 <_tx_byte_pool_create+0x11c>)
 800b276:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b27e:	f3ef 8310 	mrs	r3, PRIMASK
 800b282:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 800b284:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b286:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b288:	b672      	cpsid	i
#endif
    return(int_posture);
 800b28a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b28c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	4a19      	ldr	r2, [pc, #100]	; (800b2f8 <_tx_byte_pool_create+0x120>)
 800b292:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b294:	4b19      	ldr	r3, [pc, #100]	; (800b2fc <_tx_byte_pool_create+0x124>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d109      	bne.n	800b2b0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b29c:	4a18      	ldr	r2, [pc, #96]	; (800b300 <_tx_byte_pool_create+0x128>)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	631a      	str	r2, [r3, #48]	; 0x30
 800b2ae:	e011      	b.n	800b2d4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b2b0:	4b13      	ldr	r3, [pc, #76]	; (800b300 <_tx_byte_pool_create+0x128>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b2b6:	6a3b      	ldr	r3, [r7, #32]
 800b2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ba:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	69fa      	ldr	r2, [r7, #28]
 800b2cc:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6a3a      	ldr	r2, [r7, #32]
 800b2d2:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b2d4:	4b09      	ldr	r3, [pc, #36]	; (800b2fc <_tx_byte_pool_create+0x124>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	4a08      	ldr	r2, [pc, #32]	; (800b2fc <_tx_byte_pool_create+0x124>)
 800b2dc:	6013      	str	r3, [r2, #0]
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	f383 8810 	msr	PRIMASK, r3
}
 800b2e8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3738      	adds	r7, #56	; 0x38
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	ffffeeee 	.word	0xffffeeee
 800b2f8:	42595445 	.word	0x42595445
 800b2fc:	20001aa0 	.word	0x20001aa0
 800b300:	20001a9c 	.word	0x20001a9c

0800b304 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800b30e:	2224      	movs	r2, #36	; 0x24
 800b310:	2100      	movs	r1, #0
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f001 fd5a 	bl	800cdcc <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b31e:	f3ef 8310 	mrs	r3, PRIMASK
 800b322:	613b      	str	r3, [r7, #16]
    return(posture);
 800b324:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800b326:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b328:	b672      	cpsid	i
    return(int_posture);
 800b32a:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800b32c:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a18      	ldr	r2, [pc, #96]	; (800b394 <_tx_event_flags_create+0x90>)
 800b332:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800b334:	4b18      	ldr	r3, [pc, #96]	; (800b398 <_tx_event_flags_create+0x94>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d109      	bne.n	800b350 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800b33c:	4a17      	ldr	r2, [pc, #92]	; (800b39c <_tx_event_flags_create+0x98>)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	61da      	str	r2, [r3, #28]
 800b34e:	e011      	b.n	800b374 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800b350:	4b12      	ldr	r3, [pc, #72]	; (800b39c <_tx_event_flags_create+0x98>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	69db      	ldr	r3, [r3, #28]
 800b35a:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800b374:	4b08      	ldr	r3, [pc, #32]	; (800b398 <_tx_event_flags_create+0x94>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	3301      	adds	r3, #1
 800b37a:	4a07      	ldr	r2, [pc, #28]	; (800b398 <_tx_event_flags_create+0x94>)
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	f383 8810 	msr	PRIMASK, r3
}
 800b388:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3720      	adds	r7, #32
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	4456444e 	.word	0x4456444e
 800b398:	20001a88 	.word	0x20001a88
 800b39c:	20001a84 	.word	0x20001a84

0800b3a0 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b0a6      	sub	sp, #152	; 0x98
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b3b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800b3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800b3b4:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3b6:	b672      	cpsid	i
    return(int_posture);
 800b3b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800b3ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f003 0302 	and.w	r3, r3, #2
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d023      	beq.n	800b410 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	695b      	ldr	r3, [r3, #20]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d005      	beq.n	800b3e0 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d101      	bne.n	800b3e0 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800b3e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d107      	bne.n	800b3f6 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6a1a      	ldr	r2, [r3, #32]
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	43db      	mvns	r3, r3
 800b3ee:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	621a      	str	r2, [r3, #32]
 800b3f4:	e005      	b.n	800b402 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	689a      	ldr	r2, [r3, #8]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	609a      	str	r2, [r3, #8]
 800b402:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b406:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b40a:	f383 8810 	msr	PRIMASK, r3
}
 800b40e:	e1d4      	b.n	800b7ba <_tx_event_flags_set+0x41a>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	689a      	ldr	r2, [r3, #8]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d006      	beq.n	800b432 <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6a1a      	ldr	r2, [r3, #32]
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	43db      	mvns	r3, r3
 800b42c:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800b432:	2300      	movs	r3, #0
 800b434:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	2b00      	cmp	r3, #0
 800b444:	f000 81a6 	beq.w	800b794 <_tx_event_flags_set+0x3f4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800b448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d169      	bne.n	800b524 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800b45e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b464:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800b466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b46a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b46e:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800b470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b472:	f003 0302 	and.w	r3, r3, #2
 800b476:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800b478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d10a      	bne.n	800b494 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800b47e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b482:	4013      	ands	r3, r2
 800b484:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800b486:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d006      	beq.n	800b49c <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800b48e:	2300      	movs	r3, #0
 800b490:	67bb      	str	r3, [r7, #120]	; 0x78
 800b492:	e003      	b.n	800b49c <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800b494:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b498:	4013      	ands	r3, r2
 800b49a:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800b49c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 817f 	beq.w	800b7a2 <_tx_event_flags_set+0x402>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b4a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ae:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 800b4b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b4b4:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800b4b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4b8:	f003 0301 	and.w	r3, r3, #1
 800b4bc:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800b4be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d106      	bne.n	800b4d2 <_tx_event_flags_set+0x132>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	689a      	ldr	r2, [r3, #8]
 800b4c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4ca:	43db      	mvns	r3, r3
 800b4cc:	401a      	ands	r2, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b4de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b4e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800b4f0:	4ba7      	ldr	r3, [pc, #668]	; (800b790 <_tx_event_flags_set+0x3f0>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	4aa6      	ldr	r2, [pc, #664]	; (800b790 <_tx_event_flags_set+0x3f0>)
 800b4f8:	6013      	str	r3, [r2, #0]
 800b4fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4fe:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b502:	f383 8810 	msr	PRIMASK, r3
}
 800b506:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800b508:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800b50c:	f000 fcd0 	bl	800beb0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b510:	f3ef 8310 	mrs	r3, PRIMASK
 800b514:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800b516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800b518:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b51a:	b672      	cpsid	i
    return(int_posture);
 800b51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800b51e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b522:	e13e      	b.n	800b7a2 <_tx_event_flags_set+0x402>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 800b52c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b530:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800b540:	2300      	movs	r3, #0
 800b542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800b54c:	4b90      	ldr	r3, [pc, #576]	; (800b790 <_tx_event_flags_set+0x3f0>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3301      	adds	r3, #1
 800b552:	4a8f      	ldr	r2, [pc, #572]	; (800b790 <_tx_event_flags_set+0x3f0>)
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b55a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55e:	f383 8810 	msr	PRIMASK, r3
}
 800b562:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b564:	f3ef 8310 	mrs	r3, PRIMASK
 800b568:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800b56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800b56c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b56e:	b672      	cpsid	i
    return(int_posture);
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800b572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00f      	beq.n	800b59e <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2200      	movs	r2, #0
 800b582:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800b584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	695b      	ldr	r3, [r3, #20]
 800b590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b59a:	4313      	orrs	r3, r2
 800b59c:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800b59e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5a4:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800b5a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5ac:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800b5ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5b6:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800b5b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5ba:	f003 0302 	and.w	r3, r3, #2
 800b5be:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800b5c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d10a      	bne.n	800b5dc <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800b5c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b5c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800b5ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b5d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d006      	beq.n	800b5e4 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5da:	e003      	b.n	800b5e4 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800b5dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b5de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800b5e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ea:	2b07      	cmp	r3, #7
 800b5ec:	d001      	beq.n	800b5f2 <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800b5f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d06b      	beq.n	800b6d0 <_tx_event_flags_set+0x330>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800b5fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b602:	2b07      	cmp	r3, #7
 800b604:	d11d      	bne.n	800b642 <_tx_event_flags_set+0x2a2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b606:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b60a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b60c:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800b60e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b610:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b612:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800b614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b616:	f003 0301 	and.w	r3, r3, #1
 800b61a:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800b61c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d106      	bne.n	800b630 <_tx_event_flags_set+0x290>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	689a      	ldr	r2, [r3, #8]
 800b626:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b628:	43db      	mvns	r3, r3
 800b62a:	401a      	ands	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b630:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b634:	2200      	movs	r2, #0
 800b636:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b638:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b63c:	2200      	movs	r2, #0
 800b63e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800b642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b648:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d103      	bne.n	800b658 <_tx_event_flags_set+0x2b8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800b650:	2300      	movs	r3, #0
 800b652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b656:	e018      	b.n	800b68a <_tx_event_flags_set+0x2ea>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800b658:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b65e:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800b660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b666:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800b668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b66a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b66c:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800b66e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b672:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800b674:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b678:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d104      	bne.n	800b68a <_tx_event_flags_set+0x2ea>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800b680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	1e5a      	subs	r2, r3, #1
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800b694:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10c      	bne.n	800b6b6 <_tx_event_flags_set+0x316>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800b69c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 800b6a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800b6ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	671a      	str	r2, [r3, #112]	; 0x70
 800b6b4:	e00c      	b.n	800b6d0 <_tx_event_flags_set+0x330>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800b6b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b6be:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800b6c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800b6c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800b6d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800b6d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800b6e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f47f af36 	bne.w	800b556 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b6f0:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6a1b      	ldr	r3, [r3, #32]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00a      	beq.n	800b710 <_tx_event_flags_set+0x370>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	689a      	ldr	r2, [r3, #8]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	43db      	mvns	r3, r3
 800b704:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	621a      	str	r2, [r3, #32]
 800b710:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b714:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b718:	f383 8810 	msr	PRIMASK, r3
}
 800b71c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800b71e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800b726:	e01f      	b.n	800b768 <_tx_event_flags_set+0x3c8>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800b728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b72c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b72e:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b730:	f3ef 8310 	mrs	r3, PRIMASK
 800b734:	623b      	str	r3, [r7, #32]
    return(posture);
 800b736:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b738:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b73a:	b672      	cpsid	i
    return(int_posture);
 800b73c:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800b73e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800b742:	4b13      	ldr	r3, [pc, #76]	; (800b790 <_tx_event_flags_set+0x3f0>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3301      	adds	r3, #1
 800b748:	4a11      	ldr	r2, [pc, #68]	; (800b790 <_tx_event_flags_set+0x3f0>)
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b750:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b754:	f383 8810 	msr	PRIMASK, r3
}
 800b758:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800b75a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800b75e:	f000 fba7 	bl	800beb0 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800b762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800b768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1db      	bne.n	800b728 <_tx_event_flags_set+0x388>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b770:	f3ef 8310 	mrs	r3, PRIMASK
 800b774:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b776:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b778:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b77a:	b672      	cpsid	i
    return(int_posture);
 800b77c:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800b77e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800b782:	4b03      	ldr	r3, [pc, #12]	; (800b790 <_tx_event_flags_set+0x3f0>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3b01      	subs	r3, #1
 800b788:	4a01      	ldr	r2, [pc, #4]	; (800b790 <_tx_event_flags_set+0x3f0>)
 800b78a:	6013      	str	r3, [r2, #0]
 800b78c:	e009      	b.n	800b7a2 <_tx_event_flags_set+0x402>
 800b78e:	bf00      	nop
 800b790:	20001b44 	.word	0x20001b44
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <_tx_event_flags_set+0x402>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	60da      	str	r2, [r3, #12]
 800b7a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b7a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	f383 8810 	msr	PRIMASK, r3
}
 800b7ae:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800b7b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d101      	bne.n	800b7ba <_tx_event_flags_set+0x41a>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800b7b6:	f000 fb41 	bl	800be3c <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3798      	adds	r7, #152	; 0x98
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b7c8:	f000 f960 	bl	800ba8c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b7cc:	f000 fe38 	bl	800c440 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b7d0:	4b12      	ldr	r3, [pc, #72]	; (800b81c <_tx_initialize_high_level+0x58>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	601a      	str	r2, [r3, #0]
 800b7d6:	4b12      	ldr	r3, [pc, #72]	; (800b820 <_tx_initialize_high_level+0x5c>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b7dc:	4b11      	ldr	r3, [pc, #68]	; (800b824 <_tx_initialize_high_level+0x60>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	601a      	str	r2, [r3, #0]
 800b7e2:	4b11      	ldr	r3, [pc, #68]	; (800b828 <_tx_initialize_high_level+0x64>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b7e8:	4b10      	ldr	r3, [pc, #64]	; (800b82c <_tx_initialize_high_level+0x68>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	4b10      	ldr	r3, [pc, #64]	; (800b830 <_tx_initialize_high_level+0x6c>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b7f4:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <_tx_initialize_high_level+0x70>)
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	4b0f      	ldr	r3, [pc, #60]	; (800b838 <_tx_initialize_high_level+0x74>)
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b800:	4b0e      	ldr	r3, [pc, #56]	; (800b83c <_tx_initialize_high_level+0x78>)
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	4b0e      	ldr	r3, [pc, #56]	; (800b840 <_tx_initialize_high_level+0x7c>)
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b80c:	4b0d      	ldr	r3, [pc, #52]	; (800b844 <_tx_initialize_high_level+0x80>)
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]
 800b812:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <_tx_initialize_high_level+0x84>)
 800b814:	2200      	movs	r2, #0
 800b816:	601a      	str	r2, [r3, #0]
#endif
}
 800b818:	bf00      	nop
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	20001a74 	.word	0x20001a74
 800b820:	20001a78 	.word	0x20001a78
 800b824:	20001a7c 	.word	0x20001a7c
 800b828:	20001a80 	.word	0x20001a80
 800b82c:	20001a84 	.word	0x20001a84
 800b830:	20001a88 	.word	0x20001a88
 800b834:	20001a94 	.word	0x20001a94
 800b838:	20001a98 	.word	0x20001a98
 800b83c:	20001a9c 	.word	0x20001a9c
 800b840:	20001aa0 	.word	0x20001aa0
 800b844:	20001a8c 	.word	0x20001a8c
 800b848:	20001a90 	.word	0x20001a90

0800b84c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b850:	4b10      	ldr	r3, [pc, #64]	; (800b894 <_tx_initialize_kernel_enter+0x48>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b858:	d00c      	beq.n	800b874 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b85a:	4b0e      	ldr	r3, [pc, #56]	; (800b894 <_tx_initialize_kernel_enter+0x48>)
 800b85c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b860:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b862:	f7f4 fd07 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b866:	f7ff ffad 	bl	800b7c4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b86a:	4b0b      	ldr	r3, [pc, #44]	; (800b898 <_tx_initialize_kernel_enter+0x4c>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3301      	adds	r3, #1
 800b870:	4a09      	ldr	r2, [pc, #36]	; (800b898 <_tx_initialize_kernel_enter+0x4c>)
 800b872:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b874:	4b07      	ldr	r3, [pc, #28]	; (800b894 <_tx_initialize_kernel_enter+0x48>)
 800b876:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b87a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b87c:	4b07      	ldr	r3, [pc, #28]	; (800b89c <_tx_initialize_kernel_enter+0x50>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4618      	mov	r0, r3
 800b882:	f7f4 fe15 	bl	80004b0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b886:	4b03      	ldr	r3, [pc, #12]	; (800b894 <_tx_initialize_kernel_enter+0x48>)
 800b888:	2200      	movs	r2, #0
 800b88a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b88c:	f7f4 fd2e 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b890:	bf00      	nop
 800b892:	bd80      	pop	{r7, pc}
 800b894:	20000028 	.word	0x20000028
 800b898:	20001b44 	.word	0x20001b44
 800b89c:	20001aa4 	.word	0x20001aa4

0800b8a0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b092      	sub	sp, #72	; 0x48
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
 800b8ac:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800b8b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8b4:	21ef      	movs	r1, #239	; 0xef
 800b8b6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b8b8:	f001 fa88 	bl	800cdcc <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800b8bc:	22b0      	movs	r2, #176	; 0xb0
 800b8be:	2100      	movs	r1, #0
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f001 fa83 	bl	800cdcc <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	683a      	ldr	r2, [r7, #0]
 800b8d6:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8dc:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8e2:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8e8:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8f6:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8fc:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2220      	movs	r2, #32
 800b902:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800b906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b908:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800b90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b90c:	3b01      	subs	r3, #1
 800b90e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b910:	4413      	add	r3, r2
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b918:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800b91a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b91c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b91e:	429a      	cmp	r2, r3
 800b920:	d007      	beq.n	800b932 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2200      	movs	r2, #0
 800b926:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b930:	e006      	b.n	800b940 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b936:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b93c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2203      	movs	r2, #3
 800b944:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	4a48      	ldr	r2, [pc, #288]	; (800ba6c <_tx_thread_create+0x1cc>)
 800b94a:	655a      	str	r2, [r3, #84]	; 0x54
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800b952:	4947      	ldr	r1, [pc, #284]	; (800ba70 <_tx_thread_create+0x1d0>)
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f7f4 fd2f 	bl	80003b8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b95a:	f3ef 8310 	mrs	r3, PRIMASK
 800b95e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800b960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800b962:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b964:	b672      	cpsid	i
    return(int_posture);
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800b968:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	4a41      	ldr	r2, [pc, #260]	; (800ba74 <_tx_thread_create+0x1d4>)
 800b96e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800b970:	4b41      	ldr	r3, [pc, #260]	; (800ba78 <_tx_thread_create+0x1d8>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10b      	bne.n	800b990 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800b978:	4a40      	ldr	r2, [pc, #256]	; (800ba7c <_tx_thread_create+0x1dc>)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800b98e:	e016      	b.n	800b9be <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800b990:	4b3a      	ldr	r3, [pc, #232]	; (800ba7c <_tx_thread_create+0x1dc>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800b996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b99c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800b99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800b9be:	4b2e      	ldr	r3, [pc, #184]	; (800ba78 <_tx_thread_create+0x1d8>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	4a2c      	ldr	r2, [pc, #176]	; (800ba78 <_tx_thread_create+0x1d8>)
 800b9c6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b9c8:	4b2d      	ldr	r3, [pc, #180]	; (800ba80 <_tx_thread_create+0x1e0>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	4a2c      	ldr	r2, [pc, #176]	; (800ba80 <_tx_thread_create+0x1e0>)
 800b9d0:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800b9d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d129      	bne.n	800ba2c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b9d8:	f3ef 8305 	mrs	r3, IPSR
 800b9dc:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800b9de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800b9e0:	4b28      	ldr	r3, [pc, #160]	; (800ba84 <_tx_thread_create+0x1e4>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b9ea:	d30d      	bcc.n	800ba08 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800b9ec:	4b26      	ldr	r3, [pc, #152]	; (800ba88 <_tx_thread_create+0x1e8>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800b9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d009      	beq.n	800ba0c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800b9f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9fc:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800b9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba04:	63da      	str	r2, [r3, #60]	; 0x3c
 800ba06:	e001      	b.n	800ba0c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	647b      	str	r3, [r7, #68]	; 0x44
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba10:	6a3b      	ldr	r3, [r7, #32]
 800ba12:	f383 8810 	msr	PRIMASK, r3
}
 800ba16:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f000 fa49 	bl	800beb0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800ba1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d01e      	beq.n	800ba62 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800ba24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba28:	63da      	str	r2, [r3, #60]	; 0x3c
 800ba2a:	e01a      	b.n	800ba62 <_tx_thread_create+0x1c2>
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	f383 8810 	msr	PRIMASK, r3
}
 800ba36:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba38:	f3ef 8310 	mrs	r3, PRIMASK
 800ba3c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ba3e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ba40:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba42:	b672      	cpsid	i
    return(int_posture);
 800ba44:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800ba46:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800ba48:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <_tx_thread_create+0x1e0>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	4a0c      	ldr	r2, [pc, #48]	; (800ba80 <_tx_thread_create+0x1e0>)
 800ba50:	6013      	str	r3, [r2, #0]
 800ba52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba54:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	f383 8810 	msr	PRIMASK, r3
}
 800ba5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ba5e:	f000 f9ed 	bl	800be3c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3748      	adds	r7, #72	; 0x48
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	0800c385 	.word	0x0800c385
 800ba70:	0800bbc5 	.word	0x0800bbc5
 800ba74:	54485244 	.word	0x54485244
 800ba78:	20001ab8 	.word	0x20001ab8
 800ba7c:	20001ab4 	.word	0x20001ab4
 800ba80:	20001b44 	.word	0x20001b44
 800ba84:	20000028 	.word	0x20000028
 800ba88:	20001ab0 	.word	0x20001ab0

0800ba8c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800ba90:	4b12      	ldr	r3, [pc, #72]	; (800badc <_tx_thread_initialize+0x50>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800ba96:	4b12      	ldr	r3, [pc, #72]	; (800bae0 <_tx_thread_initialize+0x54>)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	601a      	str	r2, [r3, #0]
 800ba9c:	4b11      	ldr	r3, [pc, #68]	; (800bae4 <_tx_thread_initialize+0x58>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800baa2:	4b11      	ldr	r3, [pc, #68]	; (800bae8 <_tx_thread_initialize+0x5c>)
 800baa4:	2220      	movs	r2, #32
 800baa6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800baa8:	2280      	movs	r2, #128	; 0x80
 800baaa:	2100      	movs	r1, #0
 800baac:	480f      	ldr	r0, [pc, #60]	; (800baec <_tx_thread_initialize+0x60>)
 800baae:	f001 f98d 	bl	800cdcc <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800bab2:	4b0f      	ldr	r3, [pc, #60]	; (800baf0 <_tx_thread_initialize+0x64>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800bab8:	4b0e      	ldr	r3, [pc, #56]	; (800baf4 <_tx_thread_initialize+0x68>)
 800baba:	2200      	movs	r2, #0
 800babc:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800babe:	4b0e      	ldr	r3, [pc, #56]	; (800baf8 <_tx_thread_initialize+0x6c>)
 800bac0:	2200      	movs	r2, #0
 800bac2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800bac4:	4b0d      	ldr	r3, [pc, #52]	; (800bafc <_tx_thread_initialize+0x70>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800baca:	4b0d      	ldr	r3, [pc, #52]	; (800bb00 <_tx_thread_initialize+0x74>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800bad2:	4a0b      	ldr	r2, [pc, #44]	; (800bb00 <_tx_thread_initialize+0x74>)
 800bad4:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800bad6:	bf00      	nop
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	20001aac 	.word	0x20001aac
 800bae0:	20001ab0 	.word	0x20001ab0
 800bae4:	20001abc 	.word	0x20001abc
 800bae8:	20001ac0 	.word	0x20001ac0
 800baec:	20001ac4 	.word	0x20001ac4
 800baf0:	20001ab4 	.word	0x20001ab4
 800baf4:	20001ab8 	.word	0x20001ab8
 800baf8:	20001b44 	.word	0x20001b44
 800bafc:	20001b48 	.word	0x20001b48
 800bb00:	20001b4c 	.word	0x20001b4c

0800bb04 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08c      	sub	sp, #48	; 0x30
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb10:	f3ef 8310 	mrs	r3, PRIMASK
 800bb14:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bb16:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bb18:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb1a:	b672      	cpsid	i
    return(int_posture);
 800bb1c:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800bb1e:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	d12f      	bne.n	800bb88 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bb28:	f3ef 8305 	mrs	r3, IPSR
 800bb2c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bb2e:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800bb30:	4b21      	ldr	r3, [pc, #132]	; (800bbb8 <_tx_thread_resume+0xb4>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bb3a:	d30d      	bcc.n	800bb58 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800bb3c:	4b1f      	ldr	r3, [pc, #124]	; (800bbbc <_tx_thread_resume+0xb8>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800bb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d009      	beq.n	800bb5c <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb4c:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb54:	63da      	str	r2, [r3, #60]	; 0x3c
 800bb56:	e001      	b.n	800bb5c <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800bb5c:	4b18      	ldr	r3, [pc, #96]	; (800bbc0 <_tx_thread_resume+0xbc>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3301      	adds	r3, #1
 800bb62:	4a17      	ldr	r2, [pc, #92]	; (800bbc0 <_tx_thread_resume+0xbc>)
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	6a3b      	ldr	r3, [r7, #32]
 800bb68:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f383 8810 	msr	PRIMASK, r3
}
 800bb70:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f99c 	bl	800beb0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800bb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d002      	beq.n	800bb84 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800bb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb82:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 800bb84:	2300      	movs	r3, #0
 800bb86:	e012      	b.n	800bbae <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d105      	bne.n	800bb9c <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 800bb96:	2319      	movs	r3, #25
 800bb98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb9a:	e001      	b.n	800bba0 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 800bb9c:	2312      	movs	r3, #18
 800bb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f383 8810 	msr	PRIMASK, r3
}
 800bbaa:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 800bbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3730      	adds	r7, #48	; 0x30
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20000028 	.word	0x20000028
 800bbbc:	20001ab0 	.word	0x20001ab0
 800bbc0:	20001b44 	.word	0x20001b44

0800bbc4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b088      	sub	sp, #32
 800bbc8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bbca:	4b21      	ldr	r3, [pc, #132]	; (800bc50 <_tx_thread_shell_entry+0x8c>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbd4:	69fa      	ldr	r2, [r7, #28]
 800bbd6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bbd8:	4610      	mov	r0, r2
 800bbda:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800bbdc:	4b1d      	ldr	r3, [pc, #116]	; (800bc54 <_tx_thread_shell_entry+0x90>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d003      	beq.n	800bbec <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800bbe4:	4b1b      	ldr	r3, [pc, #108]	; (800bc54 <_tx_thread_shell_entry+0x90>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	69f8      	ldr	r0, [r7, #28]
 800bbea:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbec:	f3ef 8310 	mrs	r3, PRIMASK
 800bbf0:	607b      	str	r3, [r7, #4]
    return(posture);
 800bbf2:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800bbf4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbf6:	b672      	cpsid	i
    return(int_posture);
 800bbf8:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800bbfa:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	2201      	movs	r2, #1
 800bc06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bc0e:	4b12      	ldr	r3, [pc, #72]	; (800bc58 <_tx_thread_shell_entry+0x94>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3301      	adds	r3, #1
 800bc14:	4a10      	ldr	r2, [pc, #64]	; (800bc58 <_tx_thread_shell_entry+0x94>)
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	f383 8810 	msr	PRIMASK, r3
}
 800bc22:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800bc24:	f3ef 8314 	mrs	r3, CONTROL
 800bc28:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800bc2a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800bc2c:	617b      	str	r3, [r7, #20]
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f023 0304 	bic.w	r3, r3, #4
 800bc34:	617b      	str	r3, [r7, #20]
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	f383 8814 	msr	CONTROL, r3
}
 800bc40:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800bc42:	69f8      	ldr	r0, [r7, #28]
 800bc44:	f000 fa34 	bl	800c0b0 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800bc48:	bf00      	nop
 800bc4a:	3720      	adds	r7, #32
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	20001aac 	.word	0x20001aac
 800bc54:	20001b48 	.word	0x20001b48
 800bc58:	20001b44 	.word	0x20001b44

0800bc5c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b08e      	sub	sp, #56	; 0x38
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc64:	f3ef 8310 	mrs	r3, PRIMASK
 800bc68:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800bc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800bc6c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc6e:	b672      	cpsid	i
    return(int_posture);
 800bc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800bc72:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bc74:	4b35      	ldr	r3, [pc, #212]	; (800bd4c <_tx_thread_sleep+0xf0>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800bc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d108      	bne.n	800bc92 <_tx_thread_sleep+0x36>
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	f383 8810 	msr	PRIMASK, r3
}
 800bc8a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800bc8c:	2313      	movs	r3, #19
 800bc8e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc90:	e056      	b.n	800bd40 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc92:	f3ef 8305 	mrs	r3, IPSR
 800bc96:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800bc98:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bc9a:	4b2d      	ldr	r3, [pc, #180]	; (800bd50 <_tx_thread_sleep+0xf4>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d008      	beq.n	800bcb6 <_tx_thread_sleep+0x5a>
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	f383 8810 	msr	PRIMASK, r3
}
 800bcae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800bcb0:	2313      	movs	r3, #19
 800bcb2:	637b      	str	r3, [r7, #52]	; 0x34
 800bcb4:	e044      	b.n	800bd40 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800bcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb8:	4a26      	ldr	r2, [pc, #152]	; (800bd54 <_tx_thread_sleep+0xf8>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d108      	bne.n	800bcd0 <_tx_thread_sleep+0x74>
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f383 8810 	msr	PRIMASK, r3
}
 800bcc8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800bcca:	2313      	movs	r3, #19
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
 800bcce:	e037      	b.n	800bd40 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d108      	bne.n	800bce8 <_tx_thread_sleep+0x8c>
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f383 8810 	msr	PRIMASK, r3
}
 800bce0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800bce2:	2300      	movs	r3, #0
 800bce4:	637b      	str	r3, [r7, #52]	; 0x34
 800bce6:	e02b      	b.n	800bd40 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bce8:	4b1b      	ldr	r3, [pc, #108]	; (800bd58 <_tx_thread_sleep+0xfc>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d008      	beq.n	800bd02 <_tx_thread_sleep+0xa6>
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f383 8810 	msr	PRIMASK, r3
}
 800bcfa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800bcfc:	2313      	movs	r3, #19
 800bcfe:	637b      	str	r3, [r7, #52]	; 0x34
 800bd00:	e01e      	b.n	800bd40 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800bd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd04:	2204      	movs	r2, #4
 800bd06:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd10:	2200      	movs	r2, #0
 800bd12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800bd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bd1c:	4b0e      	ldr	r3, [pc, #56]	; (800bd58 <_tx_thread_sleep+0xfc>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	3301      	adds	r3, #1
 800bd22:	4a0d      	ldr	r2, [pc, #52]	; (800bd58 <_tx_thread_sleep+0xfc>)
 800bd24:	6013      	str	r3, [r2, #0]
 800bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd28:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	f383 8810 	msr	PRIMASK, r3
}
 800bd30:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bd32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd34:	f000 f9bc 	bl	800c0b0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800bd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd3e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800bd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3738      	adds	r7, #56	; 0x38
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20001aac 	.word	0x20001aac
 800bd50:	20000028 	.word	0x20000028
 800bd54:	20001bf4 	.word	0x20001bf4
 800bd58:	20001b44 	.word	0x20001b44

0800bd5c <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08a      	sub	sp, #40	; 0x28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd64:	f3ef 8310 	mrs	r3, PRIMASK
 800bd68:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bd6a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bd6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd6e:	b672      	cpsid	i
    return(int_posture);
 800bd70:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800bd72:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800bd74:	4b2e      	ldr	r3, [pc, #184]	; (800be30 <_tx_thread_suspend+0xd4>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d130      	bne.n	800bde4 <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 800bd82:	2300      	movs	r3, #0
 800bd84:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd86:	f3ef 8305 	mrs	r3, IPSR
 800bd8a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800bd8c:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 800bd8e:	4b29      	ldr	r3, [pc, #164]	; (800be34 <_tx_thread_suspend+0xd8>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d109      	bne.n	800bdac <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 800bd98:	69fa      	ldr	r2, [r7, #28]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d105      	bne.n	800bdac <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 800bda0:	4b25      	ldr	r3, [pc, #148]	; (800be38 <_tx_thread_suspend+0xdc>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d001      	beq.n	800bdac <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 800bda8:	2314      	movs	r3, #20
 800bdaa:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 800bdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d132      	bne.n	800be18 <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2203      	movs	r2, #3
 800bdb6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bdc4:	4b1c      	ldr	r3, [pc, #112]	; (800be38 <_tx_thread_suspend+0xdc>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	4a1b      	ldr	r2, [pc, #108]	; (800be38 <_tx_thread_suspend+0xdc>)
 800bdcc:	6013      	str	r3, [r2, #0]
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f383 8810 	msr	PRIMASK, r3
}
 800bdd8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f968 	bl	800c0b0 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 800bde0:	2300      	movs	r3, #0
 800bde2:	e020      	b.n	800be26 <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d102      	bne.n	800bdf2 <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 800bdec:	2314      	movs	r3, #20
 800bdee:	627b      	str	r3, [r7, #36]	; 0x24
 800bdf0:	e012      	b.n	800be18 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d102      	bne.n	800be00 <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 800bdfa:	2314      	movs	r3, #20
 800bdfc:	627b      	str	r3, [r7, #36]	; 0x24
 800bdfe:	e00b      	b.n	800be18 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be04:	2b03      	cmp	r3, #3
 800be06:	d102      	bne.n	800be0e <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 800be08:	2300      	movs	r3, #0
 800be0a:	627b      	str	r3, [r7, #36]	; 0x24
 800be0c:	e004      	b.n	800be18 <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2201      	movs	r2, #1
 800be12:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800be14:	2300      	movs	r3, #0
 800be16:	627b      	str	r3, [r7, #36]	; 0x24
 800be18:	6a3b      	ldr	r3, [r7, #32]
 800be1a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	f383 8810 	msr	PRIMASK, r3
}
 800be22:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 800be24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 800be26:	4618      	mov	r0, r3
 800be28:	3728      	adds	r7, #40	; 0x28
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	20001aac 	.word	0x20001aac
 800be34:	20000028 	.word	0x20000028
 800be38:	20001b44 	.word	0x20001b44

0800be3c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b089      	sub	sp, #36	; 0x24
 800be40:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800be42:	4b17      	ldr	r3, [pc, #92]	; (800bea0 <_tx_thread_system_preempt_check+0x64>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d121      	bne.n	800be92 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800be4e:	4b15      	ldr	r3, [pc, #84]	; (800bea4 <_tx_thread_system_preempt_check+0x68>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800be54:	4b14      	ldr	r3, [pc, #80]	; (800bea8 <_tx_thread_system_preempt_check+0x6c>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800be5a:	69ba      	ldr	r2, [r7, #24]
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d017      	beq.n	800be92 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800be62:	4b12      	ldr	r3, [pc, #72]	; (800beac <_tx_thread_system_preempt_check+0x70>)
 800be64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be68:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be6a:	f3ef 8305 	mrs	r3, IPSR
 800be6e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800be70:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800be72:	2b00      	cmp	r3, #0
 800be74:	d10c      	bne.n	800be90 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be76:	f3ef 8310 	mrs	r3, PRIMASK
 800be7a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800be7c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800be7e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800be80:	b662      	cpsie	i
}
 800be82:	bf00      	nop
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f383 8810 	msr	PRIMASK, r3
}
 800be8e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800be90:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800be92:	bf00      	nop
 800be94:	3724      	adds	r7, #36	; 0x24
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	20001b44 	.word	0x20001b44
 800bea4:	20001aac 	.word	0x20001aac
 800bea8:	20001ab0 	.word	0x20001ab0
 800beac:	e000ed04 	.word	0xe000ed04

0800beb0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b096      	sub	sp, #88	; 0x58
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800beb8:	f3ef 8310 	mrs	r3, PRIMASK
 800bebc:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800bebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800bec0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800bec2:	b672      	cpsid	i
    return(int_posture);
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800bec6:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800becc:	2b00      	cmp	r3, #0
 800bece:	d005      	beq.n	800bedc <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	334c      	adds	r3, #76	; 0x4c
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 fb91 	bl	800c5fc <_tx_timer_system_deactivate>
 800beda:	e002      	b.n	800bee2 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800bee2:	4b6c      	ldr	r3, [pc, #432]	; (800c094 <_tx_thread_system_resume+0x1e4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3b01      	subs	r3, #1
 800bee8:	4a6a      	ldr	r2, [pc, #424]	; (800c094 <_tx_thread_system_resume+0x1e4>)
 800beea:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f040 8083 	bne.w	800bffc <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 8097 	beq.w	800c02e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d172      	bne.n	800bfee <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf12:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800bf14:	4a60      	ldr	r2, [pc, #384]	; (800c098 <_tx_thread_system_resume+0x1e8>)
 800bf16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf1c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800bf1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d154      	bne.n	800bfce <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800bf24:	495c      	ldr	r1, [pc, #368]	; (800c098 <_tx_thread_system_resume+0x1e8>)
 800bf26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf3e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf42:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800bf44:	4b55      	ldr	r3, [pc, #340]	; (800c09c <_tx_thread_system_resume+0x1ec>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	4a53      	ldr	r2, [pc, #332]	; (800c09c <_tx_thread_system_resume+0x1ec>)
 800bf4e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800bf50:	4b53      	ldr	r3, [pc, #332]	; (800c0a0 <_tx_thread_system_resume+0x1f0>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d269      	bcs.n	800c02e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800bf5a:	4a51      	ldr	r2, [pc, #324]	; (800c0a0 <_tx_thread_system_resume+0x1f0>)
 800bf5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf5e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800bf60:	4b50      	ldr	r3, [pc, #320]	; (800c0a4 <_tx_thread_system_resume+0x1f4>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800bf66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d103      	bne.n	800bf74 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800bf6c:	4a4d      	ldr	r2, [pc, #308]	; (800c0a4 <_tx_thread_system_resume+0x1f4>)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6013      	str	r3, [r2, #0]
 800bf72:	e05c      	b.n	800c02e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800bf74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d257      	bcs.n	800c02e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800bf7e:	4a49      	ldr	r2, [pc, #292]	; (800c0a4 <_tx_thread_system_resume+0x1f4>)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6013      	str	r3, [r2, #0]
 800bf84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf86:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8a:	f383 8810 	msr	PRIMASK, r3
}
 800bf8e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bf90:	4b40      	ldr	r3, [pc, #256]	; (800c094 <_tx_thread_system_resume+0x1e4>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800bf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d174      	bne.n	800c086 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bf9c:	4b42      	ldr	r3, [pc, #264]	; (800c0a8 <_tx_thread_system_resume+0x1f8>)
 800bf9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bfa4:	f3ef 8305 	mrs	r3, IPSR
 800bfa8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10c      	bne.n	800bfca <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfb0:	f3ef 8310 	mrs	r3, PRIMASK
 800bfb4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800bfb8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bfba:	b662      	cpsie	i
}
 800bfbc:	bf00      	nop
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	f383 8810 	msr	PRIMASK, r3
}
 800bfc8:	bf00      	nop
}
 800bfca:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800bfcc:	e05b      	b.n	800c086 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800bfce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd2:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800bfd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800bfda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfe4:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bfea:	621a      	str	r2, [r3, #32]
 800bfec:	e01f      	b.n	800c02e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2203      	movs	r2, #3
 800bff8:	631a      	str	r2, [r3, #48]	; 0x30
 800bffa:	e018      	b.n	800c02e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c000:	2b01      	cmp	r3, #1
 800c002:	d014      	beq.n	800c02e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c008:	2b02      	cmp	r3, #2
 800c00a:	d010      	beq.n	800c02e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c010:	2b00      	cmp	r3, #0
 800c012:	d106      	bne.n	800c022 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	631a      	str	r2, [r3, #48]	; 0x30
 800c020:	e005      	b.n	800c02e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2203      	movs	r2, #3
 800c02c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c02e:	4b1f      	ldr	r3, [pc, #124]	; (800c0ac <_tx_thread_system_resume+0x1fc>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	63bb      	str	r3, [r7, #56]	; 0x38
 800c034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c036:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	f383 8810 	msr	PRIMASK, r3
}
 800c03e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c040:	4b18      	ldr	r3, [pc, #96]	; (800c0a4 <_tx_thread_system_resume+0x1f4>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c046:	429a      	cmp	r2, r3
 800c048:	d020      	beq.n	800c08c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c04a:	4b12      	ldr	r3, [pc, #72]	; (800c094 <_tx_thread_system_resume+0x1e4>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800c050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c052:	2b00      	cmp	r3, #0
 800c054:	d11a      	bne.n	800c08c <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c056:	4b14      	ldr	r3, [pc, #80]	; (800c0a8 <_tx_thread_system_resume+0x1f8>)
 800c058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c05c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c05e:	f3ef 8305 	mrs	r3, IPSR
 800c062:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c064:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10f      	bne.n	800c08a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c06a:	f3ef 8310 	mrs	r3, PRIMASK
 800c06e:	613b      	str	r3, [r7, #16]
    return(posture);
 800c070:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800c072:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c074:	b662      	cpsie	i
}
 800c076:	bf00      	nop
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	f383 8810 	msr	PRIMASK, r3
}
 800c082:	bf00      	nop
}
 800c084:	e001      	b.n	800c08a <_tx_thread_system_resume+0x1da>
                                return;
 800c086:	bf00      	nop
 800c088:	e000      	b.n	800c08c <_tx_thread_system_resume+0x1dc>
 800c08a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800c08c:	3758      	adds	r7, #88	; 0x58
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	20001b44 	.word	0x20001b44
 800c098:	20001ac4 	.word	0x20001ac4
 800c09c:	20001abc 	.word	0x20001abc
 800c0a0:	20001ac0 	.word	0x20001ac0
 800c0a4:	20001ab0 	.word	0x20001ab0
 800c0a8:	e000ed04 	.word	0xe000ed04
 800c0ac:	20001aac 	.word	0x20001aac

0800c0b0 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b09e      	sub	sp, #120	; 0x78
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c0b8:	4b81      	ldr	r3, [pc, #516]	; (800c2c0 <_tx_thread_system_suspend+0x210>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c0be:	f3ef 8310 	mrs	r3, PRIMASK
 800c0c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800c0c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800c0c6:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800c0c8:	b672      	cpsid	i
    return(int_posture);
 800c0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c0cc:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d112      	bne.n	800c0fc <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0da:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800c0dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d008      	beq.n	800c0f4 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800c0e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e8:	d004      	beq.n	800c0f4 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	334c      	adds	r3, #76	; 0x4c
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 fa22 	bl	800c538 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	69db      	ldr	r3, [r3, #28]
 800c0f8:	4a72      	ldr	r2, [pc, #456]	; (800c2c4 <_tx_thread_system_suspend+0x214>)
 800c0fa:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c0fc:	4b72      	ldr	r3, [pc, #456]	; (800c2c8 <_tx_thread_system_suspend+0x218>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3b01      	subs	r3, #1
 800c102:	4a71      	ldr	r2, [pc, #452]	; (800c2c8 <_tx_thread_system_suspend+0x218>)
 800c104:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	f040 80a6 	bne.w	800c25c <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a1b      	ldr	r3, [r3, #32]
 800c120:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800c122:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	429a      	cmp	r2, r3
 800c128:	d015      	beq.n	800c156 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800c130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c132:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c134:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800c136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c138:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c13a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800c13c:	4a63      	ldr	r2, [pc, #396]	; (800c2cc <_tx_thread_system_suspend+0x21c>)
 800c13e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	429a      	cmp	r2, r3
 800c148:	d157      	bne.n	800c1fa <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800c14a:	4960      	ldr	r1, [pc, #384]	; (800c2cc <_tx_thread_system_suspend+0x21c>)
 800c14c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c14e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c154:	e051      	b.n	800c1fa <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800c156:	4a5d      	ldr	r2, [pc, #372]	; (800c2cc <_tx_thread_system_suspend+0x21c>)
 800c158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c15a:	2100      	movs	r1, #0
 800c15c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800c160:	2201      	movs	r2, #1
 800c162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c164:	fa02 f303 	lsl.w	r3, r2, r3
 800c168:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800c16a:	4b59      	ldr	r3, [pc, #356]	; (800c2d0 <_tx_thread_system_suspend+0x220>)
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c170:	43db      	mvns	r3, r3
 800c172:	4013      	ands	r3, r2
 800c174:	4a56      	ldr	r2, [pc, #344]	; (800c2d0 <_tx_thread_system_suspend+0x220>)
 800c176:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800c178:	2300      	movs	r3, #0
 800c17a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800c17c:	4b54      	ldr	r3, [pc, #336]	; (800c2d0 <_tx_thread_system_suspend+0x220>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800c182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c184:	2b00      	cmp	r3, #0
 800c186:	d12b      	bne.n	800c1e0 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c188:	4b52      	ldr	r3, [pc, #328]	; (800c2d4 <_tx_thread_system_suspend+0x224>)
 800c18a:	2220      	movs	r2, #32
 800c18c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800c18e:	4b52      	ldr	r3, [pc, #328]	; (800c2d8 <_tx_thread_system_suspend+0x228>)
 800c190:	2200      	movs	r2, #0
 800c192:	601a      	str	r2, [r3, #0]
 800c194:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c196:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c19a:	f383 8810 	msr	PRIMASK, r3
}
 800c19e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c1a0:	4b49      	ldr	r3, [pc, #292]	; (800c2c8 <_tx_thread_system_suspend+0x218>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800c1a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f040 8081 	bne.w	800c2b0 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c1ae:	4b4b      	ldr	r3, [pc, #300]	; (800c2dc <_tx_thread_system_suspend+0x22c>)
 800c1b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1b4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1b6:	f3ef 8305 	mrs	r3, IPSR
 800c1ba:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800c1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10c      	bne.n	800c1dc <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1c2:	f3ef 8310 	mrs	r3, PRIMASK
 800c1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800c1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800c1ca:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c1cc:	b662      	cpsie	i
}
 800c1ce:	bf00      	nop
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d6:	f383 8810 	msr	PRIMASK, r3
}
 800c1da:	bf00      	nop
}
 800c1dc:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800c1de:	e067      	b.n	800c2b0 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800c1e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1e2:	fa93 f3a3 	rbit	r3, r3
 800c1e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1ea:	fab3 f383 	clz	r3, r3
 800c1ee:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800c1f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1f4:	4413      	add	r3, r2
 800c1f6:	4a37      	ldr	r2, [pc, #220]	; (800c2d4 <_tx_thread_system_suspend+0x224>)
 800c1f8:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800c1fa:	4b37      	ldr	r3, [pc, #220]	; (800c2d8 <_tx_thread_system_suspend+0x228>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	429a      	cmp	r2, r3
 800c202:	d12b      	bne.n	800c25c <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c204:	4b33      	ldr	r3, [pc, #204]	; (800c2d4 <_tx_thread_system_suspend+0x224>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a30      	ldr	r2, [pc, #192]	; (800c2cc <_tx_thread_system_suspend+0x21c>)
 800c20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c20e:	4a32      	ldr	r2, [pc, #200]	; (800c2d8 <_tx_thread_system_suspend+0x228>)
 800c210:	6013      	str	r3, [r2, #0]
 800c212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c214:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	f383 8810 	msr	PRIMASK, r3
}
 800c21c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c21e:	4b2a      	ldr	r3, [pc, #168]	; (800c2c8 <_tx_thread_system_suspend+0x218>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800c224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c226:	2b00      	cmp	r3, #0
 800c228:	d144      	bne.n	800c2b4 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c22a:	4b2c      	ldr	r3, [pc, #176]	; (800c2dc <_tx_thread_system_suspend+0x22c>)
 800c22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c230:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c232:	f3ef 8305 	mrs	r3, IPSR
 800c236:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d10c      	bne.n	800c258 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c23e:	f3ef 8310 	mrs	r3, PRIMASK
 800c242:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800c246:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c248:	b662      	cpsie	i
}
 800c24a:	bf00      	nop
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	f383 8810 	msr	PRIMASK, r3
}
 800c256:	bf00      	nop
}
 800c258:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800c25a:	e02b      	b.n	800c2b4 <_tx_thread_system_suspend+0x204>
 800c25c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c25e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	f383 8810 	msr	PRIMASK, r3
}
 800c266:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c268:	4b1b      	ldr	r3, [pc, #108]	; (800c2d8 <_tx_thread_system_suspend+0x228>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c26e:	429a      	cmp	r2, r3
 800c270:	d022      	beq.n	800c2b8 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c272:	4b15      	ldr	r3, [pc, #84]	; (800c2c8 <_tx_thread_system_suspend+0x218>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800c278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d11c      	bne.n	800c2b8 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c27e:	4b17      	ldr	r3, [pc, #92]	; (800c2dc <_tx_thread_system_suspend+0x22c>)
 800c280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c284:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c286:	f3ef 8305 	mrs	r3, IPSR
 800c28a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c28c:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10c      	bne.n	800c2ac <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c292:	f3ef 8310 	mrs	r3, PRIMASK
 800c296:	617b      	str	r3, [r7, #20]
    return(posture);
 800c298:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800c29a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c29c:	b662      	cpsie	i
}
 800c29e:	bf00      	nop
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f383 8810 	msr	PRIMASK, r3
}
 800c2aa:	bf00      	nop
}
 800c2ac:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800c2ae:	e003      	b.n	800c2b8 <_tx_thread_system_suspend+0x208>
                return;
 800c2b0:	bf00      	nop
 800c2b2:	e002      	b.n	800c2ba <_tx_thread_system_suspend+0x20a>
            return;
 800c2b4:	bf00      	nop
 800c2b6:	e000      	b.n	800c2ba <_tx_thread_system_suspend+0x20a>
    return;
 800c2b8:	bf00      	nop
}
 800c2ba:	3778      	adds	r7, #120	; 0x78
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	20001aac 	.word	0x20001aac
 800c2c4:	200020b0 	.word	0x200020b0
 800c2c8:	20001b44 	.word	0x20001b44
 800c2cc:	20001ac4 	.word	0x20001ac4
 800c2d0:	20001abc 	.word	0x20001abc
 800c2d4:	20001ac0 	.word	0x20001ac0
 800c2d8:	20001ab0 	.word	0x20001ab0
 800c2dc:	e000ed04 	.word	0xe000ed04

0800c2e0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b087      	sub	sp, #28
 800c2e4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c2e6:	4b21      	ldr	r3, [pc, #132]	; (800c36c <_tx_thread_time_slice+0x8c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2ec:	f3ef 8310 	mrs	r3, PRIMASK
 800c2f0:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800c2f4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2f6:	b672      	cpsid	i
    return(int_posture);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800c2fa:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c2fc:	4b1c      	ldr	r3, [pc, #112]	; (800c370 <_tx_thread_time_slice+0x90>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d024      	beq.n	800c352 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d120      	bne.n	800c352 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	69da      	ldr	r2, [r3, #28]
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	4a15      	ldr	r2, [pc, #84]	; (800c374 <_tx_thread_time_slice+0x94>)
 800c31e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	6a1b      	ldr	r3, [r3, #32]
 800c324:	697a      	ldr	r2, [r7, #20]
 800c326:	429a      	cmp	r2, r3
 800c328:	d013      	beq.n	800c352 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c332:	429a      	cmp	r2, r3
 800c334:	d10d      	bne.n	800c352 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33a:	697a      	ldr	r2, [r7, #20]
 800c33c:	6a12      	ldr	r2, [r2, #32]
 800c33e:	490e      	ldr	r1, [pc, #56]	; (800c378 <_tx_thread_time_slice+0x98>)
 800c340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c344:	4b0d      	ldr	r3, [pc, #52]	; (800c37c <_tx_thread_time_slice+0x9c>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a0b      	ldr	r2, [pc, #44]	; (800c378 <_tx_thread_time_slice+0x98>)
 800c34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c34e:	4a0c      	ldr	r2, [pc, #48]	; (800c380 <_tx_thread_time_slice+0xa0>)
 800c350:	6013      	str	r3, [r2, #0]
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f383 8810 	msr	PRIMASK, r3
}
 800c35c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800c35e:	bf00      	nop
 800c360:	371c      	adds	r7, #28
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	20001aac 	.word	0x20001aac
 800c370:	20001b54 	.word	0x20001b54
 800c374:	200020b0 	.word	0x200020b0
 800c378:	20001ac4 	.word	0x20001ac4
 800c37c:	20001ac0 	.word	0x20001ac0
 800c380:	20001ab0 	.word	0x20001ab0

0800c384 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b08a      	sub	sp, #40	; 0x28
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c390:	f3ef 8310 	mrs	r3, PRIMASK
 800c394:	617b      	str	r3, [r7, #20]
    return(posture);
 800c396:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c398:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c39a:	b672      	cpsid	i
    return(int_posture);
 800c39c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800c39e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a4:	2b04      	cmp	r3, #4
 800c3a6:	d10e      	bne.n	800c3c6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800c3a8:	4b13      	ldr	r3, [pc, #76]	; (800c3f8 <_tx_thread_timeout+0x74>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	4a12      	ldr	r2, [pc, #72]	; (800c3f8 <_tx_thread_timeout+0x74>)
 800c3b0:	6013      	str	r3, [r2, #0]
 800c3b2:	6a3b      	ldr	r3, [r7, #32]
 800c3b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f383 8810 	msr	PRIMASK, r3
}
 800c3bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c3be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3c0:	f7ff fd76 	bl	800beb0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c3c4:	e013      	b.n	800c3ee <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800c3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3ca:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800c3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c3d2:	61bb      	str	r3, [r7, #24]
 800c3d4:	6a3b      	ldr	r3, [r7, #32]
 800c3d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	f383 8810 	msr	PRIMASK, r3
}
 800c3de:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	69b9      	ldr	r1, [r7, #24]
 800c3ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3ec:	4798      	blx	r3
}
 800c3ee:	bf00      	nop
 800c3f0:	3728      	adds	r7, #40	; 0x28
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	20001b44 	.word	0x20001b44

0800c3fc <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c402:	f3ef 8310 	mrs	r3, PRIMASK
 800c406:	607b      	str	r3, [r7, #4]
    return(posture);
 800c408:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800c40a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c40c:	b672      	cpsid	i
    return(int_posture);
 800c40e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800c410:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800c412:	4b09      	ldr	r3, [pc, #36]	; (800c438 <_tx_timer_expiration_process+0x3c>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3301      	adds	r3, #1
 800c418:	4a07      	ldr	r2, [pc, #28]	; (800c438 <_tx_timer_expiration_process+0x3c>)
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	f383 8810 	msr	PRIMASK, r3
}
 800c426:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800c428:	4804      	ldr	r0, [pc, #16]	; (800c43c <_tx_timer_expiration_process+0x40>)
 800c42a:	f7ff fd41 	bl	800beb0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c42e:	bf00      	nop
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	20001b44 	.word	0x20001b44
 800c43c:	20001bf4 	.word	0x20001bf4

0800c440 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800c440:	b590      	push	{r4, r7, lr}
 800c442:	b089      	sub	sp, #36	; 0x24
 800c444:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800c446:	4b28      	ldr	r3, [pc, #160]	; (800c4e8 <_tx_timer_initialize+0xa8>)
 800c448:	2200      	movs	r2, #0
 800c44a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800c44c:	4b27      	ldr	r3, [pc, #156]	; (800c4ec <_tx_timer_initialize+0xac>)
 800c44e:	2200      	movs	r2, #0
 800c450:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c452:	4b27      	ldr	r3, [pc, #156]	; (800c4f0 <_tx_timer_initialize+0xb0>)
 800c454:	2200      	movs	r2, #0
 800c456:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800c458:	4b26      	ldr	r3, [pc, #152]	; (800c4f4 <_tx_timer_initialize+0xb4>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800c45e:	4b26      	ldr	r3, [pc, #152]	; (800c4f8 <_tx_timer_initialize+0xb8>)
 800c460:	2200      	movs	r2, #0
 800c462:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800c464:	2280      	movs	r2, #128	; 0x80
 800c466:	2100      	movs	r1, #0
 800c468:	4824      	ldr	r0, [pc, #144]	; (800c4fc <_tx_timer_initialize+0xbc>)
 800c46a:	f000 fcaf 	bl	800cdcc <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800c46e:	4b24      	ldr	r3, [pc, #144]	; (800c500 <_tx_timer_initialize+0xc0>)
 800c470:	4a22      	ldr	r2, [pc, #136]	; (800c4fc <_tx_timer_initialize+0xbc>)
 800c472:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800c474:	4b23      	ldr	r3, [pc, #140]	; (800c504 <_tx_timer_initialize+0xc4>)
 800c476:	4a21      	ldr	r2, [pc, #132]	; (800c4fc <_tx_timer_initialize+0xbc>)
 800c478:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800c47a:	4b23      	ldr	r3, [pc, #140]	; (800c508 <_tx_timer_initialize+0xc8>)
 800c47c:	4a23      	ldr	r2, [pc, #140]	; (800c50c <_tx_timer_initialize+0xcc>)
 800c47e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800c480:	4b21      	ldr	r3, [pc, #132]	; (800c508 <_tx_timer_initialize+0xc8>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	3304      	adds	r3, #4
 800c486:	4a20      	ldr	r2, [pc, #128]	; (800c508 <_tx_timer_initialize+0xc8>)
 800c488:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800c48a:	4b21      	ldr	r3, [pc, #132]	; (800c510 <_tx_timer_initialize+0xd0>)
 800c48c:	4a21      	ldr	r2, [pc, #132]	; (800c514 <_tx_timer_initialize+0xd4>)
 800c48e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800c490:	4b21      	ldr	r3, [pc, #132]	; (800c518 <_tx_timer_initialize+0xd8>)
 800c492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c496:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800c498:	4b20      	ldr	r3, [pc, #128]	; (800c51c <_tx_timer_initialize+0xdc>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800c49e:	4b1c      	ldr	r3, [pc, #112]	; (800c510 <_tx_timer_initialize+0xd0>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a1d      	ldr	r2, [pc, #116]	; (800c518 <_tx_timer_initialize+0xd8>)
 800c4a4:	6812      	ldr	r2, [r2, #0]
 800c4a6:	491d      	ldr	r1, [pc, #116]	; (800c51c <_tx_timer_initialize+0xdc>)
 800c4a8:	6809      	ldr	r1, [r1, #0]
 800c4aa:	481c      	ldr	r0, [pc, #112]	; (800c51c <_tx_timer_initialize+0xdc>)
 800c4ac:	6800      	ldr	r0, [r0, #0]
 800c4ae:	2400      	movs	r4, #0
 800c4b0:	9405      	str	r4, [sp, #20]
 800c4b2:	2400      	movs	r4, #0
 800c4b4:	9404      	str	r4, [sp, #16]
 800c4b6:	9003      	str	r0, [sp, #12]
 800c4b8:	9102      	str	r1, [sp, #8]
 800c4ba:	9201      	str	r2, [sp, #4]
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	4b18      	ldr	r3, [pc, #96]	; (800c520 <_tx_timer_initialize+0xe0>)
 800c4c0:	4a18      	ldr	r2, [pc, #96]	; (800c524 <_tx_timer_initialize+0xe4>)
 800c4c2:	4919      	ldr	r1, [pc, #100]	; (800c528 <_tx_timer_initialize+0xe8>)
 800c4c4:	4819      	ldr	r0, [pc, #100]	; (800c52c <_tx_timer_initialize+0xec>)
 800c4c6:	f7ff f9eb 	bl	800b8a0 <_tx_thread_create>
 800c4ca:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1e5      	bne.n	800c49e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800c4d2:	4b17      	ldr	r3, [pc, #92]	; (800c530 <_tx_timer_initialize+0xf0>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800c4d8:	4b16      	ldr	r3, [pc, #88]	; (800c534 <_tx_timer_initialize+0xf4>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800c4de:	bf00      	nop
 800c4e0:	370c      	adds	r7, #12
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd90      	pop	{r4, r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	20001b50 	.word	0x20001b50
 800c4ec:	200020b0 	.word	0x200020b0
 800c4f0:	20001b54 	.word	0x20001b54
 800c4f4:	20001be4 	.word	0x20001be4
 800c4f8:	20001bf0 	.word	0x20001bf0
 800c4fc:	20001b58 	.word	0x20001b58
 800c500:	20001bd8 	.word	0x20001bd8
 800c504:	20001be0 	.word	0x20001be0
 800c508:	20001bdc 	.word	0x20001bdc
 800c50c:	20001bd4 	.word	0x20001bd4
 800c510:	20001ca4 	.word	0x20001ca4
 800c514:	20001cb0 	.word	0x20001cb0
 800c518:	20001ca8 	.word	0x20001ca8
 800c51c:	20001cac 	.word	0x20001cac
 800c520:	4154494d 	.word	0x4154494d
 800c524:	0800c66d 	.word	0x0800c66d
 800c528:	0800ce50 	.word	0x0800ce50
 800c52c:	20001bf4 	.word	0x20001bf4
 800c530:	20001be8 	.word	0x20001be8
 800c534:	20001bec 	.word	0x20001bec

0800c538 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c538:	b480      	push	{r7}
 800c53a:	b089      	sub	sp, #36	; 0x24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d04a      	beq.n	800c5e2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c552:	d046      	beq.n	800c5e2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d142      	bne.n	800c5e2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	2b20      	cmp	r3, #32
 800c560:	d902      	bls.n	800c568 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800c562:	231f      	movs	r3, #31
 800c564:	61bb      	str	r3, [r7, #24]
 800c566:	e002      	b.n	800c56e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800c56e:	4b20      	ldr	r3, [pc, #128]	; (800c5f0 <_tx_timer_system_activate+0xb8>)
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4413      	add	r3, r2
 800c578:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800c57a:	4b1e      	ldr	r3, [pc, #120]	; (800c5f4 <_tx_timer_system_activate+0xbc>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	69fa      	ldr	r2, [r7, #28]
 800c580:	429a      	cmp	r2, r3
 800c582:	d30b      	bcc.n	800c59c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800c584:	4b1b      	ldr	r3, [pc, #108]	; (800c5f4 <_tx_timer_system_activate+0xbc>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	69fa      	ldr	r2, [r7, #28]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	109b      	asrs	r3, r3, #2
 800c58e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800c590:	4b19      	ldr	r3, [pc, #100]	; (800c5f8 <_tx_timer_system_activate+0xc0>)
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4413      	add	r3, r2
 800c59a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d109      	bne.n	800c5b8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	e011      	b.n	800c5dc <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	695b      	ldr	r3, [r3, #20]
 800c5c2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68ba      	ldr	r2, [r7, #8]
 800c5da:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	69fa      	ldr	r2, [r7, #28]
 800c5e0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800c5e2:	bf00      	nop
 800c5e4:	3724      	adds	r7, #36	; 0x24
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	20001be0 	.word	0x20001be0
 800c5f4:	20001bdc 	.word	0x20001bdc
 800c5f8:	20001bd8 	.word	0x20001bd8

0800c5fc <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b087      	sub	sp, #28
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	699b      	ldr	r3, [r3, #24]
 800c608:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d026      	beq.n	800c65e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d108      	bne.n	800c630 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	429a      	cmp	r2, r3
 800c626:	d117      	bne.n	800c658 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]
 800c62e:	e013      	b.n	800c658 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d105      	bne.n	800c658 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	693a      	ldr	r2, [r7, #16]
 800c656:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	619a      	str	r2, [r3, #24]
    }
}
 800c65e:	bf00      	nop
 800c660:	371c      	adds	r7, #28
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
	...

0800c66c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b098      	sub	sp, #96	; 0x60
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800c674:	2300      	movs	r3, #0
 800c676:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a73      	ldr	r2, [pc, #460]	; (800c848 <_tx_timer_thread_entry+0x1dc>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	f040 80de 	bne.w	800c83e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c682:	f3ef 8310 	mrs	r3, PRIMASK
 800c686:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800c688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800c68a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c68c:	b672      	cpsid	i
    return(int_posture);
 800c68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800c690:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800c692:	4b6e      	ldr	r3, [pc, #440]	; (800c84c <_tx_timer_thread_entry+0x1e0>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d003      	beq.n	800c6a8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f107 020c 	add.w	r2, r7, #12
 800c6a6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800c6a8:	4b68      	ldr	r3, [pc, #416]	; (800c84c <_tx_timer_thread_entry+0x1e0>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800c6b0:	4b66      	ldr	r3, [pc, #408]	; (800c84c <_tx_timer_thread_entry+0x1e0>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	4a65      	ldr	r2, [pc, #404]	; (800c84c <_tx_timer_thread_entry+0x1e0>)
 800c6b8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800c6ba:	4b64      	ldr	r3, [pc, #400]	; (800c84c <_tx_timer_thread_entry+0x1e0>)
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	4b64      	ldr	r3, [pc, #400]	; (800c850 <_tx_timer_thread_entry+0x1e4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d103      	bne.n	800c6ce <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800c6c6:	4b63      	ldr	r3, [pc, #396]	; (800c854 <_tx_timer_thread_entry+0x1e8>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a60      	ldr	r2, [pc, #384]	; (800c84c <_tx_timer_thread_entry+0x1e0>)
 800c6cc:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800c6ce:	4b62      	ldr	r3, [pc, #392]	; (800c858 <_tx_timer_thread_entry+0x1ec>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6d6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6da:	f383 8810 	msr	PRIMASK, r3
}
 800c6de:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800c6e4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800c6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800c6e8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800c6ea:	b672      	cpsid	i
    return(int_posture);
 800c6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c6ee:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800c6f0:	e07f      	b.n	800c7f2 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800c700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c704:	429a      	cmp	r2, r3
 800c706:	d102      	bne.n	800c70e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800c708:	2300      	movs	r3, #0
 800c70a:	60fb      	str	r3, [r7, #12]
 800c70c:	e00e      	b.n	800c72c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800c70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c710:	695b      	ldr	r3, [r3, #20]
 800c712:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c718:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c71a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c71c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c71e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800c720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c722:	f107 020c 	add.w	r2, r7, #12
 800c726:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800c728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c72a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c72c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b20      	cmp	r3, #32
 800c732:	d911      	bls.n	800c758 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800c734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800c73c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c73e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800c740:	2300      	movs	r3, #0
 800c742:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c746:	f107 0208 	add.w	r2, r7, #8
 800c74a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800c74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c74e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c750:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800c752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c754:	60bb      	str	r3, [r7, #8]
 800c756:	e01a      	b.n	800c78e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800c758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800c75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800c764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c76a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800c76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d009      	beq.n	800c788 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c776:	f107 0208 	add.w	r2, r7, #8
 800c77a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800c77c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c77e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c780:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800c782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c784:	60bb      	str	r3, [r7, #8]
 800c786:	e002      	b.n	800c78e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800c788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c78a:	2200      	movs	r2, #0
 800c78c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800c78e:	4a33      	ldr	r2, [pc, #204]	; (800c85c <_tx_timer_thread_entry+0x1f0>)
 800c790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c792:	6013      	str	r3, [r2, #0]
 800c794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c796:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	f383 8810 	msr	PRIMASK, r3
}
 800c79e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800c7a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800c7a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c7a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c7aa:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c7ac:	f3ef 8310 	mrs	r3, PRIMASK
 800c7b0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c7b4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c7b6:	b672      	cpsid	i
    return(int_posture);
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c7ba:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800c7bc:	4b27      	ldr	r3, [pc, #156]	; (800c85c <_tx_timer_thread_entry+0x1f0>)
 800c7be:	2200      	movs	r2, #0
 800c7c0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d105      	bne.n	800c7d6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800c7ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800c7d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c7d2:	f7ff feb1 	bl	800c538 <_tx_timer_system_activate>
 800c7d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7d8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	f383 8810 	msr	PRIMASK, r3
}
 800c7e0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c7e2:	f3ef 8310 	mrs	r3, PRIMASK
 800c7e6:	623b      	str	r3, [r7, #32]
    return(posture);
 800c7e8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c7ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c7ec:	b672      	cpsid	i
    return(int_posture);
 800c7ee:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c7f0:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f47f af7c 	bne.w	800c6f2 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800c7fa:	4b17      	ldr	r3, [pc, #92]	; (800c858 <_tx_timer_thread_entry+0x1ec>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d116      	bne.n	800c830 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800c802:	4b17      	ldr	r3, [pc, #92]	; (800c860 <_tx_timer_thread_entry+0x1f4>)
 800c804:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c808:	2203      	movs	r2, #3
 800c80a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c80c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c80e:	2201      	movs	r2, #1
 800c810:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800c812:	4b14      	ldr	r3, [pc, #80]	; (800c864 <_tx_timer_thread_entry+0x1f8>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3301      	adds	r3, #1
 800c818:	4a12      	ldr	r2, [pc, #72]	; (800c864 <_tx_timer_thread_entry+0x1f8>)
 800c81a:	6013      	str	r3, [r2, #0]
 800c81c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c81e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	f383 8810 	msr	PRIMASK, r3
}
 800c826:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800c828:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c82a:	f7ff fc41 	bl	800c0b0 <_tx_thread_system_suspend>
 800c82e:	e728      	b.n	800c682 <_tx_timer_thread_entry+0x16>
 800c830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c832:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	f383 8810 	msr	PRIMASK, r3
}
 800c83a:	bf00      	nop
            TX_DISABLE
 800c83c:	e721      	b.n	800c682 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800c83e:	bf00      	nop
 800c840:	3760      	adds	r7, #96	; 0x60
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	4154494d 	.word	0x4154494d
 800c84c:	20001be0 	.word	0x20001be0
 800c850:	20001bdc 	.word	0x20001bdc
 800c854:	20001bd8 	.word	0x20001bd8
 800c858:	20001be4 	.word	0x20001be4
 800c85c:	20001bf0 	.word	0x20001bf0
 800c860:	20001bf4 	.word	0x20001bf4
 800c864:	20001b44 	.word	0x20001b44

0800c868 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b092      	sub	sp, #72	; 0x48
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c876:	2300      	movs	r3, #0
 800c878:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d102      	bne.n	800c886 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c880:	2302      	movs	r3, #2
 800c882:	647b      	str	r3, [r7, #68]	; 0x44
 800c884:	e075      	b.n	800c972 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800c886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c888:	2b34      	cmp	r3, #52	; 0x34
 800c88a:	d002      	beq.n	800c892 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c88c:	2302      	movs	r3, #2
 800c88e:	647b      	str	r3, [r7, #68]	; 0x44
 800c890:	e06f      	b.n	800c972 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c892:	f3ef 8310 	mrs	r3, PRIMASK
 800c896:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c89a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c89c:	b672      	cpsid	i
    return(int_posture);
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c8a0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c8a2:	4b3b      	ldr	r3, [pc, #236]	; (800c990 <_txe_byte_pool_create+0x128>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	4a39      	ldr	r2, [pc, #228]	; (800c990 <_txe_byte_pool_create+0x128>)
 800c8aa:	6013      	str	r3, [r2, #0]
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ae:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b2:	f383 8810 	msr	PRIMASK, r3
}
 800c8b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800c8b8:	4b36      	ldr	r3, [pc, #216]	; (800c994 <_txe_byte_pool_create+0x12c>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c8be:	2300      	movs	r3, #0
 800c8c0:	643b      	str	r3, [r7, #64]	; 0x40
 800c8c2:	e009      	b.n	800c8d8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d00b      	beq.n	800c8e4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800c8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	643b      	str	r3, [r7, #64]	; 0x40
 800c8d8:	4b2f      	ldr	r3, [pc, #188]	; (800c998 <_txe_byte_pool_create+0x130>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d3f0      	bcc.n	800c8c4 <_txe_byte_pool_create+0x5c>
 800c8e2:	e000      	b.n	800c8e6 <_txe_byte_pool_create+0x7e>
                break;
 800c8e4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c8ea:	623b      	str	r3, [r7, #32]
    return(posture);
 800c8ec:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c8ee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8f0:	b672      	cpsid	i
    return(int_posture);
 800c8f2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c8f4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c8f6:	4b26      	ldr	r3, [pc, #152]	; (800c990 <_txe_byte_pool_create+0x128>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	4a24      	ldr	r2, [pc, #144]	; (800c990 <_txe_byte_pool_create+0x128>)
 800c8fe:	6013      	str	r3, [r2, #0]
 800c900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c902:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	f383 8810 	msr	PRIMASK, r3
}
 800c90a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c90c:	f7ff fa96 	bl	800be3c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c914:	429a      	cmp	r2, r3
 800c916:	d102      	bne.n	800c91e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800c918:	2302      	movs	r3, #2
 800c91a:	647b      	str	r3, [r7, #68]	; 0x44
 800c91c:	e029      	b.n	800c972 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d102      	bne.n	800c92a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800c924:	2303      	movs	r3, #3
 800c926:	647b      	str	r3, [r7, #68]	; 0x44
 800c928:	e023      	b.n	800c972 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	2b63      	cmp	r3, #99	; 0x63
 800c92e:	d802      	bhi.n	800c936 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800c930:	2305      	movs	r3, #5
 800c932:	647b      	str	r3, [r7, #68]	; 0x44
 800c934:	e01d      	b.n	800c972 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c936:	4b19      	ldr	r3, [pc, #100]	; (800c99c <_txe_byte_pool_create+0x134>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c93e:	4a18      	ldr	r2, [pc, #96]	; (800c9a0 <_txe_byte_pool_create+0x138>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d101      	bne.n	800c948 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c944:	2313      	movs	r3, #19
 800c946:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c948:	f3ef 8305 	mrs	r3, IPSR
 800c94c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c94e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c950:	4b14      	ldr	r3, [pc, #80]	; (800c9a4 <_txe_byte_pool_create+0x13c>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4313      	orrs	r3, r2
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00b      	beq.n	800c972 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c95a:	f3ef 8305 	mrs	r3, IPSR
 800c95e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c960:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c962:	4b10      	ldr	r3, [pc, #64]	; (800c9a4 <_txe_byte_pool_create+0x13c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4313      	orrs	r3, r2
 800c968:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c96c:	d201      	bcs.n	800c972 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c96e:	2313      	movs	r3, #19
 800c970:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c974:	2b00      	cmp	r3, #0
 800c976:	d106      	bne.n	800c986 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	68b9      	ldr	r1, [r7, #8]
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f7fe fc2a 	bl	800b1d8 <_tx_byte_pool_create>
 800c984:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3748      	adds	r7, #72	; 0x48
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	20001b44 	.word	0x20001b44
 800c994:	20001a9c 	.word	0x20001a9c
 800c998:	20001aa0 	.word	0x20001aa0
 800c99c:	20001aac 	.word	0x20001aac
 800c9a0:	20001bf4 	.word	0x20001bf4
 800c9a4:	20000028 	.word	0x20000028

0800c9a8 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b092      	sub	sp, #72	; 0x48
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d102      	bne.n	800c9c4 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c9be:	2306      	movs	r3, #6
 800c9c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c9c2:	e069      	b.n	800ca98 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b24      	cmp	r3, #36	; 0x24
 800c9c8:	d002      	beq.n	800c9d0 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c9ca:	2306      	movs	r3, #6
 800c9cc:	647b      	str	r3, [r7, #68]	; 0x44
 800c9ce:	e063      	b.n	800ca98 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9d0:	f3ef 8310 	mrs	r3, PRIMASK
 800c9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c9d8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9da:	b672      	cpsid	i
    return(int_posture);
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c9de:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c9e0:	4b34      	ldr	r3, [pc, #208]	; (800cab4 <_txe_event_flags_create+0x10c>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	4a33      	ldr	r2, [pc, #204]	; (800cab4 <_txe_event_flags_create+0x10c>)
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ec:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f0:	f383 8810 	msr	PRIMASK, r3
}
 800c9f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 800c9f6:	4b30      	ldr	r3, [pc, #192]	; (800cab8 <_txe_event_flags_create+0x110>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	643b      	str	r3, [r7, #64]	; 0x40
 800ca00:	e009      	b.n	800ca16 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d00b      	beq.n	800ca22 <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 800ca0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0c:	699b      	ldr	r3, [r3, #24]
 800ca0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800ca10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca12:	3301      	adds	r3, #1
 800ca14:	643b      	str	r3, [r7, #64]	; 0x40
 800ca16:	4b29      	ldr	r3, [pc, #164]	; (800cabc <_txe_event_flags_create+0x114>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d3f0      	bcc.n	800ca02 <_txe_event_flags_create+0x5a>
 800ca20:	e000      	b.n	800ca24 <_txe_event_flags_create+0x7c>
                break;
 800ca22:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca24:	f3ef 8310 	mrs	r3, PRIMASK
 800ca28:	623b      	str	r3, [r7, #32]
    return(posture);
 800ca2a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ca2c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca2e:	b672      	cpsid	i
    return(int_posture);
 800ca30:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800ca32:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800ca34:	4b1f      	ldr	r3, [pc, #124]	; (800cab4 <_txe_event_flags_create+0x10c>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	4a1e      	ldr	r2, [pc, #120]	; (800cab4 <_txe_event_flags_create+0x10c>)
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca40:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca44:	f383 8810 	msr	PRIMASK, r3
}
 800ca48:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ca4a:	f7ff f9f7 	bl	800be3c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d102      	bne.n	800ca5c <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 800ca56:	2306      	movs	r3, #6
 800ca58:	647b      	str	r3, [r7, #68]	; 0x44
 800ca5a:	e01d      	b.n	800ca98 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ca5c:	4b18      	ldr	r3, [pc, #96]	; (800cac0 <_txe_event_flags_create+0x118>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800ca62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca64:	4a17      	ldr	r2, [pc, #92]	; (800cac4 <_txe_event_flags_create+0x11c>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d101      	bne.n	800ca6e <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ca6a:	2313      	movs	r3, #19
 800ca6c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ca6e:	f3ef 8305 	mrs	r3, IPSR
 800ca72:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ca74:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ca76:	4b14      	ldr	r3, [pc, #80]	; (800cac8 <_txe_event_flags_create+0x120>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00b      	beq.n	800ca98 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ca80:	f3ef 8305 	mrs	r3, IPSR
 800ca84:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ca86:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ca88:	4b0f      	ldr	r3, [pc, #60]	; (800cac8 <_txe_event_flags_create+0x120>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ca92:	d201      	bcs.n	800ca98 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800ca94:	2313      	movs	r3, #19
 800ca96:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ca98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d104      	bne.n	800caa8 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800ca9e:	68b9      	ldr	r1, [r7, #8]
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f7fe fc2f 	bl	800b304 <_tx_event_flags_create>
 800caa6:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800caa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3748      	adds	r7, #72	; 0x48
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20001b44 	.word	0x20001b44
 800cab8:	20001a84 	.word	0x20001a84
 800cabc:	20001a88 	.word	0x20001a88
 800cac0:	20001aac 	.word	0x20001aac
 800cac4:	20001bf4 	.word	0x20001bf4
 800cac8:	20000028 	.word	0x20000028

0800cacc <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cad8:	2300      	movs	r3, #0
 800cada:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d102      	bne.n	800cae8 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800cae2:	2306      	movs	r3, #6
 800cae4:	617b      	str	r3, [r7, #20]
 800cae6:	e00f      	b.n	800cb08 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a0d      	ldr	r2, [pc, #52]	; (800cb24 <_txe_event_flags_set+0x58>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d002      	beq.n	800caf8 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800caf2:	2306      	movs	r3, #6
 800caf4:	617b      	str	r3, [r7, #20]
 800caf6:	e007      	b.n	800cb08 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d004      	beq.n	800cb08 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d001      	beq.n	800cb08 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 800cb04:	2308      	movs	r3, #8
 800cb06:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d105      	bne.n	800cb1a <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	68b9      	ldr	r1, [r7, #8]
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f7fe fc44 	bl	800b3a0 <_tx_event_flags_set>
 800cb18:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800cb1a:	697b      	ldr	r3, [r7, #20]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3718      	adds	r7, #24
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	4456444e 	.word	0x4456444e

0800cb28 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b09a      	sub	sp, #104	; 0x68
 800cb2c:	af06      	add	r7, sp, #24
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
 800cb34:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cb36:	2300      	movs	r3, #0
 800cb38:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d102      	bne.n	800cb46 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800cb40:	230e      	movs	r3, #14
 800cb42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb44:	e0bb      	b.n	800ccbe <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800cb46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb48:	2bb0      	cmp	r3, #176	; 0xb0
 800cb4a:	d002      	beq.n	800cb52 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800cb4c:	230e      	movs	r3, #14
 800cb4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb50:	e0b5      	b.n	800ccbe <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb52:	f3ef 8310 	mrs	r3, PRIMASK
 800cb56:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800cb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800cb5a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb5c:	b672      	cpsid	i
    return(int_posture);
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cb60:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cb62:	4b64      	ldr	r3, [pc, #400]	; (800ccf4 <_txe_thread_create+0x1cc>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	3301      	adds	r3, #1
 800cb68:	4a62      	ldr	r2, [pc, #392]	; (800ccf4 <_txe_thread_create+0x1cc>)
 800cb6a:	6013      	str	r3, [r2, #0]
 800cb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	f383 8810 	msr	PRIMASK, r3
}
 800cb76:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800cb7c:	4b5e      	ldr	r3, [pc, #376]	; (800ccf8 <_txe_thread_create+0x1d0>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cb82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb84:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800cb86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb8c:	4413      	add	r3, r2
 800cb8e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800cb94:	2300      	movs	r3, #0
 800cb96:	647b      	str	r3, [r7, #68]	; 0x44
 800cb98:	e02b      	b.n	800cbf2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d101      	bne.n	800cba6 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800cba2:	2301      	movs	r3, #1
 800cba4:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800cba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d028      	beq.n	800cbfe <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800cbac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d308      	bcc.n	800cbc8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800cbb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d203      	bcs.n	800cbc8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800cbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d308      	bcc.n	800cbe4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800cbd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d203      	bcs.n	800cbe4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800cbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbea:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800cbec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbee:	3301      	adds	r3, #1
 800cbf0:	647b      	str	r3, [r7, #68]	; 0x44
 800cbf2:	4b42      	ldr	r3, [pc, #264]	; (800ccfc <_txe_thread_create+0x1d4>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d3ce      	bcc.n	800cb9a <_txe_thread_create+0x72>
 800cbfc:	e000      	b.n	800cc00 <_txe_thread_create+0xd8>
                break;
 800cbfe:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc00:	f3ef 8310 	mrs	r3, PRIMASK
 800cc04:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cc06:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cc08:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc0a:	b672      	cpsid	i
    return(int_posture);
 800cc0c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cc0e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cc10:	4b38      	ldr	r3, [pc, #224]	; (800ccf4 <_txe_thread_create+0x1cc>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3b01      	subs	r3, #1
 800cc16:	4a37      	ldr	r2, [pc, #220]	; (800ccf4 <_txe_thread_create+0x1cc>)
 800cc18:	6013      	str	r3, [r2, #0]
 800cc1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc1c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc1e:	6a3b      	ldr	r3, [r7, #32]
 800cc20:	f383 8810 	msr	PRIMASK, r3
}
 800cc24:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cc26:	f7ff f909 	bl	800be3c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d102      	bne.n	800cc38 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800cc32:	230e      	movs	r3, #14
 800cc34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc36:	e042      	b.n	800ccbe <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800cc38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d102      	bne.n	800cc44 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc42:	e03c      	b.n	800ccbe <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d102      	bne.n	800cc50 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc4e:	e036      	b.n	800ccbe <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800cc50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc52:	2bc7      	cmp	r3, #199	; 0xc7
 800cc54:	d802      	bhi.n	800cc5c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800cc56:	2305      	movs	r3, #5
 800cc58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc5a:	e030      	b.n	800ccbe <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800cc5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc5e:	2b1f      	cmp	r3, #31
 800cc60:	d902      	bls.n	800cc68 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800cc62:	230f      	movs	r3, #15
 800cc64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc66:	e02a      	b.n	800ccbe <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800cc68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d902      	bls.n	800cc76 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800cc70:	2318      	movs	r3, #24
 800cc72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc74:	e023      	b.n	800ccbe <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800cc76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d902      	bls.n	800cc82 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800cc7c:	2310      	movs	r3, #16
 800cc7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc80:	e01d      	b.n	800ccbe <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800cc82:	4b1f      	ldr	r3, [pc, #124]	; (800cd00 <_txe_thread_create+0x1d8>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800cc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8a:	4a1e      	ldr	r2, [pc, #120]	; (800cd04 <_txe_thread_create+0x1dc>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d101      	bne.n	800cc94 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cc90:	2313      	movs	r3, #19
 800cc92:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc94:	f3ef 8305 	mrs	r3, IPSR
 800cc98:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cc9a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cc9c:	4b1a      	ldr	r3, [pc, #104]	; (800cd08 <_txe_thread_create+0x1e0>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4313      	orrs	r3, r2
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00b      	beq.n	800ccbe <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cca6:	f3ef 8305 	mrs	r3, IPSR
 800ccaa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ccac:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ccae:	4b16      	ldr	r3, [pc, #88]	; (800cd08 <_txe_thread_create+0x1e0>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ccb8:	d201      	bcs.n	800ccbe <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800ccba:	2313      	movs	r3, #19
 800ccbc:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ccbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d112      	bne.n	800ccea <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800ccc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccc6:	9305      	str	r3, [sp, #20]
 800ccc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccca:	9304      	str	r3, [sp, #16]
 800cccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccce:	9303      	str	r3, [sp, #12]
 800ccd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccd2:	9302      	str	r3, [sp, #8]
 800ccd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccd6:	9301      	str	r3, [sp, #4]
 800ccd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	68b9      	ldr	r1, [r7, #8]
 800cce2:	68f8      	ldr	r0, [r7, #12]
 800cce4:	f7fe fddc 	bl	800b8a0 <_tx_thread_create>
 800cce8:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800ccea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3750      	adds	r7, #80	; 0x50
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	20001b44 	.word	0x20001b44
 800ccf8:	20001ab4 	.word	0x20001ab4
 800ccfc:	20001ab8 	.word	0x20001ab8
 800cd00:	20001aac 	.word	0x20001aac
 800cd04:	20001bf4 	.word	0x20001bf4
 800cd08:	20000028 	.word	0x20000028

0800cd0c <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d102      	bne.n	800cd20 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800cd1a:	230e      	movs	r3, #14
 800cd1c:	60fb      	str	r3, [r7, #12]
 800cd1e:	e00b      	b.n	800cd38 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a07      	ldr	r2, [pc, #28]	; (800cd44 <_txe_thread_resume+0x38>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d002      	beq.n	800cd30 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800cd2a:	230e      	movs	r3, #14
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	e003      	b.n	800cd38 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7fe fee7 	bl	800bb04 <_tx_thread_resume>
 800cd36:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800cd38:	68fb      	ldr	r3, [r7, #12]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	54485244 	.word	0x54485244

0800cd48 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d102      	bne.n	800cd5c <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800cd56:	230e      	movs	r3, #14
 800cd58:	60fb      	str	r3, [r7, #12]
 800cd5a:	e00b      	b.n	800cd74 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a07      	ldr	r2, [pc, #28]	; (800cd80 <_txe_thread_suspend+0x38>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d002      	beq.n	800cd6c <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800cd66:	230e      	movs	r3, #14
 800cd68:	60fb      	str	r3, [r7, #12]
 800cd6a:	e003      	b.n	800cd74 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f7fe fff5 	bl	800bd5c <_tx_thread_suspend>
 800cd72:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800cd74:	68fb      	ldr	r3, [r7, #12]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	54485244 	.word	0x54485244

0800cd84 <__libc_init_array>:
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	4d0d      	ldr	r5, [pc, #52]	; (800cdbc <__libc_init_array+0x38>)
 800cd88:	2600      	movs	r6, #0
 800cd8a:	4c0d      	ldr	r4, [pc, #52]	; (800cdc0 <__libc_init_array+0x3c>)
 800cd8c:	1b64      	subs	r4, r4, r5
 800cd8e:	10a4      	asrs	r4, r4, #2
 800cd90:	42a6      	cmp	r6, r4
 800cd92:	d109      	bne.n	800cda8 <__libc_init_array+0x24>
 800cd94:	4d0b      	ldr	r5, [pc, #44]	; (800cdc4 <__libc_init_array+0x40>)
 800cd96:	2600      	movs	r6, #0
 800cd98:	4c0b      	ldr	r4, [pc, #44]	; (800cdc8 <__libc_init_array+0x44>)
 800cd9a:	f000 f81f 	bl	800cddc <_init>
 800cd9e:	1b64      	subs	r4, r4, r5
 800cda0:	10a4      	asrs	r4, r4, #2
 800cda2:	42a6      	cmp	r6, r4
 800cda4:	d105      	bne.n	800cdb2 <__libc_init_array+0x2e>
 800cda6:	bd70      	pop	{r4, r5, r6, pc}
 800cda8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdac:	3601      	adds	r6, #1
 800cdae:	4798      	blx	r3
 800cdb0:	e7ee      	b.n	800cd90 <__libc_init_array+0xc>
 800cdb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdb6:	3601      	adds	r6, #1
 800cdb8:	4798      	blx	r3
 800cdba:	e7f2      	b.n	800cda2 <__libc_init_array+0x1e>
 800cdbc:	0800d3ac 	.word	0x0800d3ac
 800cdc0:	0800d3ac 	.word	0x0800d3ac
 800cdc4:	0800d3ac 	.word	0x0800d3ac
 800cdc8:	0800d3b0 	.word	0x0800d3b0

0800cdcc <memset>:
 800cdcc:	4402      	add	r2, r0
 800cdce:	4603      	mov	r3, r0
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d100      	bne.n	800cdd6 <memset+0xa>
 800cdd4:	4770      	bx	lr
 800cdd6:	f803 1b01 	strb.w	r1, [r3], #1
 800cdda:	e7f9      	b.n	800cdd0 <memset+0x4>

0800cddc <_init>:
 800cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdde:	bf00      	nop
 800cde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cde2:	bc08      	pop	{r3}
 800cde4:	469e      	mov	lr, r3
 800cde6:	4770      	bx	lr

0800cde8 <_fini>:
 800cde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdea:	bf00      	nop
 800cdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdee:	bc08      	pop	{r3}
 800cdf0:	469e      	mov	lr, r3
 800cdf2:	4770      	bx	lr
